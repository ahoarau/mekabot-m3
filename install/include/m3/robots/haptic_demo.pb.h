// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: haptic_demo.proto

#ifndef PROTOBUF_haptic_5fdemo_2eproto__INCLUDED
#define PROTOBUF_haptic_5fdemo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "component_base.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_haptic_5fdemo_2eproto();
void protobuf_AssignDesc_haptic_5fdemo_2eproto();
void protobuf_ShutdownFile_haptic_5fdemo_2eproto();

class M3HapticDemoStatus;
class M3HapticDemoParam;
class M3HapticDemoCommand;

// ===================================================================

class M3HapticDemoStatus : public ::google::protobuf::Message {
 public:
  M3HapticDemoStatus();
  virtual ~M3HapticDemoStatus();

  M3HapticDemoStatus(const M3HapticDemoStatus& from);

  inline M3HapticDemoStatus& operator=(const M3HapticDemoStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3HapticDemoStatus& default_instance();

  void Swap(M3HapticDemoStatus* other);

  // implements Message ----------------------------------------------

  M3HapticDemoStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3HapticDemoStatus& from);
  void MergeFrom(const M3HapticDemoStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  inline ::M3BaseStatus* release_base();
  inline void set_allocated_base(::M3BaseStatus* base);

  // optional double foo = 2;
  inline bool has_foo() const;
  inline void clear_foo();
  static const int kFooFieldNumber = 2;
  inline double foo() const;
  inline void set_foo(double value);

  // @@protoc_insertion_point(class_scope:M3HapticDemoStatus)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_foo();
  inline void clear_has_foo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::M3BaseStatus* base_;
  double foo_;
  friend void  protobuf_AddDesc_haptic_5fdemo_2eproto();
  friend void protobuf_AssignDesc_haptic_5fdemo_2eproto();
  friend void protobuf_ShutdownFile_haptic_5fdemo_2eproto();

  void InitAsDefaultInstance();
  static M3HapticDemoStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3HapticDemoParam : public ::google::protobuf::Message {
 public:
  M3HapticDemoParam();
  virtual ~M3HapticDemoParam();

  M3HapticDemoParam(const M3HapticDemoParam& from);

  inline M3HapticDemoParam& operator=(const M3HapticDemoParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3HapticDemoParam& default_instance();

  void Swap(M3HapticDemoParam* other);

  // implements Message ----------------------------------------------

  M3HapticDemoParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3HapticDemoParam& from);
  void MergeFrom(const M3HapticDemoParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double max_fx = 1;
  inline bool has_max_fx() const;
  inline void clear_max_fx();
  static const int kMaxFxFieldNumber = 1;
  inline double max_fx() const;
  inline void set_max_fx(double value);

  // optional double max_fy = 2;
  inline bool has_max_fy() const;
  inline void clear_max_fy();
  static const int kMaxFyFieldNumber = 2;
  inline double max_fy() const;
  inline void set_max_fy(double value);

  // optional double max_fz = 3;
  inline bool has_max_fz() const;
  inline void clear_max_fz();
  static const int kMaxFzFieldNumber = 3;
  inline double max_fz() const;
  inline void set_max_fz(double value);

  // optional double x_k = 4;
  inline bool has_x_k() const;
  inline void clear_x_k();
  static const int kXKFieldNumber = 4;
  inline double x_k() const;
  inline void set_x_k(double value);

  // optional double y_k = 5;
  inline bool has_y_k() const;
  inline void clear_y_k();
  static const int kYKFieldNumber = 5;
  inline double y_k() const;
  inline void set_y_k(double value);

  // optional double z_k = 6;
  inline bool has_z_k() const;
  inline void clear_z_k();
  static const int kZKFieldNumber = 6;
  inline double z_k() const;
  inline void set_z_k(double value);

  // optional double x_desired = 7;
  inline bool has_x_desired() const;
  inline void clear_x_desired();
  static const int kXDesiredFieldNumber = 7;
  inline double x_desired() const;
  inline void set_x_desired(double value);

  // optional double y_desired = 8;
  inline bool has_y_desired() const;
  inline void clear_y_desired();
  static const int kYDesiredFieldNumber = 8;
  inline double y_desired() const;
  inline void set_y_desired(double value);

  // optional double z_desired = 9;
  inline bool has_z_desired() const;
  inline void clear_z_desired();
  static const int kZDesiredFieldNumber = 9;
  inline double z_desired() const;
  inline void set_z_desired(double value);

  // optional double x_k_d = 10;
  inline bool has_x_k_d() const;
  inline void clear_x_k_d();
  static const int kXKDFieldNumber = 10;
  inline double x_k_d() const;
  inline void set_x_k_d(double value);

  // optional double y_k_d = 11;
  inline bool has_y_k_d() const;
  inline void clear_y_k_d();
  static const int kYKDFieldNumber = 11;
  inline double y_k_d() const;
  inline void set_y_k_d(double value);

  // optional double z_k_d = 12;
  inline bool has_z_k_d() const;
  inline void clear_z_k_d();
  static const int kZKDFieldNumber = 12;
  inline double z_k_d() const;
  inline void set_z_k_d(double value);

  // @@protoc_insertion_point(class_scope:M3HapticDemoParam)
 private:
  inline void set_has_max_fx();
  inline void clear_has_max_fx();
  inline void set_has_max_fy();
  inline void clear_has_max_fy();
  inline void set_has_max_fz();
  inline void clear_has_max_fz();
  inline void set_has_x_k();
  inline void clear_has_x_k();
  inline void set_has_y_k();
  inline void clear_has_y_k();
  inline void set_has_z_k();
  inline void clear_has_z_k();
  inline void set_has_x_desired();
  inline void clear_has_x_desired();
  inline void set_has_y_desired();
  inline void clear_has_y_desired();
  inline void set_has_z_desired();
  inline void clear_has_z_desired();
  inline void set_has_x_k_d();
  inline void clear_has_x_k_d();
  inline void set_has_y_k_d();
  inline void clear_has_y_k_d();
  inline void set_has_z_k_d();
  inline void clear_has_z_k_d();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double max_fx_;
  double max_fy_;
  double max_fz_;
  double x_k_;
  double y_k_;
  double z_k_;
  double x_desired_;
  double y_desired_;
  double z_desired_;
  double x_k_d_;
  double y_k_d_;
  double z_k_d_;
  friend void  protobuf_AddDesc_haptic_5fdemo_2eproto();
  friend void protobuf_AssignDesc_haptic_5fdemo_2eproto();
  friend void protobuf_ShutdownFile_haptic_5fdemo_2eproto();

  void InitAsDefaultInstance();
  static M3HapticDemoParam* default_instance_;
};
// -------------------------------------------------------------------

class M3HapticDemoCommand : public ::google::protobuf::Message {
 public:
  M3HapticDemoCommand();
  virtual ~M3HapticDemoCommand();

  M3HapticDemoCommand(const M3HapticDemoCommand& from);

  inline M3HapticDemoCommand& operator=(const M3HapticDemoCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3HapticDemoCommand& default_instance();

  void Swap(M3HapticDemoCommand* other);

  // implements Message ----------------------------------------------

  M3HapticDemoCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3HapticDemoCommand& from);
  void MergeFrom(const M3HapticDemoCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enable = 1;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 1;
  inline bool enable() const;
  inline void set_enable(bool value);

  // @@protoc_insertion_point(class_scope:M3HapticDemoCommand)
 private:
  inline void set_has_enable();
  inline void clear_has_enable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool enable_;
  friend void  protobuf_AddDesc_haptic_5fdemo_2eproto();
  friend void protobuf_AssignDesc_haptic_5fdemo_2eproto();
  friend void protobuf_ShutdownFile_haptic_5fdemo_2eproto();

  void InitAsDefaultInstance();
  static M3HapticDemoCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// M3HapticDemoStatus

// optional .M3BaseStatus base = 1;
inline bool M3HapticDemoStatus::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3HapticDemoStatus::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3HapticDemoStatus::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3HapticDemoStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  clear_has_base();
}
inline const ::M3BaseStatus& M3HapticDemoStatus::base() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoStatus.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3HapticDemoStatus::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  // @@protoc_insertion_point(field_mutable:M3HapticDemoStatus.base)
  return base_;
}
inline ::M3BaseStatus* M3HapticDemoStatus::release_base() {
  clear_has_base();
  ::M3BaseStatus* temp = base_;
  base_ = NULL;
  return temp;
}
inline void M3HapticDemoStatus::set_allocated_base(::M3BaseStatus* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:M3HapticDemoStatus.base)
}

// optional double foo = 2;
inline bool M3HapticDemoStatus::has_foo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3HapticDemoStatus::set_has_foo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3HapticDemoStatus::clear_has_foo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3HapticDemoStatus::clear_foo() {
  foo_ = 0;
  clear_has_foo();
}
inline double M3HapticDemoStatus::foo() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoStatus.foo)
  return foo_;
}
inline void M3HapticDemoStatus::set_foo(double value) {
  set_has_foo();
  foo_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoStatus.foo)
}

// -------------------------------------------------------------------

// M3HapticDemoParam

// optional double max_fx = 1;
inline bool M3HapticDemoParam::has_max_fx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3HapticDemoParam::set_has_max_fx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3HapticDemoParam::clear_has_max_fx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3HapticDemoParam::clear_max_fx() {
  max_fx_ = 0;
  clear_has_max_fx();
}
inline double M3HapticDemoParam::max_fx() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.max_fx)
  return max_fx_;
}
inline void M3HapticDemoParam::set_max_fx(double value) {
  set_has_max_fx();
  max_fx_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.max_fx)
}

// optional double max_fy = 2;
inline bool M3HapticDemoParam::has_max_fy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3HapticDemoParam::set_has_max_fy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3HapticDemoParam::clear_has_max_fy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3HapticDemoParam::clear_max_fy() {
  max_fy_ = 0;
  clear_has_max_fy();
}
inline double M3HapticDemoParam::max_fy() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.max_fy)
  return max_fy_;
}
inline void M3HapticDemoParam::set_max_fy(double value) {
  set_has_max_fy();
  max_fy_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.max_fy)
}

// optional double max_fz = 3;
inline bool M3HapticDemoParam::has_max_fz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3HapticDemoParam::set_has_max_fz() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3HapticDemoParam::clear_has_max_fz() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3HapticDemoParam::clear_max_fz() {
  max_fz_ = 0;
  clear_has_max_fz();
}
inline double M3HapticDemoParam::max_fz() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.max_fz)
  return max_fz_;
}
inline void M3HapticDemoParam::set_max_fz(double value) {
  set_has_max_fz();
  max_fz_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.max_fz)
}

// optional double x_k = 4;
inline bool M3HapticDemoParam::has_x_k() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3HapticDemoParam::set_has_x_k() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3HapticDemoParam::clear_has_x_k() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3HapticDemoParam::clear_x_k() {
  x_k_ = 0;
  clear_has_x_k();
}
inline double M3HapticDemoParam::x_k() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.x_k)
  return x_k_;
}
inline void M3HapticDemoParam::set_x_k(double value) {
  set_has_x_k();
  x_k_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.x_k)
}

// optional double y_k = 5;
inline bool M3HapticDemoParam::has_y_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3HapticDemoParam::set_has_y_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3HapticDemoParam::clear_has_y_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3HapticDemoParam::clear_y_k() {
  y_k_ = 0;
  clear_has_y_k();
}
inline double M3HapticDemoParam::y_k() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.y_k)
  return y_k_;
}
inline void M3HapticDemoParam::set_y_k(double value) {
  set_has_y_k();
  y_k_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.y_k)
}

// optional double z_k = 6;
inline bool M3HapticDemoParam::has_z_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void M3HapticDemoParam::set_has_z_k() {
  _has_bits_[0] |= 0x00000020u;
}
inline void M3HapticDemoParam::clear_has_z_k() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void M3HapticDemoParam::clear_z_k() {
  z_k_ = 0;
  clear_has_z_k();
}
inline double M3HapticDemoParam::z_k() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.z_k)
  return z_k_;
}
inline void M3HapticDemoParam::set_z_k(double value) {
  set_has_z_k();
  z_k_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.z_k)
}

// optional double x_desired = 7;
inline bool M3HapticDemoParam::has_x_desired() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void M3HapticDemoParam::set_has_x_desired() {
  _has_bits_[0] |= 0x00000040u;
}
inline void M3HapticDemoParam::clear_has_x_desired() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void M3HapticDemoParam::clear_x_desired() {
  x_desired_ = 0;
  clear_has_x_desired();
}
inline double M3HapticDemoParam::x_desired() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.x_desired)
  return x_desired_;
}
inline void M3HapticDemoParam::set_x_desired(double value) {
  set_has_x_desired();
  x_desired_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.x_desired)
}

// optional double y_desired = 8;
inline bool M3HapticDemoParam::has_y_desired() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void M3HapticDemoParam::set_has_y_desired() {
  _has_bits_[0] |= 0x00000080u;
}
inline void M3HapticDemoParam::clear_has_y_desired() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void M3HapticDemoParam::clear_y_desired() {
  y_desired_ = 0;
  clear_has_y_desired();
}
inline double M3HapticDemoParam::y_desired() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.y_desired)
  return y_desired_;
}
inline void M3HapticDemoParam::set_y_desired(double value) {
  set_has_y_desired();
  y_desired_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.y_desired)
}

// optional double z_desired = 9;
inline bool M3HapticDemoParam::has_z_desired() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void M3HapticDemoParam::set_has_z_desired() {
  _has_bits_[0] |= 0x00000100u;
}
inline void M3HapticDemoParam::clear_has_z_desired() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void M3HapticDemoParam::clear_z_desired() {
  z_desired_ = 0;
  clear_has_z_desired();
}
inline double M3HapticDemoParam::z_desired() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.z_desired)
  return z_desired_;
}
inline void M3HapticDemoParam::set_z_desired(double value) {
  set_has_z_desired();
  z_desired_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.z_desired)
}

// optional double x_k_d = 10;
inline bool M3HapticDemoParam::has_x_k_d() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void M3HapticDemoParam::set_has_x_k_d() {
  _has_bits_[0] |= 0x00000200u;
}
inline void M3HapticDemoParam::clear_has_x_k_d() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void M3HapticDemoParam::clear_x_k_d() {
  x_k_d_ = 0;
  clear_has_x_k_d();
}
inline double M3HapticDemoParam::x_k_d() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.x_k_d)
  return x_k_d_;
}
inline void M3HapticDemoParam::set_x_k_d(double value) {
  set_has_x_k_d();
  x_k_d_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.x_k_d)
}

// optional double y_k_d = 11;
inline bool M3HapticDemoParam::has_y_k_d() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void M3HapticDemoParam::set_has_y_k_d() {
  _has_bits_[0] |= 0x00000400u;
}
inline void M3HapticDemoParam::clear_has_y_k_d() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void M3HapticDemoParam::clear_y_k_d() {
  y_k_d_ = 0;
  clear_has_y_k_d();
}
inline double M3HapticDemoParam::y_k_d() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.y_k_d)
  return y_k_d_;
}
inline void M3HapticDemoParam::set_y_k_d(double value) {
  set_has_y_k_d();
  y_k_d_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.y_k_d)
}

// optional double z_k_d = 12;
inline bool M3HapticDemoParam::has_z_k_d() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void M3HapticDemoParam::set_has_z_k_d() {
  _has_bits_[0] |= 0x00000800u;
}
inline void M3HapticDemoParam::clear_has_z_k_d() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void M3HapticDemoParam::clear_z_k_d() {
  z_k_d_ = 0;
  clear_has_z_k_d();
}
inline double M3HapticDemoParam::z_k_d() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoParam.z_k_d)
  return z_k_d_;
}
inline void M3HapticDemoParam::set_z_k_d(double value) {
  set_has_z_k_d();
  z_k_d_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoParam.z_k_d)
}

// -------------------------------------------------------------------

// M3HapticDemoCommand

// optional bool enable = 1;
inline bool M3HapticDemoCommand::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3HapticDemoCommand::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3HapticDemoCommand::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3HapticDemoCommand::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
inline bool M3HapticDemoCommand::enable() const {
  // @@protoc_insertion_point(field_get:M3HapticDemoCommand.enable)
  return enable_;
}
inline void M3HapticDemoCommand::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:M3HapticDemoCommand.enable)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_haptic_5fdemo_2eproto__INCLUDED
