// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pwr_ec.proto

#ifndef PROTOBUF_pwr_5fec_2eproto__INCLUDED
#define PROTOBUF_pwr_5fec_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "component_base.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pwr_5fec_2eproto();
void protobuf_AssignDesc_pwr_5fec_2eproto();
void protobuf_ShutdownFile_pwr_5fec_2eproto();

class M3PwrEcStatus;
class M3PwrEcCommand;
class M3PwrEcParam;

// ===================================================================

class M3PwrEcStatus : public ::google::protobuf::Message {
 public:
  M3PwrEcStatus();
  virtual ~M3PwrEcStatus();

  M3PwrEcStatus(const M3PwrEcStatus& from);

  inline M3PwrEcStatus& operator=(const M3PwrEcStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3PwrEcStatus& default_instance();

  void Swap(M3PwrEcStatus* other);

  // implements Message ----------------------------------------------

  M3PwrEcStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3PwrEcStatus& from);
  void MergeFrom(const M3PwrEcStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  inline ::M3BaseStatus* release_base();
  inline void set_allocated_base(::M3BaseStatus* base);

  // optional .M3EtherCATStatus ethercat = 2;
  inline bool has_ethercat() const;
  inline void clear_ethercat();
  static const int kEthercatFieldNumber = 2;
  inline const ::M3EtherCATStatus& ethercat() const;
  inline ::M3EtherCATStatus* mutable_ethercat();
  inline ::M3EtherCATStatus* release_ethercat();
  inline void set_allocated_ethercat(::M3EtherCATStatus* ethercat);

  // optional int32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional bool motor_enabled = 4;
  inline bool has_motor_enabled() const;
  inline void clear_motor_enabled();
  static const int kMotorEnabledFieldNumber = 4;
  inline bool motor_enabled() const;
  inline void set_motor_enabled(bool value);

  // optional int32 adc_bus_voltage = 5;
  inline bool has_adc_bus_voltage() const;
  inline void clear_adc_bus_voltage();
  static const int kAdcBusVoltageFieldNumber = 5;
  inline ::google::protobuf::int32 adc_bus_voltage() const;
  inline void set_adc_bus_voltage(::google::protobuf::int32 value);

  // optional int32 adc_current_digital = 6;
  inline bool has_adc_current_digital() const;
  inline void clear_adc_current_digital();
  static const int kAdcCurrentDigitalFieldNumber = 6;
  inline ::google::protobuf::int32 adc_current_digital() const;
  inline void set_adc_current_digital(::google::protobuf::int32 value);

  // optional int32 adc_ext_0 = 7;
  inline bool has_adc_ext_0() const;
  inline void clear_adc_ext_0();
  static const int kAdcExt0FieldNumber = 7;
  inline ::google::protobuf::int32 adc_ext_0() const;
  inline void set_adc_ext_0(::google::protobuf::int32 value);

  // optional int32 flags = 8;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 8;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:M3PwrEcStatus)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_ethercat();
  inline void clear_has_ethercat();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_motor_enabled();
  inline void clear_has_motor_enabled();
  inline void set_has_adc_bus_voltage();
  inline void clear_has_adc_bus_voltage();
  inline void set_has_adc_current_digital();
  inline void clear_has_adc_current_digital();
  inline void set_has_adc_ext_0();
  inline void clear_has_adc_ext_0();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::M3BaseStatus* base_;
  ::M3EtherCATStatus* ethercat_;
  ::google::protobuf::int32 timestamp_;
  bool motor_enabled_;
  ::google::protobuf::int32 adc_bus_voltage_;
  ::google::protobuf::int32 adc_current_digital_;
  ::google::protobuf::int32 adc_ext_0_;
  ::google::protobuf::int32 flags_;
  friend void  protobuf_AddDesc_pwr_5fec_2eproto();
  friend void protobuf_AssignDesc_pwr_5fec_2eproto();
  friend void protobuf_ShutdownFile_pwr_5fec_2eproto();

  void InitAsDefaultInstance();
  static M3PwrEcStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3PwrEcCommand : public ::google::protobuf::Message {
 public:
  M3PwrEcCommand();
  virtual ~M3PwrEcCommand();

  M3PwrEcCommand(const M3PwrEcCommand& from);

  inline M3PwrEcCommand& operator=(const M3PwrEcCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3PwrEcCommand& default_instance();

  void Swap(M3PwrEcCommand* other);

  // implements Message ----------------------------------------------

  M3PwrEcCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3PwrEcCommand& from);
  void MergeFrom(const M3PwrEcCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 enable_motor = 1;
  inline bool has_enable_motor() const;
  inline void clear_enable_motor();
  static const int kEnableMotorFieldNumber = 1;
  inline ::google::protobuf::int32 enable_motor() const;
  inline void set_enable_motor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:M3PwrEcCommand)
 private:
  inline void set_has_enable_motor();
  inline void clear_has_enable_motor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 enable_motor_;
  friend void  protobuf_AddDesc_pwr_5fec_2eproto();
  friend void protobuf_AssignDesc_pwr_5fec_2eproto();
  friend void protobuf_ShutdownFile_pwr_5fec_2eproto();

  void InitAsDefaultInstance();
  static M3PwrEcCommand* default_instance_;
};
// -------------------------------------------------------------------

class M3PwrEcParam : public ::google::protobuf::Message {
 public:
  M3PwrEcParam();
  virtual ~M3PwrEcParam();

  M3PwrEcParam(const M3PwrEcParam& from);

  inline M3PwrEcParam& operator=(const M3PwrEcParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3PwrEcParam& default_instance();

  void Swap(M3PwrEcParam* other);

  // implements Message ----------------------------------------------

  M3PwrEcParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3PwrEcParam& from);
  void MergeFrom(const M3PwrEcParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 config = 1;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline ::google::protobuf::int32 config() const;
  inline void set_config(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:M3PwrEcParam)
 private:
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 config_;
  friend void  protobuf_AddDesc_pwr_5fec_2eproto();
  friend void protobuf_AssignDesc_pwr_5fec_2eproto();
  friend void protobuf_ShutdownFile_pwr_5fec_2eproto();

  void InitAsDefaultInstance();
  static M3PwrEcParam* default_instance_;
};
// ===================================================================


// ===================================================================

// M3PwrEcStatus

// optional .M3BaseStatus base = 1;
inline bool M3PwrEcStatus::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3PwrEcStatus::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3PwrEcStatus::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3PwrEcStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  clear_has_base();
}
inline const ::M3BaseStatus& M3PwrEcStatus::base() const {
  // @@protoc_insertion_point(field_get:M3PwrEcStatus.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3PwrEcStatus::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  // @@protoc_insertion_point(field_mutable:M3PwrEcStatus.base)
  return base_;
}
inline ::M3BaseStatus* M3PwrEcStatus::release_base() {
  clear_has_base();
  ::M3BaseStatus* temp = base_;
  base_ = NULL;
  return temp;
}
inline void M3PwrEcStatus::set_allocated_base(::M3BaseStatus* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:M3PwrEcStatus.base)
}

// optional .M3EtherCATStatus ethercat = 2;
inline bool M3PwrEcStatus::has_ethercat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3PwrEcStatus::set_has_ethercat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3PwrEcStatus::clear_has_ethercat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3PwrEcStatus::clear_ethercat() {
  if (ethercat_ != NULL) ethercat_->::M3EtherCATStatus::Clear();
  clear_has_ethercat();
}
inline const ::M3EtherCATStatus& M3PwrEcStatus::ethercat() const {
  // @@protoc_insertion_point(field_get:M3PwrEcStatus.ethercat)
  return ethercat_ != NULL ? *ethercat_ : *default_instance_->ethercat_;
}
inline ::M3EtherCATStatus* M3PwrEcStatus::mutable_ethercat() {
  set_has_ethercat();
  if (ethercat_ == NULL) ethercat_ = new ::M3EtherCATStatus;
  // @@protoc_insertion_point(field_mutable:M3PwrEcStatus.ethercat)
  return ethercat_;
}
inline ::M3EtherCATStatus* M3PwrEcStatus::release_ethercat() {
  clear_has_ethercat();
  ::M3EtherCATStatus* temp = ethercat_;
  ethercat_ = NULL;
  return temp;
}
inline void M3PwrEcStatus::set_allocated_ethercat(::M3EtherCATStatus* ethercat) {
  delete ethercat_;
  ethercat_ = ethercat;
  if (ethercat) {
    set_has_ethercat();
  } else {
    clear_has_ethercat();
  }
  // @@protoc_insertion_point(field_set_allocated:M3PwrEcStatus.ethercat)
}

// optional int32 timestamp = 3;
inline bool M3PwrEcStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3PwrEcStatus::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3PwrEcStatus::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3PwrEcStatus::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 M3PwrEcStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:M3PwrEcStatus.timestamp)
  return timestamp_;
}
inline void M3PwrEcStatus::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:M3PwrEcStatus.timestamp)
}

// optional bool motor_enabled = 4;
inline bool M3PwrEcStatus::has_motor_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3PwrEcStatus::set_has_motor_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3PwrEcStatus::clear_has_motor_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3PwrEcStatus::clear_motor_enabled() {
  motor_enabled_ = false;
  clear_has_motor_enabled();
}
inline bool M3PwrEcStatus::motor_enabled() const {
  // @@protoc_insertion_point(field_get:M3PwrEcStatus.motor_enabled)
  return motor_enabled_;
}
inline void M3PwrEcStatus::set_motor_enabled(bool value) {
  set_has_motor_enabled();
  motor_enabled_ = value;
  // @@protoc_insertion_point(field_set:M3PwrEcStatus.motor_enabled)
}

// optional int32 adc_bus_voltage = 5;
inline bool M3PwrEcStatus::has_adc_bus_voltage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3PwrEcStatus::set_has_adc_bus_voltage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3PwrEcStatus::clear_has_adc_bus_voltage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3PwrEcStatus::clear_adc_bus_voltage() {
  adc_bus_voltage_ = 0;
  clear_has_adc_bus_voltage();
}
inline ::google::protobuf::int32 M3PwrEcStatus::adc_bus_voltage() const {
  // @@protoc_insertion_point(field_get:M3PwrEcStatus.adc_bus_voltage)
  return adc_bus_voltage_;
}
inline void M3PwrEcStatus::set_adc_bus_voltage(::google::protobuf::int32 value) {
  set_has_adc_bus_voltage();
  adc_bus_voltage_ = value;
  // @@protoc_insertion_point(field_set:M3PwrEcStatus.adc_bus_voltage)
}

// optional int32 adc_current_digital = 6;
inline bool M3PwrEcStatus::has_adc_current_digital() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void M3PwrEcStatus::set_has_adc_current_digital() {
  _has_bits_[0] |= 0x00000020u;
}
inline void M3PwrEcStatus::clear_has_adc_current_digital() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void M3PwrEcStatus::clear_adc_current_digital() {
  adc_current_digital_ = 0;
  clear_has_adc_current_digital();
}
inline ::google::protobuf::int32 M3PwrEcStatus::adc_current_digital() const {
  // @@protoc_insertion_point(field_get:M3PwrEcStatus.adc_current_digital)
  return adc_current_digital_;
}
inline void M3PwrEcStatus::set_adc_current_digital(::google::protobuf::int32 value) {
  set_has_adc_current_digital();
  adc_current_digital_ = value;
  // @@protoc_insertion_point(field_set:M3PwrEcStatus.adc_current_digital)
}

// optional int32 adc_ext_0 = 7;
inline bool M3PwrEcStatus::has_adc_ext_0() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void M3PwrEcStatus::set_has_adc_ext_0() {
  _has_bits_[0] |= 0x00000040u;
}
inline void M3PwrEcStatus::clear_has_adc_ext_0() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void M3PwrEcStatus::clear_adc_ext_0() {
  adc_ext_0_ = 0;
  clear_has_adc_ext_0();
}
inline ::google::protobuf::int32 M3PwrEcStatus::adc_ext_0() const {
  // @@protoc_insertion_point(field_get:M3PwrEcStatus.adc_ext_0)
  return adc_ext_0_;
}
inline void M3PwrEcStatus::set_adc_ext_0(::google::protobuf::int32 value) {
  set_has_adc_ext_0();
  adc_ext_0_ = value;
  // @@protoc_insertion_point(field_set:M3PwrEcStatus.adc_ext_0)
}

// optional int32 flags = 8;
inline bool M3PwrEcStatus::has_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void M3PwrEcStatus::set_has_flags() {
  _has_bits_[0] |= 0x00000080u;
}
inline void M3PwrEcStatus::clear_has_flags() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void M3PwrEcStatus::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 M3PwrEcStatus::flags() const {
  // @@protoc_insertion_point(field_get:M3PwrEcStatus.flags)
  return flags_;
}
inline void M3PwrEcStatus::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:M3PwrEcStatus.flags)
}

// -------------------------------------------------------------------

// M3PwrEcCommand

// optional int32 enable_motor = 1;
inline bool M3PwrEcCommand::has_enable_motor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3PwrEcCommand::set_has_enable_motor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3PwrEcCommand::clear_has_enable_motor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3PwrEcCommand::clear_enable_motor() {
  enable_motor_ = 0;
  clear_has_enable_motor();
}
inline ::google::protobuf::int32 M3PwrEcCommand::enable_motor() const {
  // @@protoc_insertion_point(field_get:M3PwrEcCommand.enable_motor)
  return enable_motor_;
}
inline void M3PwrEcCommand::set_enable_motor(::google::protobuf::int32 value) {
  set_has_enable_motor();
  enable_motor_ = value;
  // @@protoc_insertion_point(field_set:M3PwrEcCommand.enable_motor)
}

// -------------------------------------------------------------------

// M3PwrEcParam

// optional int32 config = 1;
inline bool M3PwrEcParam::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3PwrEcParam::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3PwrEcParam::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3PwrEcParam::clear_config() {
  config_ = 0;
  clear_has_config();
}
inline ::google::protobuf::int32 M3PwrEcParam::config() const {
  // @@protoc_insertion_point(field_get:M3PwrEcParam.config)
  return config_;
}
inline void M3PwrEcParam::set_config(::google::protobuf::int32 value) {
  set_has_config();
  config_ = value;
  // @@protoc_insertion_point(field_set:M3PwrEcParam.config)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pwr_5fec_2eproto__INCLUDED
