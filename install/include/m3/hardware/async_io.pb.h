// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: async_io.proto

#ifndef PROTOBUF_async_5fio_2eproto__INCLUDED
#define PROTOBUF_async_5fio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "component_base.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_async_5fio_2eproto();
void protobuf_AssignDesc_async_5fio_2eproto();
void protobuf_ShutdownFile_async_5fio_2eproto();

class M3AsyncIOThreadStatus;
class M3AsyncIOStatus;
class M3AsyncIOParam;
class M3AsyncIOCommand;

// ===================================================================

class M3AsyncIOThreadStatus : public ::google::protobuf::Message {
 public:
  M3AsyncIOThreadStatus();
  virtual ~M3AsyncIOThreadStatus();

  M3AsyncIOThreadStatus(const M3AsyncIOThreadStatus& from);

  inline M3AsyncIOThreadStatus& operator=(const M3AsyncIOThreadStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3AsyncIOThreadStatus& default_instance();

  void Swap(M3AsyncIOThreadStatus* other);

  // implements Message ----------------------------------------------

  M3AsyncIOThreadStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3AsyncIOThreadStatus& from);
  void MergeFrom(const M3AsyncIOThreadStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double tmp = 1;
  inline bool has_tmp() const;
  inline void clear_tmp();
  static const int kTmpFieldNumber = 1;
  inline double tmp() const;
  inline void set_tmp(double value);

  // @@protoc_insertion_point(class_scope:M3AsyncIOThreadStatus)
 private:
  inline void set_has_tmp();
  inline void clear_has_tmp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double tmp_;
  friend void  protobuf_AddDesc_async_5fio_2eproto();
  friend void protobuf_AssignDesc_async_5fio_2eproto();
  friend void protobuf_ShutdownFile_async_5fio_2eproto();

  void InitAsDefaultInstance();
  static M3AsyncIOThreadStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3AsyncIOStatus : public ::google::protobuf::Message {
 public:
  M3AsyncIOStatus();
  virtual ~M3AsyncIOStatus();

  M3AsyncIOStatus(const M3AsyncIOStatus& from);

  inline M3AsyncIOStatus& operator=(const M3AsyncIOStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3AsyncIOStatus& default_instance();

  void Swap(M3AsyncIOStatus* other);

  // implements Message ----------------------------------------------

  M3AsyncIOStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3AsyncIOStatus& from);
  void MergeFrom(const M3AsyncIOStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  inline ::M3BaseStatus* release_base();
  inline void set_allocated_base(::M3BaseStatus* base);

  // optional .M3AsyncIOThreadStatus async = 2;
  inline bool has_async() const;
  inline void clear_async();
  static const int kAsyncFieldNumber = 2;
  inline const ::M3AsyncIOThreadStatus& async() const;
  inline ::M3AsyncIOThreadStatus* mutable_async();
  inline ::M3AsyncIOThreadStatus* release_async();
  inline void set_allocated_async(::M3AsyncIOThreadStatus* async);

  // @@protoc_insertion_point(class_scope:M3AsyncIOStatus)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_async();
  inline void clear_has_async();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::M3BaseStatus* base_;
  ::M3AsyncIOThreadStatus* async_;
  friend void  protobuf_AddDesc_async_5fio_2eproto();
  friend void protobuf_AssignDesc_async_5fio_2eproto();
  friend void protobuf_ShutdownFile_async_5fio_2eproto();

  void InitAsDefaultInstance();
  static M3AsyncIOStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3AsyncIOParam : public ::google::protobuf::Message {
 public:
  M3AsyncIOParam();
  virtual ~M3AsyncIOParam();

  M3AsyncIOParam(const M3AsyncIOParam& from);

  inline M3AsyncIOParam& operator=(const M3AsyncIOParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3AsyncIOParam& default_instance();

  void Swap(M3AsyncIOParam* other);

  // implements Message ----------------------------------------------

  M3AsyncIOParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3AsyncIOParam& from);
  void MergeFrom(const M3AsyncIOParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double tmp = 1;
  inline bool has_tmp() const;
  inline void clear_tmp();
  static const int kTmpFieldNumber = 1;
  inline double tmp() const;
  inline void set_tmp(double value);

  // @@protoc_insertion_point(class_scope:M3AsyncIOParam)
 private:
  inline void set_has_tmp();
  inline void clear_has_tmp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double tmp_;
  friend void  protobuf_AddDesc_async_5fio_2eproto();
  friend void protobuf_AssignDesc_async_5fio_2eproto();
  friend void protobuf_ShutdownFile_async_5fio_2eproto();

  void InitAsDefaultInstance();
  static M3AsyncIOParam* default_instance_;
};
// -------------------------------------------------------------------

class M3AsyncIOCommand : public ::google::protobuf::Message {
 public:
  M3AsyncIOCommand();
  virtual ~M3AsyncIOCommand();

  M3AsyncIOCommand(const M3AsyncIOCommand& from);

  inline M3AsyncIOCommand& operator=(const M3AsyncIOCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3AsyncIOCommand& default_instance();

  void Swap(M3AsyncIOCommand* other);

  // implements Message ----------------------------------------------

  M3AsyncIOCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3AsyncIOCommand& from);
  void MergeFrom(const M3AsyncIOCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double tmp = 1;
  inline bool has_tmp() const;
  inline void clear_tmp();
  static const int kTmpFieldNumber = 1;
  inline double tmp() const;
  inline void set_tmp(double value);

  // @@protoc_insertion_point(class_scope:M3AsyncIOCommand)
 private:
  inline void set_has_tmp();
  inline void clear_has_tmp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double tmp_;
  friend void  protobuf_AddDesc_async_5fio_2eproto();
  friend void protobuf_AssignDesc_async_5fio_2eproto();
  friend void protobuf_ShutdownFile_async_5fio_2eproto();

  void InitAsDefaultInstance();
  static M3AsyncIOCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// M3AsyncIOThreadStatus

// optional double tmp = 1;
inline bool M3AsyncIOThreadStatus::has_tmp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3AsyncIOThreadStatus::set_has_tmp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3AsyncIOThreadStatus::clear_has_tmp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3AsyncIOThreadStatus::clear_tmp() {
  tmp_ = 0;
  clear_has_tmp();
}
inline double M3AsyncIOThreadStatus::tmp() const {
  // @@protoc_insertion_point(field_get:M3AsyncIOThreadStatus.tmp)
  return tmp_;
}
inline void M3AsyncIOThreadStatus::set_tmp(double value) {
  set_has_tmp();
  tmp_ = value;
  // @@protoc_insertion_point(field_set:M3AsyncIOThreadStatus.tmp)
}

// -------------------------------------------------------------------

// M3AsyncIOStatus

// optional .M3BaseStatus base = 1;
inline bool M3AsyncIOStatus::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3AsyncIOStatus::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3AsyncIOStatus::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3AsyncIOStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  clear_has_base();
}
inline const ::M3BaseStatus& M3AsyncIOStatus::base() const {
  // @@protoc_insertion_point(field_get:M3AsyncIOStatus.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3AsyncIOStatus::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  // @@protoc_insertion_point(field_mutable:M3AsyncIOStatus.base)
  return base_;
}
inline ::M3BaseStatus* M3AsyncIOStatus::release_base() {
  clear_has_base();
  ::M3BaseStatus* temp = base_;
  base_ = NULL;
  return temp;
}
inline void M3AsyncIOStatus::set_allocated_base(::M3BaseStatus* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:M3AsyncIOStatus.base)
}

// optional .M3AsyncIOThreadStatus async = 2;
inline bool M3AsyncIOStatus::has_async() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3AsyncIOStatus::set_has_async() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3AsyncIOStatus::clear_has_async() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3AsyncIOStatus::clear_async() {
  if (async_ != NULL) async_->::M3AsyncIOThreadStatus::Clear();
  clear_has_async();
}
inline const ::M3AsyncIOThreadStatus& M3AsyncIOStatus::async() const {
  // @@protoc_insertion_point(field_get:M3AsyncIOStatus.async)
  return async_ != NULL ? *async_ : *default_instance_->async_;
}
inline ::M3AsyncIOThreadStatus* M3AsyncIOStatus::mutable_async() {
  set_has_async();
  if (async_ == NULL) async_ = new ::M3AsyncIOThreadStatus;
  // @@protoc_insertion_point(field_mutable:M3AsyncIOStatus.async)
  return async_;
}
inline ::M3AsyncIOThreadStatus* M3AsyncIOStatus::release_async() {
  clear_has_async();
  ::M3AsyncIOThreadStatus* temp = async_;
  async_ = NULL;
  return temp;
}
inline void M3AsyncIOStatus::set_allocated_async(::M3AsyncIOThreadStatus* async) {
  delete async_;
  async_ = async;
  if (async) {
    set_has_async();
  } else {
    clear_has_async();
  }
  // @@protoc_insertion_point(field_set_allocated:M3AsyncIOStatus.async)
}

// -------------------------------------------------------------------

// M3AsyncIOParam

// optional double tmp = 1;
inline bool M3AsyncIOParam::has_tmp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3AsyncIOParam::set_has_tmp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3AsyncIOParam::clear_has_tmp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3AsyncIOParam::clear_tmp() {
  tmp_ = 0;
  clear_has_tmp();
}
inline double M3AsyncIOParam::tmp() const {
  // @@protoc_insertion_point(field_get:M3AsyncIOParam.tmp)
  return tmp_;
}
inline void M3AsyncIOParam::set_tmp(double value) {
  set_has_tmp();
  tmp_ = value;
  // @@protoc_insertion_point(field_set:M3AsyncIOParam.tmp)
}

// -------------------------------------------------------------------

// M3AsyncIOCommand

// optional double tmp = 1;
inline bool M3AsyncIOCommand::has_tmp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3AsyncIOCommand::set_has_tmp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3AsyncIOCommand::clear_has_tmp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3AsyncIOCommand::clear_tmp() {
  tmp_ = 0;
  clear_has_tmp();
}
inline double M3AsyncIOCommand::tmp() const {
  // @@protoc_insertion_point(field_get:M3AsyncIOCommand.tmp)
  return tmp_;
}
inline void M3AsyncIOCommand::set_tmp(double value) {
  set_has_tmp();
  tmp_ = value;
  // @@protoc_insertion_point(field_set:M3AsyncIOCommand.tmp)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_async_5fio_2eproto__INCLUDED
