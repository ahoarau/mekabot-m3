// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_test.proto

#ifndef PROTOBUF_log_5ftest_2eproto__INCLUDED
#define PROTOBUF_log_5ftest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "component_base.pb.h"
#include "pwr.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_log_5ftest_2eproto();
void protobuf_AssignDesc_log_5ftest_2eproto();
void protobuf_ShutdownFile_log_5ftest_2eproto();

class M3MekaLogTestStatus;
class M3MekaLogTestParam;
class M3MekaLogTestCommand;

// ===================================================================

class M3MekaLogTestStatus : public ::google::protobuf::Message {
 public:
  M3MekaLogTestStatus();
  virtual ~M3MekaLogTestStatus();

  M3MekaLogTestStatus(const M3MekaLogTestStatus& from);

  inline M3MekaLogTestStatus& operator=(const M3MekaLogTestStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3MekaLogTestStatus& default_instance();

  void Swap(M3MekaLogTestStatus* other);

  // implements Message ----------------------------------------------

  M3MekaLogTestStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3MekaLogTestStatus& from);
  void MergeFrom(const M3MekaLogTestStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  inline ::M3BaseStatus* release_base();
  inline void set_allocated_base(::M3BaseStatus* base);

  // optional string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string log_name = 3;
  inline bool has_log_name() const;
  inline void clear_log_name();
  static const int kLogNameFieldNumber = 3;
  inline const ::std::string& log_name() const;
  inline void set_log_name(const ::std::string& value);
  inline void set_log_name(const char* value);
  inline void set_log_name(const char* value, size_t size);
  inline ::std::string* mutable_log_name();
  inline ::std::string* release_log_name();
  inline void set_allocated_log_name(::std::string* log_name);

  // optional .M3PwrStatus pwr_status = 4;
  inline bool has_pwr_status() const;
  inline void clear_pwr_status();
  static const int kPwrStatusFieldNumber = 4;
  inline const ::M3PwrStatus& pwr_status() const;
  inline ::M3PwrStatus* mutable_pwr_status();
  inline ::M3PwrStatus* release_pwr_status();
  inline void set_allocated_pwr_status(::M3PwrStatus* pwr_status);

  // optional .M3PwrCommand pwr_cmd = 5;
  inline bool has_pwr_cmd() const;
  inline void clear_pwr_cmd();
  static const int kPwrCmdFieldNumber = 5;
  inline const ::M3PwrCommand& pwr_cmd() const;
  inline ::M3PwrCommand* mutable_pwr_cmd();
  inline ::M3PwrCommand* release_pwr_cmd();
  inline void set_allocated_pwr_cmd(::M3PwrCommand* pwr_cmd);

  // @@protoc_insertion_point(class_scope:M3MekaLogTestStatus)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_log_name();
  inline void clear_has_log_name();
  inline void set_has_pwr_status();
  inline void clear_has_pwr_status();
  inline void set_has_pwr_cmd();
  inline void clear_has_pwr_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::M3BaseStatus* base_;
  ::std::string* path_;
  ::std::string* log_name_;
  ::M3PwrStatus* pwr_status_;
  ::M3PwrCommand* pwr_cmd_;
  friend void  protobuf_AddDesc_log_5ftest_2eproto();
  friend void protobuf_AssignDesc_log_5ftest_2eproto();
  friend void protobuf_ShutdownFile_log_5ftest_2eproto();

  void InitAsDefaultInstance();
  static M3MekaLogTestStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3MekaLogTestParam : public ::google::protobuf::Message {
 public:
  M3MekaLogTestParam();
  virtual ~M3MekaLogTestParam();

  M3MekaLogTestParam(const M3MekaLogTestParam& from);

  inline M3MekaLogTestParam& operator=(const M3MekaLogTestParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3MekaLogTestParam& default_instance();

  void Swap(M3MekaLogTestParam* other);

  // implements Message ----------------------------------------------

  M3MekaLogTestParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3MekaLogTestParam& from);
  void MergeFrom(const M3MekaLogTestParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double debug = 1;
  inline bool has_debug() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 1;
  inline double debug() const;
  inline void set_debug(double value);

  // @@protoc_insertion_point(class_scope:M3MekaLogTestParam)
 private:
  inline void set_has_debug();
  inline void clear_has_debug();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double debug_;
  friend void  protobuf_AddDesc_log_5ftest_2eproto();
  friend void protobuf_AssignDesc_log_5ftest_2eproto();
  friend void protobuf_ShutdownFile_log_5ftest_2eproto();

  void InitAsDefaultInstance();
  static M3MekaLogTestParam* default_instance_;
};
// -------------------------------------------------------------------

class M3MekaLogTestCommand : public ::google::protobuf::Message {
 public:
  M3MekaLogTestCommand();
  virtual ~M3MekaLogTestCommand();

  M3MekaLogTestCommand(const M3MekaLogTestCommand& from);

  inline M3MekaLogTestCommand& operator=(const M3MekaLogTestCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3MekaLogTestCommand& default_instance();

  void Swap(M3MekaLogTestCommand* other);

  // implements Message ----------------------------------------------

  M3MekaLogTestCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3MekaLogTestCommand& from);
  void MergeFrom(const M3MekaLogTestCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double enable = 1;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 1;
  inline double enable() const;
  inline void set_enable(double value);

  // @@protoc_insertion_point(class_scope:M3MekaLogTestCommand)
 private:
  inline void set_has_enable();
  inline void clear_has_enable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double enable_;
  friend void  protobuf_AddDesc_log_5ftest_2eproto();
  friend void protobuf_AssignDesc_log_5ftest_2eproto();
  friend void protobuf_ShutdownFile_log_5ftest_2eproto();

  void InitAsDefaultInstance();
  static M3MekaLogTestCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// M3MekaLogTestStatus

// optional .M3BaseStatus base = 1;
inline bool M3MekaLogTestStatus::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3MekaLogTestStatus::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3MekaLogTestStatus::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3MekaLogTestStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  clear_has_base();
}
inline const ::M3BaseStatus& M3MekaLogTestStatus::base() const {
  // @@protoc_insertion_point(field_get:M3MekaLogTestStatus.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3MekaLogTestStatus::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  // @@protoc_insertion_point(field_mutable:M3MekaLogTestStatus.base)
  return base_;
}
inline ::M3BaseStatus* M3MekaLogTestStatus::release_base() {
  clear_has_base();
  ::M3BaseStatus* temp = base_;
  base_ = NULL;
  return temp;
}
inline void M3MekaLogTestStatus::set_allocated_base(::M3BaseStatus* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:M3MekaLogTestStatus.base)
}

// optional string path = 2;
inline bool M3MekaLogTestStatus::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3MekaLogTestStatus::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3MekaLogTestStatus::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3MekaLogTestStatus::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& M3MekaLogTestStatus::path() const {
  // @@protoc_insertion_point(field_get:M3MekaLogTestStatus.path)
  return *path_;
}
inline void M3MekaLogTestStatus::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:M3MekaLogTestStatus.path)
}
inline void M3MekaLogTestStatus::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:M3MekaLogTestStatus.path)
}
inline void M3MekaLogTestStatus::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:M3MekaLogTestStatus.path)
}
inline ::std::string* M3MekaLogTestStatus::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:M3MekaLogTestStatus.path)
  return path_;
}
inline ::std::string* M3MekaLogTestStatus::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void M3MekaLogTestStatus::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:M3MekaLogTestStatus.path)
}

// optional string log_name = 3;
inline bool M3MekaLogTestStatus::has_log_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3MekaLogTestStatus::set_has_log_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3MekaLogTestStatus::clear_has_log_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3MekaLogTestStatus::clear_log_name() {
  if (log_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_name_->clear();
  }
  clear_has_log_name();
}
inline const ::std::string& M3MekaLogTestStatus::log_name() const {
  // @@protoc_insertion_point(field_get:M3MekaLogTestStatus.log_name)
  return *log_name_;
}
inline void M3MekaLogTestStatus::set_log_name(const ::std::string& value) {
  set_has_log_name();
  if (log_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_name_ = new ::std::string;
  }
  log_name_->assign(value);
  // @@protoc_insertion_point(field_set:M3MekaLogTestStatus.log_name)
}
inline void M3MekaLogTestStatus::set_log_name(const char* value) {
  set_has_log_name();
  if (log_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_name_ = new ::std::string;
  }
  log_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:M3MekaLogTestStatus.log_name)
}
inline void M3MekaLogTestStatus::set_log_name(const char* value, size_t size) {
  set_has_log_name();
  if (log_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_name_ = new ::std::string;
  }
  log_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:M3MekaLogTestStatus.log_name)
}
inline ::std::string* M3MekaLogTestStatus::mutable_log_name() {
  set_has_log_name();
  if (log_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:M3MekaLogTestStatus.log_name)
  return log_name_;
}
inline ::std::string* M3MekaLogTestStatus::release_log_name() {
  clear_has_log_name();
  if (log_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = log_name_;
    log_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void M3MekaLogTestStatus::set_allocated_log_name(::std::string* log_name) {
  if (log_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_name_;
  }
  if (log_name) {
    set_has_log_name();
    log_name_ = log_name;
  } else {
    clear_has_log_name();
    log_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:M3MekaLogTestStatus.log_name)
}

// optional .M3PwrStatus pwr_status = 4;
inline bool M3MekaLogTestStatus::has_pwr_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3MekaLogTestStatus::set_has_pwr_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3MekaLogTestStatus::clear_has_pwr_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3MekaLogTestStatus::clear_pwr_status() {
  if (pwr_status_ != NULL) pwr_status_->::M3PwrStatus::Clear();
  clear_has_pwr_status();
}
inline const ::M3PwrStatus& M3MekaLogTestStatus::pwr_status() const {
  // @@protoc_insertion_point(field_get:M3MekaLogTestStatus.pwr_status)
  return pwr_status_ != NULL ? *pwr_status_ : *default_instance_->pwr_status_;
}
inline ::M3PwrStatus* M3MekaLogTestStatus::mutable_pwr_status() {
  set_has_pwr_status();
  if (pwr_status_ == NULL) pwr_status_ = new ::M3PwrStatus;
  // @@protoc_insertion_point(field_mutable:M3MekaLogTestStatus.pwr_status)
  return pwr_status_;
}
inline ::M3PwrStatus* M3MekaLogTestStatus::release_pwr_status() {
  clear_has_pwr_status();
  ::M3PwrStatus* temp = pwr_status_;
  pwr_status_ = NULL;
  return temp;
}
inline void M3MekaLogTestStatus::set_allocated_pwr_status(::M3PwrStatus* pwr_status) {
  delete pwr_status_;
  pwr_status_ = pwr_status;
  if (pwr_status) {
    set_has_pwr_status();
  } else {
    clear_has_pwr_status();
  }
  // @@protoc_insertion_point(field_set_allocated:M3MekaLogTestStatus.pwr_status)
}

// optional .M3PwrCommand pwr_cmd = 5;
inline bool M3MekaLogTestStatus::has_pwr_cmd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3MekaLogTestStatus::set_has_pwr_cmd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3MekaLogTestStatus::clear_has_pwr_cmd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3MekaLogTestStatus::clear_pwr_cmd() {
  if (pwr_cmd_ != NULL) pwr_cmd_->::M3PwrCommand::Clear();
  clear_has_pwr_cmd();
}
inline const ::M3PwrCommand& M3MekaLogTestStatus::pwr_cmd() const {
  // @@protoc_insertion_point(field_get:M3MekaLogTestStatus.pwr_cmd)
  return pwr_cmd_ != NULL ? *pwr_cmd_ : *default_instance_->pwr_cmd_;
}
inline ::M3PwrCommand* M3MekaLogTestStatus::mutable_pwr_cmd() {
  set_has_pwr_cmd();
  if (pwr_cmd_ == NULL) pwr_cmd_ = new ::M3PwrCommand;
  // @@protoc_insertion_point(field_mutable:M3MekaLogTestStatus.pwr_cmd)
  return pwr_cmd_;
}
inline ::M3PwrCommand* M3MekaLogTestStatus::release_pwr_cmd() {
  clear_has_pwr_cmd();
  ::M3PwrCommand* temp = pwr_cmd_;
  pwr_cmd_ = NULL;
  return temp;
}
inline void M3MekaLogTestStatus::set_allocated_pwr_cmd(::M3PwrCommand* pwr_cmd) {
  delete pwr_cmd_;
  pwr_cmd_ = pwr_cmd;
  if (pwr_cmd) {
    set_has_pwr_cmd();
  } else {
    clear_has_pwr_cmd();
  }
  // @@protoc_insertion_point(field_set_allocated:M3MekaLogTestStatus.pwr_cmd)
}

// -------------------------------------------------------------------

// M3MekaLogTestParam

// optional double debug = 1;
inline bool M3MekaLogTestParam::has_debug() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3MekaLogTestParam::set_has_debug() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3MekaLogTestParam::clear_has_debug() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3MekaLogTestParam::clear_debug() {
  debug_ = 0;
  clear_has_debug();
}
inline double M3MekaLogTestParam::debug() const {
  // @@protoc_insertion_point(field_get:M3MekaLogTestParam.debug)
  return debug_;
}
inline void M3MekaLogTestParam::set_debug(double value) {
  set_has_debug();
  debug_ = value;
  // @@protoc_insertion_point(field_set:M3MekaLogTestParam.debug)
}

// -------------------------------------------------------------------

// M3MekaLogTestCommand

// optional double enable = 1;
inline bool M3MekaLogTestCommand::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3MekaLogTestCommand::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3MekaLogTestCommand::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3MekaLogTestCommand::clear_enable() {
  enable_ = 0;
  clear_has_enable();
}
inline double M3MekaLogTestCommand::enable() const {
  // @@protoc_insertion_point(field_get:M3MekaLogTestCommand.enable)
  return enable_;
}
inline void M3MekaLogTestCommand::set_enable(double value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:M3MekaLogTestCommand.enable)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_log_5ftest_2eproto__INCLUDED
