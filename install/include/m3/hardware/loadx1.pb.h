// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loadx1.proto

#ifndef PROTOBUF_loadx1_2eproto__INCLUDED
#define PROTOBUF_loadx1_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "component_base.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_loadx1_2eproto();
void protobuf_AssignDesc_loadx1_2eproto();
void protobuf_ShutdownFile_loadx1_2eproto();

class M3LoadX1Status;
class M3LoadX1Param;
class M3LoadX1Command;

// ===================================================================

class M3LoadX1Status : public ::google::protobuf::Message {
 public:
  M3LoadX1Status();
  virtual ~M3LoadX1Status();

  M3LoadX1Status(const M3LoadX1Status& from);

  inline M3LoadX1Status& operator=(const M3LoadX1Status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LoadX1Status& default_instance();

  void Swap(M3LoadX1Status* other);

  // implements Message ----------------------------------------------

  M3LoadX1Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LoadX1Status& from);
  void MergeFrom(const M3LoadX1Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  inline ::M3BaseStatus* release_base();
  inline void set_allocated_base(::M3BaseStatus* base);

  // optional double torque = 6;
  inline bool has_torque() const;
  inline void clear_torque();
  static const int kTorqueFieldNumber = 6;
  inline double torque() const;
  inline void set_torque(double value);

  // optional double torquedot = 7;
  inline bool has_torquedot() const;
  inline void clear_torquedot();
  static const int kTorquedotFieldNumber = 7;
  inline double torquedot() const;
  inline void set_torquedot(double value);

  // @@protoc_insertion_point(class_scope:M3LoadX1Status)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_torque();
  inline void clear_has_torque();
  inline void set_has_torquedot();
  inline void clear_has_torquedot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::M3BaseStatus* base_;
  double torque_;
  double torquedot_;
  friend void  protobuf_AddDesc_loadx1_2eproto();
  friend void protobuf_AssignDesc_loadx1_2eproto();
  friend void protobuf_ShutdownFile_loadx1_2eproto();

  void InitAsDefaultInstance();
  static M3LoadX1Status* default_instance_;
};
// -------------------------------------------------------------------

class M3LoadX1Param : public ::google::protobuf::Message {
 public:
  M3LoadX1Param();
  virtual ~M3LoadX1Param();

  M3LoadX1Param(const M3LoadX1Param& from);

  inline M3LoadX1Param& operator=(const M3LoadX1Param& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LoadX1Param& default_instance();

  void Swap(M3LoadX1Param* other);

  // implements Message ----------------------------------------------

  M3LoadX1Param* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LoadX1Param& from);
  void MergeFrom(const M3LoadX1Param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline double dummy() const;
  inline void set_dummy(double value);

  // @@protoc_insertion_point(class_scope:M3LoadX1Param)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double dummy_;
  friend void  protobuf_AddDesc_loadx1_2eproto();
  friend void protobuf_AssignDesc_loadx1_2eproto();
  friend void protobuf_ShutdownFile_loadx1_2eproto();

  void InitAsDefaultInstance();
  static M3LoadX1Param* default_instance_;
};
// -------------------------------------------------------------------

class M3LoadX1Command : public ::google::protobuf::Message {
 public:
  M3LoadX1Command();
  virtual ~M3LoadX1Command();

  M3LoadX1Command(const M3LoadX1Command& from);

  inline M3LoadX1Command& operator=(const M3LoadX1Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LoadX1Command& default_instance();

  void Swap(M3LoadX1Command* other);

  // implements Message ----------------------------------------------

  M3LoadX1Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LoadX1Command& from);
  void MergeFrom(const M3LoadX1Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double dummy = 1;
  inline bool has_dummy() const;
  inline void clear_dummy();
  static const int kDummyFieldNumber = 1;
  inline double dummy() const;
  inline void set_dummy(double value);

  // @@protoc_insertion_point(class_scope:M3LoadX1Command)
 private:
  inline void set_has_dummy();
  inline void clear_has_dummy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double dummy_;
  friend void  protobuf_AddDesc_loadx1_2eproto();
  friend void protobuf_AssignDesc_loadx1_2eproto();
  friend void protobuf_ShutdownFile_loadx1_2eproto();

  void InitAsDefaultInstance();
  static M3LoadX1Command* default_instance_;
};
// ===================================================================


// ===================================================================

// M3LoadX1Status

// optional .M3BaseStatus base = 1;
inline bool M3LoadX1Status::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3LoadX1Status::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3LoadX1Status::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3LoadX1Status::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  clear_has_base();
}
inline const ::M3BaseStatus& M3LoadX1Status::base() const {
  // @@protoc_insertion_point(field_get:M3LoadX1Status.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3LoadX1Status::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  // @@protoc_insertion_point(field_mutable:M3LoadX1Status.base)
  return base_;
}
inline ::M3BaseStatus* M3LoadX1Status::release_base() {
  clear_has_base();
  ::M3BaseStatus* temp = base_;
  base_ = NULL;
  return temp;
}
inline void M3LoadX1Status::set_allocated_base(::M3BaseStatus* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:M3LoadX1Status.base)
}

// optional double torque = 6;
inline bool M3LoadX1Status::has_torque() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3LoadX1Status::set_has_torque() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3LoadX1Status::clear_has_torque() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3LoadX1Status::clear_torque() {
  torque_ = 0;
  clear_has_torque();
}
inline double M3LoadX1Status::torque() const {
  // @@protoc_insertion_point(field_get:M3LoadX1Status.torque)
  return torque_;
}
inline void M3LoadX1Status::set_torque(double value) {
  set_has_torque();
  torque_ = value;
  // @@protoc_insertion_point(field_set:M3LoadX1Status.torque)
}

// optional double torquedot = 7;
inline bool M3LoadX1Status::has_torquedot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3LoadX1Status::set_has_torquedot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3LoadX1Status::clear_has_torquedot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3LoadX1Status::clear_torquedot() {
  torquedot_ = 0;
  clear_has_torquedot();
}
inline double M3LoadX1Status::torquedot() const {
  // @@protoc_insertion_point(field_get:M3LoadX1Status.torquedot)
  return torquedot_;
}
inline void M3LoadX1Status::set_torquedot(double value) {
  set_has_torquedot();
  torquedot_ = value;
  // @@protoc_insertion_point(field_set:M3LoadX1Status.torquedot)
}

// -------------------------------------------------------------------

// M3LoadX1Param

// optional double dummy = 1;
inline bool M3LoadX1Param::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3LoadX1Param::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3LoadX1Param::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3LoadX1Param::clear_dummy() {
  dummy_ = 0;
  clear_has_dummy();
}
inline double M3LoadX1Param::dummy() const {
  // @@protoc_insertion_point(field_get:M3LoadX1Param.dummy)
  return dummy_;
}
inline void M3LoadX1Param::set_dummy(double value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:M3LoadX1Param.dummy)
}

// -------------------------------------------------------------------

// M3LoadX1Command

// optional double dummy = 1;
inline bool M3LoadX1Command::has_dummy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3LoadX1Command::set_has_dummy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3LoadX1Command::clear_has_dummy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3LoadX1Command::clear_dummy() {
  dummy_ = 0;
  clear_has_dummy();
}
inline double M3LoadX1Command::dummy() const {
  // @@protoc_insertion_point(field_get:M3LoadX1Command.dummy)
  return dummy_;
}
inline void M3LoadX1Command::set_dummy(double value) {
  set_has_dummy();
  dummy_ = value;
  // @@protoc_insertion_point(field_set:M3LoadX1Command.dummy)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_loadx1_2eproto__INCLUDED
