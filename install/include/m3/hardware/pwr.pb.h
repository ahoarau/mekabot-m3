// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pwr.proto

#ifndef PROTOBUF_pwr_2eproto__INCLUDED
#define PROTOBUF_pwr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "component_base.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pwr_2eproto();
void protobuf_AssignDesc_pwr_2eproto();
void protobuf_ShutdownFile_pwr_2eproto();

class M3PwrStatus;
class M3PwrParam;
class M3PwrCommand;

// ===================================================================

class M3PwrStatus : public ::google::protobuf::Message {
 public:
  M3PwrStatus();
  virtual ~M3PwrStatus();

  M3PwrStatus(const M3PwrStatus& from);

  inline M3PwrStatus& operator=(const M3PwrStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3PwrStatus& default_instance();

  void Swap(M3PwrStatus* other);

  // implements Message ----------------------------------------------

  M3PwrStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3PwrStatus& from);
  void MergeFrom(const M3PwrStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  inline ::M3BaseStatus* release_base();
  inline void set_allocated_base(::M3BaseStatus* base);

  // optional double bus_voltage = 2;
  inline bool has_bus_voltage() const;
  inline void clear_bus_voltage();
  static const int kBusVoltageFieldNumber = 2;
  inline double bus_voltage() const;
  inline void set_bus_voltage(double value);

  // optional double current_digital = 3;
  inline bool has_current_digital() const;
  inline void clear_current_digital();
  static const int kCurrentDigitalFieldNumber = 3;
  inline double current_digital() const;
  inline void set_current_digital(double value);

  // optional bool motor_enabled = 4;
  inline bool has_motor_enabled() const;
  inline void clear_motor_enabled();
  static const int kMotorEnabledFieldNumber = 4;
  inline bool motor_enabled() const;
  inline void set_motor_enabled(bool value);

  // optional double bus_current = 5;
  inline bool has_bus_current() const;
  inline void clear_bus_current();
  static const int kBusCurrentFieldNumber = 5;
  inline double bus_current() const;
  inline void set_bus_current(double value);

  // @@protoc_insertion_point(class_scope:M3PwrStatus)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_bus_voltage();
  inline void clear_has_bus_voltage();
  inline void set_has_current_digital();
  inline void clear_has_current_digital();
  inline void set_has_motor_enabled();
  inline void clear_has_motor_enabled();
  inline void set_has_bus_current();
  inline void clear_has_bus_current();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::M3BaseStatus* base_;
  double bus_voltage_;
  double current_digital_;
  double bus_current_;
  bool motor_enabled_;
  friend void  protobuf_AddDesc_pwr_2eproto();
  friend void protobuf_AssignDesc_pwr_2eproto();
  friend void protobuf_ShutdownFile_pwr_2eproto();

  void InitAsDefaultInstance();
  static M3PwrStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3PwrParam : public ::google::protobuf::Message {
 public:
  M3PwrParam();
  virtual ~M3PwrParam();

  M3PwrParam(const M3PwrParam& from);

  inline M3PwrParam& operator=(const M3PwrParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3PwrParam& default_instance();

  void Swap(M3PwrParam* other);

  // implements Message ----------------------------------------------

  M3PwrParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3PwrParam& from);
  void MergeFrom(const M3PwrParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double max_current_digital = 1;
  inline bool has_max_current_digital() const;
  inline void clear_max_current_digital();
  static const int kMaxCurrentDigitalFieldNumber = 1;
  inline double max_current_digital() const;
  inline void set_max_current_digital(double value);

  // optional double max_bus_voltage = 2;
  inline bool has_max_bus_voltage() const;
  inline void clear_max_bus_voltage();
  static const int kMaxBusVoltageFieldNumber = 2;
  inline double max_bus_voltage() const;
  inline void set_max_bus_voltage(double value);

  // optional double min_bus_voltage = 3;
  inline bool has_min_bus_voltage() const;
  inline void clear_min_bus_voltage();
  static const int kMinBusVoltageFieldNumber = 3;
  inline double min_bus_voltage() const;
  inline void set_min_bus_voltage(double value);

  // optional double max_bus_current = 4;
  inline bool has_max_bus_current() const;
  inline void clear_max_bus_current();
  static const int kMaxBusCurrentFieldNumber = 4;
  inline double max_bus_current() const;
  inline void set_max_bus_current(double value);

  // optional double charge_bus_voltage = 5;
  inline bool has_charge_bus_voltage() const;
  inline void clear_charge_bus_voltage();
  static const int kChargeBusVoltageFieldNumber = 5;
  inline double charge_bus_voltage() const;
  inline void set_charge_bus_voltage(double value);

  // @@protoc_insertion_point(class_scope:M3PwrParam)
 private:
  inline void set_has_max_current_digital();
  inline void clear_has_max_current_digital();
  inline void set_has_max_bus_voltage();
  inline void clear_has_max_bus_voltage();
  inline void set_has_min_bus_voltage();
  inline void clear_has_min_bus_voltage();
  inline void set_has_max_bus_current();
  inline void clear_has_max_bus_current();
  inline void set_has_charge_bus_voltage();
  inline void clear_has_charge_bus_voltage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double max_current_digital_;
  double max_bus_voltage_;
  double min_bus_voltage_;
  double max_bus_current_;
  double charge_bus_voltage_;
  friend void  protobuf_AddDesc_pwr_2eproto();
  friend void protobuf_AssignDesc_pwr_2eproto();
  friend void protobuf_ShutdownFile_pwr_2eproto();

  void InitAsDefaultInstance();
  static M3PwrParam* default_instance_;
};
// -------------------------------------------------------------------

class M3PwrCommand : public ::google::protobuf::Message {
 public:
  M3PwrCommand();
  virtual ~M3PwrCommand();

  M3PwrCommand(const M3PwrCommand& from);

  inline M3PwrCommand& operator=(const M3PwrCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3PwrCommand& default_instance();

  void Swap(M3PwrCommand* other);

  // implements Message ----------------------------------------------

  M3PwrCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3PwrCommand& from);
  void MergeFrom(const M3PwrCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool enable_motor = 3;
  inline bool has_enable_motor() const;
  inline void clear_enable_motor();
  static const int kEnableMotorFieldNumber = 3;
  inline bool enable_motor() const;
  inline void set_enable_motor(bool value);

  // @@protoc_insertion_point(class_scope:M3PwrCommand)
 private:
  inline void set_has_enable_motor();
  inline void clear_has_enable_motor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool enable_motor_;
  friend void  protobuf_AddDesc_pwr_2eproto();
  friend void protobuf_AssignDesc_pwr_2eproto();
  friend void protobuf_ShutdownFile_pwr_2eproto();

  void InitAsDefaultInstance();
  static M3PwrCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// M3PwrStatus

// optional .M3BaseStatus base = 1;
inline bool M3PwrStatus::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3PwrStatus::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3PwrStatus::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3PwrStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  clear_has_base();
}
inline const ::M3BaseStatus& M3PwrStatus::base() const {
  // @@protoc_insertion_point(field_get:M3PwrStatus.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3PwrStatus::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  // @@protoc_insertion_point(field_mutable:M3PwrStatus.base)
  return base_;
}
inline ::M3BaseStatus* M3PwrStatus::release_base() {
  clear_has_base();
  ::M3BaseStatus* temp = base_;
  base_ = NULL;
  return temp;
}
inline void M3PwrStatus::set_allocated_base(::M3BaseStatus* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:M3PwrStatus.base)
}

// optional double bus_voltage = 2;
inline bool M3PwrStatus::has_bus_voltage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3PwrStatus::set_has_bus_voltage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3PwrStatus::clear_has_bus_voltage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3PwrStatus::clear_bus_voltage() {
  bus_voltage_ = 0;
  clear_has_bus_voltage();
}
inline double M3PwrStatus::bus_voltage() const {
  // @@protoc_insertion_point(field_get:M3PwrStatus.bus_voltage)
  return bus_voltage_;
}
inline void M3PwrStatus::set_bus_voltage(double value) {
  set_has_bus_voltage();
  bus_voltage_ = value;
  // @@protoc_insertion_point(field_set:M3PwrStatus.bus_voltage)
}

// optional double current_digital = 3;
inline bool M3PwrStatus::has_current_digital() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3PwrStatus::set_has_current_digital() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3PwrStatus::clear_has_current_digital() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3PwrStatus::clear_current_digital() {
  current_digital_ = 0;
  clear_has_current_digital();
}
inline double M3PwrStatus::current_digital() const {
  // @@protoc_insertion_point(field_get:M3PwrStatus.current_digital)
  return current_digital_;
}
inline void M3PwrStatus::set_current_digital(double value) {
  set_has_current_digital();
  current_digital_ = value;
  // @@protoc_insertion_point(field_set:M3PwrStatus.current_digital)
}

// optional bool motor_enabled = 4;
inline bool M3PwrStatus::has_motor_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3PwrStatus::set_has_motor_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3PwrStatus::clear_has_motor_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3PwrStatus::clear_motor_enabled() {
  motor_enabled_ = false;
  clear_has_motor_enabled();
}
inline bool M3PwrStatus::motor_enabled() const {
  // @@protoc_insertion_point(field_get:M3PwrStatus.motor_enabled)
  return motor_enabled_;
}
inline void M3PwrStatus::set_motor_enabled(bool value) {
  set_has_motor_enabled();
  motor_enabled_ = value;
  // @@protoc_insertion_point(field_set:M3PwrStatus.motor_enabled)
}

// optional double bus_current = 5;
inline bool M3PwrStatus::has_bus_current() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3PwrStatus::set_has_bus_current() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3PwrStatus::clear_has_bus_current() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3PwrStatus::clear_bus_current() {
  bus_current_ = 0;
  clear_has_bus_current();
}
inline double M3PwrStatus::bus_current() const {
  // @@protoc_insertion_point(field_get:M3PwrStatus.bus_current)
  return bus_current_;
}
inline void M3PwrStatus::set_bus_current(double value) {
  set_has_bus_current();
  bus_current_ = value;
  // @@protoc_insertion_point(field_set:M3PwrStatus.bus_current)
}

// -------------------------------------------------------------------

// M3PwrParam

// optional double max_current_digital = 1;
inline bool M3PwrParam::has_max_current_digital() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3PwrParam::set_has_max_current_digital() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3PwrParam::clear_has_max_current_digital() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3PwrParam::clear_max_current_digital() {
  max_current_digital_ = 0;
  clear_has_max_current_digital();
}
inline double M3PwrParam::max_current_digital() const {
  // @@protoc_insertion_point(field_get:M3PwrParam.max_current_digital)
  return max_current_digital_;
}
inline void M3PwrParam::set_max_current_digital(double value) {
  set_has_max_current_digital();
  max_current_digital_ = value;
  // @@protoc_insertion_point(field_set:M3PwrParam.max_current_digital)
}

// optional double max_bus_voltage = 2;
inline bool M3PwrParam::has_max_bus_voltage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3PwrParam::set_has_max_bus_voltage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3PwrParam::clear_has_max_bus_voltage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3PwrParam::clear_max_bus_voltage() {
  max_bus_voltage_ = 0;
  clear_has_max_bus_voltage();
}
inline double M3PwrParam::max_bus_voltage() const {
  // @@protoc_insertion_point(field_get:M3PwrParam.max_bus_voltage)
  return max_bus_voltage_;
}
inline void M3PwrParam::set_max_bus_voltage(double value) {
  set_has_max_bus_voltage();
  max_bus_voltage_ = value;
  // @@protoc_insertion_point(field_set:M3PwrParam.max_bus_voltage)
}

// optional double min_bus_voltage = 3;
inline bool M3PwrParam::has_min_bus_voltage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3PwrParam::set_has_min_bus_voltage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3PwrParam::clear_has_min_bus_voltage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3PwrParam::clear_min_bus_voltage() {
  min_bus_voltage_ = 0;
  clear_has_min_bus_voltage();
}
inline double M3PwrParam::min_bus_voltage() const {
  // @@protoc_insertion_point(field_get:M3PwrParam.min_bus_voltage)
  return min_bus_voltage_;
}
inline void M3PwrParam::set_min_bus_voltage(double value) {
  set_has_min_bus_voltage();
  min_bus_voltage_ = value;
  // @@protoc_insertion_point(field_set:M3PwrParam.min_bus_voltage)
}

// optional double max_bus_current = 4;
inline bool M3PwrParam::has_max_bus_current() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3PwrParam::set_has_max_bus_current() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3PwrParam::clear_has_max_bus_current() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3PwrParam::clear_max_bus_current() {
  max_bus_current_ = 0;
  clear_has_max_bus_current();
}
inline double M3PwrParam::max_bus_current() const {
  // @@protoc_insertion_point(field_get:M3PwrParam.max_bus_current)
  return max_bus_current_;
}
inline void M3PwrParam::set_max_bus_current(double value) {
  set_has_max_bus_current();
  max_bus_current_ = value;
  // @@protoc_insertion_point(field_set:M3PwrParam.max_bus_current)
}

// optional double charge_bus_voltage = 5;
inline bool M3PwrParam::has_charge_bus_voltage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3PwrParam::set_has_charge_bus_voltage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3PwrParam::clear_has_charge_bus_voltage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3PwrParam::clear_charge_bus_voltage() {
  charge_bus_voltage_ = 0;
  clear_has_charge_bus_voltage();
}
inline double M3PwrParam::charge_bus_voltage() const {
  // @@protoc_insertion_point(field_get:M3PwrParam.charge_bus_voltage)
  return charge_bus_voltage_;
}
inline void M3PwrParam::set_charge_bus_voltage(double value) {
  set_has_charge_bus_voltage();
  charge_bus_voltage_ = value;
  // @@protoc_insertion_point(field_set:M3PwrParam.charge_bus_voltage)
}

// -------------------------------------------------------------------

// M3PwrCommand

// optional bool enable_motor = 3;
inline bool M3PwrCommand::has_enable_motor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3PwrCommand::set_has_enable_motor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3PwrCommand::clear_has_enable_motor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3PwrCommand::clear_enable_motor() {
  enable_motor_ = false;
  clear_has_enable_motor();
}
inline bool M3PwrCommand::enable_motor() const {
  // @@protoc_insertion_point(field_get:M3PwrCommand.enable_motor)
  return enable_motor_;
}
inline void M3PwrCommand::set_enable_motor(bool value) {
  set_has_enable_motor();
  enable_motor_ = value;
  // @@protoc_insertion_point(field_set:M3PwrCommand.enable_motor)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pwr_2eproto__INCLUDED
