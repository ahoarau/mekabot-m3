// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint.proto

#ifndef PROTOBUF_joint_2eproto__INCLUDED
#define PROTOBUF_joint_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "component_base.pb.h"
#include "smoothing_mode.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_joint_2eproto();
void protobuf_AssignDesc_joint_2eproto();
void protobuf_ShutdownFile_joint_2eproto();

class M3JointStatus;
class M3JointParam;
class M3JointCommand;

enum JOINT_MODE {
  JOINT_MODE_OFF = 0,
  JOINT_MODE_PWM = 1,
  JOINT_MODE_TORQUE = 2,
  JOINT_MODE_THETA = 3,
  JOINT_MODE_TORQUE_GC = 4,
  JOINT_MODE_THETA_GC = 5,
  JOINT_MODE_THETA_MJ = 6,
  JOINT_MODE_THETA_GC_MJ = 7,
  JOINT_MODE_POSE = 8,
  JOINT_MODE_TORQUE_GRAV_MODEL = 9,
  JOINT_MODE_THETADOT_GC = 10,
  JOINT_MODE_THETADOT = 11
};
bool JOINT_MODE_IsValid(int value);
const JOINT_MODE JOINT_MODE_MIN = JOINT_MODE_OFF;
const JOINT_MODE JOINT_MODE_MAX = JOINT_MODE_THETADOT;
const int JOINT_MODE_ARRAYSIZE = JOINT_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* JOINT_MODE_descriptor();
inline const ::std::string& JOINT_MODE_Name(JOINT_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    JOINT_MODE_descriptor(), value);
}
inline bool JOINT_MODE_Parse(
    const ::std::string& name, JOINT_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JOINT_MODE>(
    JOINT_MODE_descriptor(), name, value);
}
// ===================================================================

class M3JointStatus : public ::google::protobuf::Message {
 public:
  M3JointStatus();
  virtual ~M3JointStatus();

  M3JointStatus(const M3JointStatus& from);

  inline M3JointStatus& operator=(const M3JointStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3JointStatus& default_instance();

  void Swap(M3JointStatus* other);

  // implements Message ----------------------------------------------

  M3JointStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3JointStatus& from);
  void MergeFrom(const M3JointStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  inline ::M3BaseStatus* release_base();
  inline void set_allocated_base(::M3BaseStatus* base);

  // optional double motor_temp = 2;
  inline bool has_motor_temp() const;
  inline void clear_motor_temp();
  static const int kMotorTempFieldNumber = 2;
  inline double motor_temp() const;
  inline void set_motor_temp(double value);

  // optional double amp_temp = 3;
  inline bool has_amp_temp() const;
  inline void clear_amp_temp();
  static const int kAmpTempFieldNumber = 3;
  inline double amp_temp() const;
  inline void set_amp_temp(double value);

  // optional double current = 4;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 4;
  inline double current() const;
  inline void set_current(double value);

  // optional double torque = 6;
  inline bool has_torque() const;
  inline void clear_torque();
  static const int kTorqueFieldNumber = 6;
  inline double torque() const;
  inline void set_torque(double value);

  // optional double torquedot = 7;
  inline bool has_torquedot() const;
  inline void clear_torquedot();
  static const int kTorquedotFieldNumber = 7;
  inline double torquedot() const;
  inline void set_torquedot(double value);

  // optional double theta = 8;
  inline bool has_theta() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 8;
  inline double theta() const;
  inline void set_theta(double value);

  // optional double thetadot = 9;
  inline bool has_thetadot() const;
  inline void clear_thetadot();
  static const int kThetadotFieldNumber = 9;
  inline double thetadot() const;
  inline void set_thetadot(double value);

  // optional double thetadotdot = 10;
  inline bool has_thetadotdot() const;
  inline void clear_thetadotdot();
  static const int kThetadotdotFieldNumber = 10;
  inline double thetadotdot() const;
  inline void set_thetadotdot(double value);

  // optional double torque_gravity = 11;
  inline bool has_torque_gravity() const;
  inline void clear_torque_gravity();
  static const int kTorqueGravityFieldNumber = 11;
  inline double torque_gravity() const;
  inline void set_torque_gravity(double value);

  // optional int32 pwm_cmd = 12;
  inline bool has_pwm_cmd() const;
  inline void clear_pwm_cmd();
  static const int kPwmCmdFieldNumber = 12;
  inline ::google::protobuf::int32 pwm_cmd() const;
  inline void set_pwm_cmd(::google::protobuf::int32 value);

  // optional double ambient_temp = 13;
  inline bool has_ambient_temp() const;
  inline void clear_ambient_temp();
  static const int kAmbientTempFieldNumber = 13;
  inline double ambient_temp() const;
  inline void set_ambient_temp(double value);

  // optional double case_temp = 14;
  inline bool has_case_temp() const;
  inline void clear_case_temp();
  static const int kCaseTempFieldNumber = 14;
  inline double case_temp() const;
  inline void set_case_temp(double value);

  // optional double power = 15;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 15;
  inline double power() const;
  inline void set_power(double value);

  // optional int32 flags = 16;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 16;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:M3JointStatus)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_motor_temp();
  inline void clear_has_motor_temp();
  inline void set_has_amp_temp();
  inline void clear_has_amp_temp();
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_torque();
  inline void clear_has_torque();
  inline void set_has_torquedot();
  inline void clear_has_torquedot();
  inline void set_has_theta();
  inline void clear_has_theta();
  inline void set_has_thetadot();
  inline void clear_has_thetadot();
  inline void set_has_thetadotdot();
  inline void clear_has_thetadotdot();
  inline void set_has_torque_gravity();
  inline void clear_has_torque_gravity();
  inline void set_has_pwm_cmd();
  inline void clear_has_pwm_cmd();
  inline void set_has_ambient_temp();
  inline void clear_has_ambient_temp();
  inline void set_has_case_temp();
  inline void clear_has_case_temp();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_flags();
  inline void clear_has_flags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::M3BaseStatus* base_;
  double motor_temp_;
  double amp_temp_;
  double current_;
  double torque_;
  double torquedot_;
  double theta_;
  double thetadot_;
  double thetadotdot_;
  double torque_gravity_;
  double ambient_temp_;
  double case_temp_;
  ::google::protobuf::int32 pwm_cmd_;
  ::google::protobuf::int32 flags_;
  double power_;
  friend void  protobuf_AddDesc_joint_2eproto();
  friend void protobuf_AssignDesc_joint_2eproto();
  friend void protobuf_ShutdownFile_joint_2eproto();

  void InitAsDefaultInstance();
  static M3JointStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3JointParam : public ::google::protobuf::Message {
 public:
  M3JointParam();
  virtual ~M3JointParam();

  M3JointParam(const M3JointParam& from);

  inline M3JointParam& operator=(const M3JointParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3JointParam& default_instance();

  void Swap(M3JointParam* other);

  // implements Message ----------------------------------------------

  M3JointParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3JointParam& from);
  void MergeFrom(const M3JointParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double kq_p = 1;
  inline bool has_kq_p() const;
  inline void clear_kq_p();
  static const int kKqPFieldNumber = 1;
  inline double kq_p() const;
  inline void set_kq_p(double value);

  // optional double kq_i = 2;
  inline bool has_kq_i() const;
  inline void clear_kq_i();
  static const int kKqIFieldNumber = 2;
  inline double kq_i() const;
  inline void set_kq_i(double value);

  // optional double kq_d = 3;
  inline bool has_kq_d() const;
  inline void clear_kq_d();
  static const int kKqDFieldNumber = 3;
  inline double kq_d() const;
  inline void set_kq_d(double value);

  // optional double kq_i_limit = 4;
  inline bool has_kq_i_limit() const;
  inline void clear_kq_i_limit();
  static const int kKqILimitFieldNumber = 4;
  inline double kq_i_limit() const;
  inline void set_kq_i_limit(double value);

  // optional double max_q = 5;
  inline bool has_max_q() const;
  inline void clear_max_q();
  static const int kMaxQFieldNumber = 5;
  inline double max_q() const;
  inline void set_max_q(double value);

  // optional double min_q = 6;
  inline bool has_min_q() const;
  inline void clear_min_q();
  static const int kMinQFieldNumber = 6;
  inline double min_q() const;
  inline void set_min_q(double value);

  // optional double kt_p = 7;
  inline bool has_kt_p() const;
  inline void clear_kt_p();
  static const int kKtPFieldNumber = 7;
  inline double kt_p() const;
  inline void set_kt_p(double value);

  // optional double kt_i = 8;
  inline bool has_kt_i() const;
  inline void clear_kt_i();
  static const int kKtIFieldNumber = 8;
  inline double kt_i() const;
  inline void set_kt_i(double value);

  // optional double kt_d = 9;
  inline bool has_kt_d() const;
  inline void clear_kt_d();
  static const int kKtDFieldNumber = 9;
  inline double kt_d() const;
  inline void set_kt_d(double value);

  // optional double kt_i_limit = 10;
  inline bool has_kt_i_limit() const;
  inline void clear_kt_i_limit();
  static const int kKtILimitFieldNumber = 10;
  inline double kt_i_limit() const;
  inline void set_kt_i_limit(double value);

  // optional double kq_g = 11;
  inline bool has_kq_g() const;
  inline void clear_kq_g();
  static const int kKqGFieldNumber = 11;
  inline double kq_g() const;
  inline void set_kq_g(double value);

  // optional double max_q_slew_rate = 12;
  inline bool has_max_q_slew_rate() const;
  inline void clear_max_q_slew_rate();
  static const int kMaxQSlewRateFieldNumber = 12;
  inline double max_q_slew_rate() const;
  inline void set_max_q_slew_rate(double value);

  // optional double kq_i_range = 13;
  inline bool has_kq_i_range() const;
  inline void clear_kq_i_range();
  static const int kKqIRangeFieldNumber = 13;
  inline double kq_i_range() const;
  inline void set_kq_i_range(double value);

  // optional double kt_i_range = 14;
  inline bool has_kt_i_range() const;
  inline void clear_kt_i_range();
  static const int kKtIRangeFieldNumber = 14;
  inline double kt_i_range() const;
  inline void set_kt_i_range(double value);

  // optional double max_q_pad = 15;
  inline bool has_max_q_pad() const;
  inline void clear_max_q_pad();
  static const int kMaxQPadFieldNumber = 15;
  inline double max_q_pad() const;
  inline void set_max_q_pad(double value);

  // optional double min_q_pad = 16;
  inline bool has_min_q_pad() const;
  inline void clear_min_q_pad();
  static const int kMinQPadFieldNumber = 16;
  inline double min_q_pad() const;
  inline void set_min_q_pad(double value);

  // optional double kq_d_pose = 17;
  inline bool has_kq_d_pose() const;
  inline void clear_kq_d_pose();
  static const int kKqDPoseFieldNumber = 17;
  inline double kq_d_pose() const;
  inline void set_kq_d_pose(double value);

  // optional double kq_p_tq_gm = 18;
  inline bool has_kq_p_tq_gm() const;
  inline void clear_kq_p_tq_gm();
  static const int kKqPTqGmFieldNumber = 18;
  inline double kq_p_tq_gm() const;
  inline void set_kq_p_tq_gm(double value);

  // optional double kq_i_tq_gm = 19;
  inline bool has_kq_i_tq_gm() const;
  inline void clear_kq_i_tq_gm();
  static const int kKqITqGmFieldNumber = 19;
  inline double kq_i_tq_gm() const;
  inline void set_kq_i_tq_gm(double value);

  // optional double kq_d_tq_gm = 20;
  inline bool has_kq_d_tq_gm() const;
  inline void clear_kq_d_tq_gm();
  static const int kKqDTqGmFieldNumber = 20;
  inline double kq_d_tq_gm() const;
  inline void set_kq_d_tq_gm(double value);

  // optional double kq_i_limit_tq_gm = 21;
  inline bool has_kq_i_limit_tq_gm() const;
  inline void clear_kq_i_limit_tq_gm();
  static const int kKqILimitTqGmFieldNumber = 21;
  inline double kq_i_limit_tq_gm() const;
  inline void set_kq_i_limit_tq_gm(double value);

  // optional double kq_i_range_tq_gm = 22;
  inline bool has_kq_i_range_tq_gm() const;
  inline void clear_kq_i_range_tq_gm();
  static const int kKqIRangeTqGmFieldNumber = 22;
  inline double kq_i_range_tq_gm() const;
  inline void set_kq_i_range_tq_gm(double value);

  // optional double kqdot_p = 23;
  inline bool has_kqdot_p() const;
  inline void clear_kqdot_p();
  static const int kKqdotPFieldNumber = 23;
  inline double kqdot_p() const;
  inline void set_kqdot_p(double value);

  // optional double kqdot_i = 24;
  inline bool has_kqdot_i() const;
  inline void clear_kqdot_i();
  static const int kKqdotIFieldNumber = 24;
  inline double kqdot_i() const;
  inline void set_kqdot_i(double value);

  // optional double kqdot_d = 25;
  inline bool has_kqdot_d() const;
  inline void clear_kqdot_d();
  static const int kKqdotDFieldNumber = 25;
  inline double kqdot_d() const;
  inline void set_kqdot_d(double value);

  // optional double kqdot_i_limit = 26;
  inline bool has_kqdot_i_limit() const;
  inline void clear_kqdot_i_limit();
  static const int kKqdotILimitFieldNumber = 26;
  inline double kqdot_i_limit() const;
  inline void set_kqdot_i_limit(double value);

  // optional double kqdot_i_range = 27;
  inline bool has_kqdot_i_range() const;
  inline void clear_kqdot_i_range();
  static const int kKqdotIRangeFieldNumber = 27;
  inline double kqdot_i_range() const;
  inline void set_kqdot_i_range(double value);

  // @@protoc_insertion_point(class_scope:M3JointParam)
 private:
  inline void set_has_kq_p();
  inline void clear_has_kq_p();
  inline void set_has_kq_i();
  inline void clear_has_kq_i();
  inline void set_has_kq_d();
  inline void clear_has_kq_d();
  inline void set_has_kq_i_limit();
  inline void clear_has_kq_i_limit();
  inline void set_has_max_q();
  inline void clear_has_max_q();
  inline void set_has_min_q();
  inline void clear_has_min_q();
  inline void set_has_kt_p();
  inline void clear_has_kt_p();
  inline void set_has_kt_i();
  inline void clear_has_kt_i();
  inline void set_has_kt_d();
  inline void clear_has_kt_d();
  inline void set_has_kt_i_limit();
  inline void clear_has_kt_i_limit();
  inline void set_has_kq_g();
  inline void clear_has_kq_g();
  inline void set_has_max_q_slew_rate();
  inline void clear_has_max_q_slew_rate();
  inline void set_has_kq_i_range();
  inline void clear_has_kq_i_range();
  inline void set_has_kt_i_range();
  inline void clear_has_kt_i_range();
  inline void set_has_max_q_pad();
  inline void clear_has_max_q_pad();
  inline void set_has_min_q_pad();
  inline void clear_has_min_q_pad();
  inline void set_has_kq_d_pose();
  inline void clear_has_kq_d_pose();
  inline void set_has_kq_p_tq_gm();
  inline void clear_has_kq_p_tq_gm();
  inline void set_has_kq_i_tq_gm();
  inline void clear_has_kq_i_tq_gm();
  inline void set_has_kq_d_tq_gm();
  inline void clear_has_kq_d_tq_gm();
  inline void set_has_kq_i_limit_tq_gm();
  inline void clear_has_kq_i_limit_tq_gm();
  inline void set_has_kq_i_range_tq_gm();
  inline void clear_has_kq_i_range_tq_gm();
  inline void set_has_kqdot_p();
  inline void clear_has_kqdot_p();
  inline void set_has_kqdot_i();
  inline void clear_has_kqdot_i();
  inline void set_has_kqdot_d();
  inline void clear_has_kqdot_d();
  inline void set_has_kqdot_i_limit();
  inline void clear_has_kqdot_i_limit();
  inline void set_has_kqdot_i_range();
  inline void clear_has_kqdot_i_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double kq_p_;
  double kq_i_;
  double kq_d_;
  double kq_i_limit_;
  double max_q_;
  double min_q_;
  double kt_p_;
  double kt_i_;
  double kt_d_;
  double kt_i_limit_;
  double kq_g_;
  double max_q_slew_rate_;
  double kq_i_range_;
  double kt_i_range_;
  double max_q_pad_;
  double min_q_pad_;
  double kq_d_pose_;
  double kq_p_tq_gm_;
  double kq_i_tq_gm_;
  double kq_d_tq_gm_;
  double kq_i_limit_tq_gm_;
  double kq_i_range_tq_gm_;
  double kqdot_p_;
  double kqdot_i_;
  double kqdot_d_;
  double kqdot_i_limit_;
  double kqdot_i_range_;
  friend void  protobuf_AddDesc_joint_2eproto();
  friend void protobuf_AssignDesc_joint_2eproto();
  friend void protobuf_ShutdownFile_joint_2eproto();

  void InitAsDefaultInstance();
  static M3JointParam* default_instance_;
};
// -------------------------------------------------------------------

class M3JointCommand : public ::google::protobuf::Message {
 public:
  M3JointCommand();
  virtual ~M3JointCommand();

  M3JointCommand(const M3JointCommand& from);

  inline M3JointCommand& operator=(const M3JointCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3JointCommand& default_instance();

  void Swap(M3JointCommand* other);

  // implements Message ----------------------------------------------

  M3JointCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3JointCommand& from);
  void MergeFrom(const M3JointCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double tq_desired = 1;
  inline bool has_tq_desired() const;
  inline void clear_tq_desired();
  static const int kTqDesiredFieldNumber = 1;
  inline double tq_desired() const;
  inline void set_tq_desired(double value);

  // optional double q_desired = 2;
  inline bool has_q_desired() const;
  inline void clear_q_desired();
  static const int kQDesiredFieldNumber = 2;
  inline double q_desired() const;
  inline void set_q_desired(double value);

  // optional int32 pwm_desired = 3;
  inline bool has_pwm_desired() const;
  inline void clear_pwm_desired();
  static const int kPwmDesiredFieldNumber = 3;
  inline ::google::protobuf::int32 pwm_desired() const;
  inline void set_pwm_desired(::google::protobuf::int32 value);

  // optional double q_stiffness = 4;
  inline bool has_q_stiffness() const;
  inline void clear_q_stiffness();
  static const int kQStiffnessFieldNumber = 4;
  inline double q_stiffness() const;
  inline void set_q_stiffness(double value);

  // optional .JOINT_MODE ctrl_mode = 5;
  inline bool has_ctrl_mode() const;
  inline void clear_ctrl_mode();
  static const int kCtrlModeFieldNumber = 5;
  inline ::JOINT_MODE ctrl_mode() const;
  inline void set_ctrl_mode(::JOINT_MODE value);

  // optional double qdot_desired = 6;
  inline bool has_qdot_desired() const;
  inline void clear_qdot_desired();
  static const int kQdotDesiredFieldNumber = 6;
  inline double qdot_desired() const;
  inline void set_qdot_desired(double value);

  // optional double q_slew_rate = 7;
  inline bool has_q_slew_rate() const;
  inline void clear_q_slew_rate();
  static const int kQSlewRateFieldNumber = 7;
  inline double q_slew_rate() const;
  inline void set_q_slew_rate(double value);

  // optional bool brake_off = 8;
  inline bool has_brake_off() const;
  inline void clear_brake_off();
  static const int kBrakeOffFieldNumber = 8;
  inline bool brake_off() const;
  inline void set_brake_off(bool value);

  // optional .SMOOTHING_MODE smoothing_mode = 9;
  inline bool has_smoothing_mode() const;
  inline void clear_smoothing_mode();
  static const int kSmoothingModeFieldNumber = 9;
  inline ::SMOOTHING_MODE smoothing_mode() const;
  inline void set_smoothing_mode(::SMOOTHING_MODE value);

  // @@protoc_insertion_point(class_scope:M3JointCommand)
 private:
  inline void set_has_tq_desired();
  inline void clear_has_tq_desired();
  inline void set_has_q_desired();
  inline void clear_has_q_desired();
  inline void set_has_pwm_desired();
  inline void clear_has_pwm_desired();
  inline void set_has_q_stiffness();
  inline void clear_has_q_stiffness();
  inline void set_has_ctrl_mode();
  inline void clear_has_ctrl_mode();
  inline void set_has_qdot_desired();
  inline void clear_has_qdot_desired();
  inline void set_has_q_slew_rate();
  inline void clear_has_q_slew_rate();
  inline void set_has_brake_off();
  inline void clear_has_brake_off();
  inline void set_has_smoothing_mode();
  inline void clear_has_smoothing_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double tq_desired_;
  double q_desired_;
  double q_stiffness_;
  ::google::protobuf::int32 pwm_desired_;
  int ctrl_mode_;
  double qdot_desired_;
  double q_slew_rate_;
  bool brake_off_;
  int smoothing_mode_;
  friend void  protobuf_AddDesc_joint_2eproto();
  friend void protobuf_AssignDesc_joint_2eproto();
  friend void protobuf_ShutdownFile_joint_2eproto();

  void InitAsDefaultInstance();
  static M3JointCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// M3JointStatus

// optional .M3BaseStatus base = 1;
inline bool M3JointStatus::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3JointStatus::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3JointStatus::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3JointStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  clear_has_base();
}
inline const ::M3BaseStatus& M3JointStatus::base() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3JointStatus::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  // @@protoc_insertion_point(field_mutable:M3JointStatus.base)
  return base_;
}
inline ::M3BaseStatus* M3JointStatus::release_base() {
  clear_has_base();
  ::M3BaseStatus* temp = base_;
  base_ = NULL;
  return temp;
}
inline void M3JointStatus::set_allocated_base(::M3BaseStatus* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:M3JointStatus.base)
}

// optional double motor_temp = 2;
inline bool M3JointStatus::has_motor_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3JointStatus::set_has_motor_temp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3JointStatus::clear_has_motor_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3JointStatus::clear_motor_temp() {
  motor_temp_ = 0;
  clear_has_motor_temp();
}
inline double M3JointStatus::motor_temp() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.motor_temp)
  return motor_temp_;
}
inline void M3JointStatus::set_motor_temp(double value) {
  set_has_motor_temp();
  motor_temp_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.motor_temp)
}

// optional double amp_temp = 3;
inline bool M3JointStatus::has_amp_temp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3JointStatus::set_has_amp_temp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3JointStatus::clear_has_amp_temp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3JointStatus::clear_amp_temp() {
  amp_temp_ = 0;
  clear_has_amp_temp();
}
inline double M3JointStatus::amp_temp() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.amp_temp)
  return amp_temp_;
}
inline void M3JointStatus::set_amp_temp(double value) {
  set_has_amp_temp();
  amp_temp_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.amp_temp)
}

// optional double current = 4;
inline bool M3JointStatus::has_current() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3JointStatus::set_has_current() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3JointStatus::clear_has_current() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3JointStatus::clear_current() {
  current_ = 0;
  clear_has_current();
}
inline double M3JointStatus::current() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.current)
  return current_;
}
inline void M3JointStatus::set_current(double value) {
  set_has_current();
  current_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.current)
}

// optional double torque = 6;
inline bool M3JointStatus::has_torque() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3JointStatus::set_has_torque() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3JointStatus::clear_has_torque() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3JointStatus::clear_torque() {
  torque_ = 0;
  clear_has_torque();
}
inline double M3JointStatus::torque() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.torque)
  return torque_;
}
inline void M3JointStatus::set_torque(double value) {
  set_has_torque();
  torque_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.torque)
}

// optional double torquedot = 7;
inline bool M3JointStatus::has_torquedot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void M3JointStatus::set_has_torquedot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void M3JointStatus::clear_has_torquedot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void M3JointStatus::clear_torquedot() {
  torquedot_ = 0;
  clear_has_torquedot();
}
inline double M3JointStatus::torquedot() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.torquedot)
  return torquedot_;
}
inline void M3JointStatus::set_torquedot(double value) {
  set_has_torquedot();
  torquedot_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.torquedot)
}

// optional double theta = 8;
inline bool M3JointStatus::has_theta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void M3JointStatus::set_has_theta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void M3JointStatus::clear_has_theta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void M3JointStatus::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double M3JointStatus::theta() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.theta)
  return theta_;
}
inline void M3JointStatus::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.theta)
}

// optional double thetadot = 9;
inline bool M3JointStatus::has_thetadot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void M3JointStatus::set_has_thetadot() {
  _has_bits_[0] |= 0x00000080u;
}
inline void M3JointStatus::clear_has_thetadot() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void M3JointStatus::clear_thetadot() {
  thetadot_ = 0;
  clear_has_thetadot();
}
inline double M3JointStatus::thetadot() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.thetadot)
  return thetadot_;
}
inline void M3JointStatus::set_thetadot(double value) {
  set_has_thetadot();
  thetadot_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.thetadot)
}

// optional double thetadotdot = 10;
inline bool M3JointStatus::has_thetadotdot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void M3JointStatus::set_has_thetadotdot() {
  _has_bits_[0] |= 0x00000100u;
}
inline void M3JointStatus::clear_has_thetadotdot() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void M3JointStatus::clear_thetadotdot() {
  thetadotdot_ = 0;
  clear_has_thetadotdot();
}
inline double M3JointStatus::thetadotdot() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.thetadotdot)
  return thetadotdot_;
}
inline void M3JointStatus::set_thetadotdot(double value) {
  set_has_thetadotdot();
  thetadotdot_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.thetadotdot)
}

// optional double torque_gravity = 11;
inline bool M3JointStatus::has_torque_gravity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void M3JointStatus::set_has_torque_gravity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void M3JointStatus::clear_has_torque_gravity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void M3JointStatus::clear_torque_gravity() {
  torque_gravity_ = 0;
  clear_has_torque_gravity();
}
inline double M3JointStatus::torque_gravity() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.torque_gravity)
  return torque_gravity_;
}
inline void M3JointStatus::set_torque_gravity(double value) {
  set_has_torque_gravity();
  torque_gravity_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.torque_gravity)
}

// optional int32 pwm_cmd = 12;
inline bool M3JointStatus::has_pwm_cmd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void M3JointStatus::set_has_pwm_cmd() {
  _has_bits_[0] |= 0x00000400u;
}
inline void M3JointStatus::clear_has_pwm_cmd() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void M3JointStatus::clear_pwm_cmd() {
  pwm_cmd_ = 0;
  clear_has_pwm_cmd();
}
inline ::google::protobuf::int32 M3JointStatus::pwm_cmd() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.pwm_cmd)
  return pwm_cmd_;
}
inline void M3JointStatus::set_pwm_cmd(::google::protobuf::int32 value) {
  set_has_pwm_cmd();
  pwm_cmd_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.pwm_cmd)
}

// optional double ambient_temp = 13;
inline bool M3JointStatus::has_ambient_temp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void M3JointStatus::set_has_ambient_temp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void M3JointStatus::clear_has_ambient_temp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void M3JointStatus::clear_ambient_temp() {
  ambient_temp_ = 0;
  clear_has_ambient_temp();
}
inline double M3JointStatus::ambient_temp() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.ambient_temp)
  return ambient_temp_;
}
inline void M3JointStatus::set_ambient_temp(double value) {
  set_has_ambient_temp();
  ambient_temp_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.ambient_temp)
}

// optional double case_temp = 14;
inline bool M3JointStatus::has_case_temp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void M3JointStatus::set_has_case_temp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void M3JointStatus::clear_has_case_temp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void M3JointStatus::clear_case_temp() {
  case_temp_ = 0;
  clear_has_case_temp();
}
inline double M3JointStatus::case_temp() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.case_temp)
  return case_temp_;
}
inline void M3JointStatus::set_case_temp(double value) {
  set_has_case_temp();
  case_temp_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.case_temp)
}

// optional double power = 15;
inline bool M3JointStatus::has_power() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void M3JointStatus::set_has_power() {
  _has_bits_[0] |= 0x00002000u;
}
inline void M3JointStatus::clear_has_power() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void M3JointStatus::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline double M3JointStatus::power() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.power)
  return power_;
}
inline void M3JointStatus::set_power(double value) {
  set_has_power();
  power_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.power)
}

// optional int32 flags = 16;
inline bool M3JointStatus::has_flags() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void M3JointStatus::set_has_flags() {
  _has_bits_[0] |= 0x00004000u;
}
inline void M3JointStatus::clear_has_flags() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void M3JointStatus::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 M3JointStatus::flags() const {
  // @@protoc_insertion_point(field_get:M3JointStatus.flags)
  return flags_;
}
inline void M3JointStatus::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:M3JointStatus.flags)
}

// -------------------------------------------------------------------

// M3JointParam

// optional double kq_p = 1;
inline bool M3JointParam::has_kq_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3JointParam::set_has_kq_p() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3JointParam::clear_has_kq_p() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3JointParam::clear_kq_p() {
  kq_p_ = 0;
  clear_has_kq_p();
}
inline double M3JointParam::kq_p() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_p)
  return kq_p_;
}
inline void M3JointParam::set_kq_p(double value) {
  set_has_kq_p();
  kq_p_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_p)
}

// optional double kq_i = 2;
inline bool M3JointParam::has_kq_i() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3JointParam::set_has_kq_i() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3JointParam::clear_has_kq_i() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3JointParam::clear_kq_i() {
  kq_i_ = 0;
  clear_has_kq_i();
}
inline double M3JointParam::kq_i() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_i)
  return kq_i_;
}
inline void M3JointParam::set_kq_i(double value) {
  set_has_kq_i();
  kq_i_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_i)
}

// optional double kq_d = 3;
inline bool M3JointParam::has_kq_d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3JointParam::set_has_kq_d() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3JointParam::clear_has_kq_d() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3JointParam::clear_kq_d() {
  kq_d_ = 0;
  clear_has_kq_d();
}
inline double M3JointParam::kq_d() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_d)
  return kq_d_;
}
inline void M3JointParam::set_kq_d(double value) {
  set_has_kq_d();
  kq_d_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_d)
}

// optional double kq_i_limit = 4;
inline bool M3JointParam::has_kq_i_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3JointParam::set_has_kq_i_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3JointParam::clear_has_kq_i_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3JointParam::clear_kq_i_limit() {
  kq_i_limit_ = 0;
  clear_has_kq_i_limit();
}
inline double M3JointParam::kq_i_limit() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_i_limit)
  return kq_i_limit_;
}
inline void M3JointParam::set_kq_i_limit(double value) {
  set_has_kq_i_limit();
  kq_i_limit_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_i_limit)
}

// optional double max_q = 5;
inline bool M3JointParam::has_max_q() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3JointParam::set_has_max_q() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3JointParam::clear_has_max_q() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3JointParam::clear_max_q() {
  max_q_ = 0;
  clear_has_max_q();
}
inline double M3JointParam::max_q() const {
  // @@protoc_insertion_point(field_get:M3JointParam.max_q)
  return max_q_;
}
inline void M3JointParam::set_max_q(double value) {
  set_has_max_q();
  max_q_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.max_q)
}

// optional double min_q = 6;
inline bool M3JointParam::has_min_q() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void M3JointParam::set_has_min_q() {
  _has_bits_[0] |= 0x00000020u;
}
inline void M3JointParam::clear_has_min_q() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void M3JointParam::clear_min_q() {
  min_q_ = 0;
  clear_has_min_q();
}
inline double M3JointParam::min_q() const {
  // @@protoc_insertion_point(field_get:M3JointParam.min_q)
  return min_q_;
}
inline void M3JointParam::set_min_q(double value) {
  set_has_min_q();
  min_q_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.min_q)
}

// optional double kt_p = 7;
inline bool M3JointParam::has_kt_p() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void M3JointParam::set_has_kt_p() {
  _has_bits_[0] |= 0x00000040u;
}
inline void M3JointParam::clear_has_kt_p() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void M3JointParam::clear_kt_p() {
  kt_p_ = 0;
  clear_has_kt_p();
}
inline double M3JointParam::kt_p() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kt_p)
  return kt_p_;
}
inline void M3JointParam::set_kt_p(double value) {
  set_has_kt_p();
  kt_p_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kt_p)
}

// optional double kt_i = 8;
inline bool M3JointParam::has_kt_i() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void M3JointParam::set_has_kt_i() {
  _has_bits_[0] |= 0x00000080u;
}
inline void M3JointParam::clear_has_kt_i() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void M3JointParam::clear_kt_i() {
  kt_i_ = 0;
  clear_has_kt_i();
}
inline double M3JointParam::kt_i() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kt_i)
  return kt_i_;
}
inline void M3JointParam::set_kt_i(double value) {
  set_has_kt_i();
  kt_i_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kt_i)
}

// optional double kt_d = 9;
inline bool M3JointParam::has_kt_d() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void M3JointParam::set_has_kt_d() {
  _has_bits_[0] |= 0x00000100u;
}
inline void M3JointParam::clear_has_kt_d() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void M3JointParam::clear_kt_d() {
  kt_d_ = 0;
  clear_has_kt_d();
}
inline double M3JointParam::kt_d() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kt_d)
  return kt_d_;
}
inline void M3JointParam::set_kt_d(double value) {
  set_has_kt_d();
  kt_d_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kt_d)
}

// optional double kt_i_limit = 10;
inline bool M3JointParam::has_kt_i_limit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void M3JointParam::set_has_kt_i_limit() {
  _has_bits_[0] |= 0x00000200u;
}
inline void M3JointParam::clear_has_kt_i_limit() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void M3JointParam::clear_kt_i_limit() {
  kt_i_limit_ = 0;
  clear_has_kt_i_limit();
}
inline double M3JointParam::kt_i_limit() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kt_i_limit)
  return kt_i_limit_;
}
inline void M3JointParam::set_kt_i_limit(double value) {
  set_has_kt_i_limit();
  kt_i_limit_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kt_i_limit)
}

// optional double kq_g = 11;
inline bool M3JointParam::has_kq_g() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void M3JointParam::set_has_kq_g() {
  _has_bits_[0] |= 0x00000400u;
}
inline void M3JointParam::clear_has_kq_g() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void M3JointParam::clear_kq_g() {
  kq_g_ = 0;
  clear_has_kq_g();
}
inline double M3JointParam::kq_g() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_g)
  return kq_g_;
}
inline void M3JointParam::set_kq_g(double value) {
  set_has_kq_g();
  kq_g_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_g)
}

// optional double max_q_slew_rate = 12;
inline bool M3JointParam::has_max_q_slew_rate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void M3JointParam::set_has_max_q_slew_rate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void M3JointParam::clear_has_max_q_slew_rate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void M3JointParam::clear_max_q_slew_rate() {
  max_q_slew_rate_ = 0;
  clear_has_max_q_slew_rate();
}
inline double M3JointParam::max_q_slew_rate() const {
  // @@protoc_insertion_point(field_get:M3JointParam.max_q_slew_rate)
  return max_q_slew_rate_;
}
inline void M3JointParam::set_max_q_slew_rate(double value) {
  set_has_max_q_slew_rate();
  max_q_slew_rate_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.max_q_slew_rate)
}

// optional double kq_i_range = 13;
inline bool M3JointParam::has_kq_i_range() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void M3JointParam::set_has_kq_i_range() {
  _has_bits_[0] |= 0x00001000u;
}
inline void M3JointParam::clear_has_kq_i_range() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void M3JointParam::clear_kq_i_range() {
  kq_i_range_ = 0;
  clear_has_kq_i_range();
}
inline double M3JointParam::kq_i_range() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_i_range)
  return kq_i_range_;
}
inline void M3JointParam::set_kq_i_range(double value) {
  set_has_kq_i_range();
  kq_i_range_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_i_range)
}

// optional double kt_i_range = 14;
inline bool M3JointParam::has_kt_i_range() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void M3JointParam::set_has_kt_i_range() {
  _has_bits_[0] |= 0x00002000u;
}
inline void M3JointParam::clear_has_kt_i_range() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void M3JointParam::clear_kt_i_range() {
  kt_i_range_ = 0;
  clear_has_kt_i_range();
}
inline double M3JointParam::kt_i_range() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kt_i_range)
  return kt_i_range_;
}
inline void M3JointParam::set_kt_i_range(double value) {
  set_has_kt_i_range();
  kt_i_range_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kt_i_range)
}

// optional double max_q_pad = 15;
inline bool M3JointParam::has_max_q_pad() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void M3JointParam::set_has_max_q_pad() {
  _has_bits_[0] |= 0x00004000u;
}
inline void M3JointParam::clear_has_max_q_pad() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void M3JointParam::clear_max_q_pad() {
  max_q_pad_ = 0;
  clear_has_max_q_pad();
}
inline double M3JointParam::max_q_pad() const {
  // @@protoc_insertion_point(field_get:M3JointParam.max_q_pad)
  return max_q_pad_;
}
inline void M3JointParam::set_max_q_pad(double value) {
  set_has_max_q_pad();
  max_q_pad_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.max_q_pad)
}

// optional double min_q_pad = 16;
inline bool M3JointParam::has_min_q_pad() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void M3JointParam::set_has_min_q_pad() {
  _has_bits_[0] |= 0x00008000u;
}
inline void M3JointParam::clear_has_min_q_pad() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void M3JointParam::clear_min_q_pad() {
  min_q_pad_ = 0;
  clear_has_min_q_pad();
}
inline double M3JointParam::min_q_pad() const {
  // @@protoc_insertion_point(field_get:M3JointParam.min_q_pad)
  return min_q_pad_;
}
inline void M3JointParam::set_min_q_pad(double value) {
  set_has_min_q_pad();
  min_q_pad_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.min_q_pad)
}

// optional double kq_d_pose = 17;
inline bool M3JointParam::has_kq_d_pose() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void M3JointParam::set_has_kq_d_pose() {
  _has_bits_[0] |= 0x00010000u;
}
inline void M3JointParam::clear_has_kq_d_pose() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void M3JointParam::clear_kq_d_pose() {
  kq_d_pose_ = 0;
  clear_has_kq_d_pose();
}
inline double M3JointParam::kq_d_pose() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_d_pose)
  return kq_d_pose_;
}
inline void M3JointParam::set_kq_d_pose(double value) {
  set_has_kq_d_pose();
  kq_d_pose_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_d_pose)
}

// optional double kq_p_tq_gm = 18;
inline bool M3JointParam::has_kq_p_tq_gm() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void M3JointParam::set_has_kq_p_tq_gm() {
  _has_bits_[0] |= 0x00020000u;
}
inline void M3JointParam::clear_has_kq_p_tq_gm() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void M3JointParam::clear_kq_p_tq_gm() {
  kq_p_tq_gm_ = 0;
  clear_has_kq_p_tq_gm();
}
inline double M3JointParam::kq_p_tq_gm() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_p_tq_gm)
  return kq_p_tq_gm_;
}
inline void M3JointParam::set_kq_p_tq_gm(double value) {
  set_has_kq_p_tq_gm();
  kq_p_tq_gm_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_p_tq_gm)
}

// optional double kq_i_tq_gm = 19;
inline bool M3JointParam::has_kq_i_tq_gm() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void M3JointParam::set_has_kq_i_tq_gm() {
  _has_bits_[0] |= 0x00040000u;
}
inline void M3JointParam::clear_has_kq_i_tq_gm() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void M3JointParam::clear_kq_i_tq_gm() {
  kq_i_tq_gm_ = 0;
  clear_has_kq_i_tq_gm();
}
inline double M3JointParam::kq_i_tq_gm() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_i_tq_gm)
  return kq_i_tq_gm_;
}
inline void M3JointParam::set_kq_i_tq_gm(double value) {
  set_has_kq_i_tq_gm();
  kq_i_tq_gm_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_i_tq_gm)
}

// optional double kq_d_tq_gm = 20;
inline bool M3JointParam::has_kq_d_tq_gm() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void M3JointParam::set_has_kq_d_tq_gm() {
  _has_bits_[0] |= 0x00080000u;
}
inline void M3JointParam::clear_has_kq_d_tq_gm() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void M3JointParam::clear_kq_d_tq_gm() {
  kq_d_tq_gm_ = 0;
  clear_has_kq_d_tq_gm();
}
inline double M3JointParam::kq_d_tq_gm() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_d_tq_gm)
  return kq_d_tq_gm_;
}
inline void M3JointParam::set_kq_d_tq_gm(double value) {
  set_has_kq_d_tq_gm();
  kq_d_tq_gm_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_d_tq_gm)
}

// optional double kq_i_limit_tq_gm = 21;
inline bool M3JointParam::has_kq_i_limit_tq_gm() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void M3JointParam::set_has_kq_i_limit_tq_gm() {
  _has_bits_[0] |= 0x00100000u;
}
inline void M3JointParam::clear_has_kq_i_limit_tq_gm() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void M3JointParam::clear_kq_i_limit_tq_gm() {
  kq_i_limit_tq_gm_ = 0;
  clear_has_kq_i_limit_tq_gm();
}
inline double M3JointParam::kq_i_limit_tq_gm() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_i_limit_tq_gm)
  return kq_i_limit_tq_gm_;
}
inline void M3JointParam::set_kq_i_limit_tq_gm(double value) {
  set_has_kq_i_limit_tq_gm();
  kq_i_limit_tq_gm_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_i_limit_tq_gm)
}

// optional double kq_i_range_tq_gm = 22;
inline bool M3JointParam::has_kq_i_range_tq_gm() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void M3JointParam::set_has_kq_i_range_tq_gm() {
  _has_bits_[0] |= 0x00200000u;
}
inline void M3JointParam::clear_has_kq_i_range_tq_gm() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void M3JointParam::clear_kq_i_range_tq_gm() {
  kq_i_range_tq_gm_ = 0;
  clear_has_kq_i_range_tq_gm();
}
inline double M3JointParam::kq_i_range_tq_gm() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kq_i_range_tq_gm)
  return kq_i_range_tq_gm_;
}
inline void M3JointParam::set_kq_i_range_tq_gm(double value) {
  set_has_kq_i_range_tq_gm();
  kq_i_range_tq_gm_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kq_i_range_tq_gm)
}

// optional double kqdot_p = 23;
inline bool M3JointParam::has_kqdot_p() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void M3JointParam::set_has_kqdot_p() {
  _has_bits_[0] |= 0x00400000u;
}
inline void M3JointParam::clear_has_kqdot_p() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void M3JointParam::clear_kqdot_p() {
  kqdot_p_ = 0;
  clear_has_kqdot_p();
}
inline double M3JointParam::kqdot_p() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kqdot_p)
  return kqdot_p_;
}
inline void M3JointParam::set_kqdot_p(double value) {
  set_has_kqdot_p();
  kqdot_p_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kqdot_p)
}

// optional double kqdot_i = 24;
inline bool M3JointParam::has_kqdot_i() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void M3JointParam::set_has_kqdot_i() {
  _has_bits_[0] |= 0x00800000u;
}
inline void M3JointParam::clear_has_kqdot_i() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void M3JointParam::clear_kqdot_i() {
  kqdot_i_ = 0;
  clear_has_kqdot_i();
}
inline double M3JointParam::kqdot_i() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kqdot_i)
  return kqdot_i_;
}
inline void M3JointParam::set_kqdot_i(double value) {
  set_has_kqdot_i();
  kqdot_i_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kqdot_i)
}

// optional double kqdot_d = 25;
inline bool M3JointParam::has_kqdot_d() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void M3JointParam::set_has_kqdot_d() {
  _has_bits_[0] |= 0x01000000u;
}
inline void M3JointParam::clear_has_kqdot_d() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void M3JointParam::clear_kqdot_d() {
  kqdot_d_ = 0;
  clear_has_kqdot_d();
}
inline double M3JointParam::kqdot_d() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kqdot_d)
  return kqdot_d_;
}
inline void M3JointParam::set_kqdot_d(double value) {
  set_has_kqdot_d();
  kqdot_d_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kqdot_d)
}

// optional double kqdot_i_limit = 26;
inline bool M3JointParam::has_kqdot_i_limit() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void M3JointParam::set_has_kqdot_i_limit() {
  _has_bits_[0] |= 0x02000000u;
}
inline void M3JointParam::clear_has_kqdot_i_limit() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void M3JointParam::clear_kqdot_i_limit() {
  kqdot_i_limit_ = 0;
  clear_has_kqdot_i_limit();
}
inline double M3JointParam::kqdot_i_limit() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kqdot_i_limit)
  return kqdot_i_limit_;
}
inline void M3JointParam::set_kqdot_i_limit(double value) {
  set_has_kqdot_i_limit();
  kqdot_i_limit_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kqdot_i_limit)
}

// optional double kqdot_i_range = 27;
inline bool M3JointParam::has_kqdot_i_range() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void M3JointParam::set_has_kqdot_i_range() {
  _has_bits_[0] |= 0x04000000u;
}
inline void M3JointParam::clear_has_kqdot_i_range() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void M3JointParam::clear_kqdot_i_range() {
  kqdot_i_range_ = 0;
  clear_has_kqdot_i_range();
}
inline double M3JointParam::kqdot_i_range() const {
  // @@protoc_insertion_point(field_get:M3JointParam.kqdot_i_range)
  return kqdot_i_range_;
}
inline void M3JointParam::set_kqdot_i_range(double value) {
  set_has_kqdot_i_range();
  kqdot_i_range_ = value;
  // @@protoc_insertion_point(field_set:M3JointParam.kqdot_i_range)
}

// -------------------------------------------------------------------

// M3JointCommand

// optional double tq_desired = 1;
inline bool M3JointCommand::has_tq_desired() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3JointCommand::set_has_tq_desired() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3JointCommand::clear_has_tq_desired() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3JointCommand::clear_tq_desired() {
  tq_desired_ = 0;
  clear_has_tq_desired();
}
inline double M3JointCommand::tq_desired() const {
  // @@protoc_insertion_point(field_get:M3JointCommand.tq_desired)
  return tq_desired_;
}
inline void M3JointCommand::set_tq_desired(double value) {
  set_has_tq_desired();
  tq_desired_ = value;
  // @@protoc_insertion_point(field_set:M3JointCommand.tq_desired)
}

// optional double q_desired = 2;
inline bool M3JointCommand::has_q_desired() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3JointCommand::set_has_q_desired() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3JointCommand::clear_has_q_desired() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3JointCommand::clear_q_desired() {
  q_desired_ = 0;
  clear_has_q_desired();
}
inline double M3JointCommand::q_desired() const {
  // @@protoc_insertion_point(field_get:M3JointCommand.q_desired)
  return q_desired_;
}
inline void M3JointCommand::set_q_desired(double value) {
  set_has_q_desired();
  q_desired_ = value;
  // @@protoc_insertion_point(field_set:M3JointCommand.q_desired)
}

// optional int32 pwm_desired = 3;
inline bool M3JointCommand::has_pwm_desired() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3JointCommand::set_has_pwm_desired() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3JointCommand::clear_has_pwm_desired() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3JointCommand::clear_pwm_desired() {
  pwm_desired_ = 0;
  clear_has_pwm_desired();
}
inline ::google::protobuf::int32 M3JointCommand::pwm_desired() const {
  // @@protoc_insertion_point(field_get:M3JointCommand.pwm_desired)
  return pwm_desired_;
}
inline void M3JointCommand::set_pwm_desired(::google::protobuf::int32 value) {
  set_has_pwm_desired();
  pwm_desired_ = value;
  // @@protoc_insertion_point(field_set:M3JointCommand.pwm_desired)
}

// optional double q_stiffness = 4;
inline bool M3JointCommand::has_q_stiffness() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3JointCommand::set_has_q_stiffness() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3JointCommand::clear_has_q_stiffness() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3JointCommand::clear_q_stiffness() {
  q_stiffness_ = 0;
  clear_has_q_stiffness();
}
inline double M3JointCommand::q_stiffness() const {
  // @@protoc_insertion_point(field_get:M3JointCommand.q_stiffness)
  return q_stiffness_;
}
inline void M3JointCommand::set_q_stiffness(double value) {
  set_has_q_stiffness();
  q_stiffness_ = value;
  // @@protoc_insertion_point(field_set:M3JointCommand.q_stiffness)
}

// optional .JOINT_MODE ctrl_mode = 5;
inline bool M3JointCommand::has_ctrl_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3JointCommand::set_has_ctrl_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3JointCommand::clear_has_ctrl_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3JointCommand::clear_ctrl_mode() {
  ctrl_mode_ = 0;
  clear_has_ctrl_mode();
}
inline ::JOINT_MODE M3JointCommand::ctrl_mode() const {
  // @@protoc_insertion_point(field_get:M3JointCommand.ctrl_mode)
  return static_cast< ::JOINT_MODE >(ctrl_mode_);
}
inline void M3JointCommand::set_ctrl_mode(::JOINT_MODE value) {
  assert(::JOINT_MODE_IsValid(value));
  set_has_ctrl_mode();
  ctrl_mode_ = value;
  // @@protoc_insertion_point(field_set:M3JointCommand.ctrl_mode)
}

// optional double qdot_desired = 6;
inline bool M3JointCommand::has_qdot_desired() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void M3JointCommand::set_has_qdot_desired() {
  _has_bits_[0] |= 0x00000020u;
}
inline void M3JointCommand::clear_has_qdot_desired() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void M3JointCommand::clear_qdot_desired() {
  qdot_desired_ = 0;
  clear_has_qdot_desired();
}
inline double M3JointCommand::qdot_desired() const {
  // @@protoc_insertion_point(field_get:M3JointCommand.qdot_desired)
  return qdot_desired_;
}
inline void M3JointCommand::set_qdot_desired(double value) {
  set_has_qdot_desired();
  qdot_desired_ = value;
  // @@protoc_insertion_point(field_set:M3JointCommand.qdot_desired)
}

// optional double q_slew_rate = 7;
inline bool M3JointCommand::has_q_slew_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void M3JointCommand::set_has_q_slew_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void M3JointCommand::clear_has_q_slew_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void M3JointCommand::clear_q_slew_rate() {
  q_slew_rate_ = 0;
  clear_has_q_slew_rate();
}
inline double M3JointCommand::q_slew_rate() const {
  // @@protoc_insertion_point(field_get:M3JointCommand.q_slew_rate)
  return q_slew_rate_;
}
inline void M3JointCommand::set_q_slew_rate(double value) {
  set_has_q_slew_rate();
  q_slew_rate_ = value;
  // @@protoc_insertion_point(field_set:M3JointCommand.q_slew_rate)
}

// optional bool brake_off = 8;
inline bool M3JointCommand::has_brake_off() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void M3JointCommand::set_has_brake_off() {
  _has_bits_[0] |= 0x00000080u;
}
inline void M3JointCommand::clear_has_brake_off() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void M3JointCommand::clear_brake_off() {
  brake_off_ = false;
  clear_has_brake_off();
}
inline bool M3JointCommand::brake_off() const {
  // @@protoc_insertion_point(field_get:M3JointCommand.brake_off)
  return brake_off_;
}
inline void M3JointCommand::set_brake_off(bool value) {
  set_has_brake_off();
  brake_off_ = value;
  // @@protoc_insertion_point(field_set:M3JointCommand.brake_off)
}

// optional .SMOOTHING_MODE smoothing_mode = 9;
inline bool M3JointCommand::has_smoothing_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void M3JointCommand::set_has_smoothing_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void M3JointCommand::clear_has_smoothing_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void M3JointCommand::clear_smoothing_mode() {
  smoothing_mode_ = 0;
  clear_has_smoothing_mode();
}
inline ::SMOOTHING_MODE M3JointCommand::smoothing_mode() const {
  // @@protoc_insertion_point(field_get:M3JointCommand.smoothing_mode)
  return static_cast< ::SMOOTHING_MODE >(smoothing_mode_);
}
inline void M3JointCommand::set_smoothing_mode(::SMOOTHING_MODE value) {
  assert(::SMOOTHING_MODE_IsValid(value));
  set_has_smoothing_mode();
  smoothing_mode_ = value;
  // @@protoc_insertion_point(field_set:M3JointCommand.smoothing_mode)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::JOINT_MODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JOINT_MODE>() {
  return ::JOINT_MODE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_joint_2eproto__INCLUDED
