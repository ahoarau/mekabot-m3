// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: omnibase.proto

#ifndef PROTOBUF_omnibase_2eproto__INCLUDED
#define PROTOBUF_omnibase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "component_base.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_omnibase_2eproto();
void protobuf_AssignDesc_omnibase_2eproto();
void protobuf_ShutdownFile_omnibase_2eproto();

class M3OmnibaseStatus;
class M3OmnibaseParam;
class M3OmnibaseCommand;
class M3OmniVia;

enum OMNIBASE_CTRL_MODE {
  OMNIBASE_CTRL_OFF = 0,
  OMNIBASE_CTRL_CALIBRATE = 1,
  OMNIBASE_CTRL_CASTER = 2,
  OMNIBASE_CTRL_OPSPACE_FORCE = 3,
  OMNIBASE_CTRL_OPSPACE_TRAJ = 4,
  OMNIBASE_CTRL_CART_LOCAL = 5,
  OMNIBASE_CTRL_CART_GLOBAL = 6
};
bool OMNIBASE_CTRL_MODE_IsValid(int value);
const OMNIBASE_CTRL_MODE OMNIBASE_CTRL_MODE_MIN = OMNIBASE_CTRL_OFF;
const OMNIBASE_CTRL_MODE OMNIBASE_CTRL_MODE_MAX = OMNIBASE_CTRL_CART_GLOBAL;
const int OMNIBASE_CTRL_MODE_ARRAYSIZE = OMNIBASE_CTRL_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* OMNIBASE_CTRL_MODE_descriptor();
inline const ::std::string& OMNIBASE_CTRL_MODE_Name(OMNIBASE_CTRL_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    OMNIBASE_CTRL_MODE_descriptor(), value);
}
inline bool OMNIBASE_CTRL_MODE_Parse(
    const ::std::string& name, OMNIBASE_CTRL_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OMNIBASE_CTRL_MODE>(
    OMNIBASE_CTRL_MODE_descriptor(), name, value);
}
enum OMNIBASE_CASTER_MODE {
  OMNIBASE_CASTER_OFF = 0,
  OMNIBASE_CASTER_TORQUE = 1,
  OMNIBASE_CASTER_VELOCITY = 2,
  OMNIBASE_CASTER_THETA = 3
};
bool OMNIBASE_CASTER_MODE_IsValid(int value);
const OMNIBASE_CASTER_MODE OMNIBASE_CASTER_MODE_MIN = OMNIBASE_CASTER_OFF;
const OMNIBASE_CASTER_MODE OMNIBASE_CASTER_MODE_MAX = OMNIBASE_CASTER_THETA;
const int OMNIBASE_CASTER_MODE_ARRAYSIZE = OMNIBASE_CASTER_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* OMNIBASE_CASTER_MODE_descriptor();
inline const ::std::string& OMNIBASE_CASTER_MODE_Name(OMNIBASE_CASTER_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    OMNIBASE_CASTER_MODE_descriptor(), value);
}
inline bool OMNIBASE_CASTER_MODE_Parse(
    const ::std::string& name, OMNIBASE_CASTER_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OMNIBASE_CASTER_MODE>(
    OMNIBASE_CASTER_MODE_descriptor(), name, value);
}
enum OMNIBASE_TRAJ_MODE {
  OMNIBASE_TRAJ_OFF = 0,
  OMNIBASE_TRAJ_JOYSTICK = 1,
  OMNIBASE_TRAJ_GOAL = 2,
  OMNIBASE_TRAJ_VIAS = 3
};
bool OMNIBASE_TRAJ_MODE_IsValid(int value);
const OMNIBASE_TRAJ_MODE OMNIBASE_TRAJ_MODE_MIN = OMNIBASE_TRAJ_OFF;
const OMNIBASE_TRAJ_MODE OMNIBASE_TRAJ_MODE_MAX = OMNIBASE_TRAJ_VIAS;
const int OMNIBASE_TRAJ_MODE_ARRAYSIZE = OMNIBASE_TRAJ_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* OMNIBASE_TRAJ_MODE_descriptor();
inline const ::std::string& OMNIBASE_TRAJ_MODE_Name(OMNIBASE_TRAJ_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    OMNIBASE_TRAJ_MODE_descriptor(), value);
}
inline bool OMNIBASE_TRAJ_MODE_Parse(
    const ::std::string& name, OMNIBASE_TRAJ_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OMNIBASE_TRAJ_MODE>(
    OMNIBASE_TRAJ_MODE_descriptor(), name, value);
}
// ===================================================================

class M3OmnibaseStatus : public ::google::protobuf::Message {
 public:
  M3OmnibaseStatus();
  virtual ~M3OmnibaseStatus();

  M3OmnibaseStatus(const M3OmnibaseStatus& from);

  inline M3OmnibaseStatus& operator=(const M3OmnibaseStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3OmnibaseStatus& default_instance();

  void Swap(M3OmnibaseStatus* other);

  // implements Message ----------------------------------------------

  M3OmnibaseStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3OmnibaseStatus& from);
  void MergeFrom(const M3OmnibaseStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  inline ::M3BaseStatus* release_base();
  inline void set_allocated_base(::M3BaseStatus* base);

  // repeated int32 calibrated = 2;
  inline int calibrated_size() const;
  inline void clear_calibrated();
  static const int kCalibratedFieldNumber = 2;
  inline ::google::protobuf::int32 calibrated(int index) const;
  inline void set_calibrated(int index, ::google::protobuf::int32 value);
  inline void add_calibrated(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      calibrated() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_calibrated();

  // repeated double global_position = 3;
  inline int global_position_size() const;
  inline void clear_global_position();
  static const int kGlobalPositionFieldNumber = 3;
  inline double global_position(int index) const;
  inline void set_global_position(int index, double value);
  inline void add_global_position(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      global_position() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_global_position();

  // repeated double global_velocity = 4;
  inline int global_velocity_size() const;
  inline void clear_global_velocity();
  static const int kGlobalVelocityFieldNumber = 4;
  inline double global_velocity(int index) const;
  inline void set_global_velocity(int index, double value);
  inline void add_global_velocity(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      global_velocity() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_global_velocity();

  // repeated double local_velocity = 5;
  inline int local_velocity_size() const;
  inline void clear_local_velocity();
  static const int kLocalVelocityFieldNumber = 5;
  inline double local_velocity(int index) const;
  inline void set_local_velocity(int index, double value);
  inline void add_local_velocity(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      local_velocity() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_local_velocity();

  // repeated double roll_torque_desired = 6;
  inline int roll_torque_desired_size() const;
  inline void clear_roll_torque_desired();
  static const int kRollTorqueDesiredFieldNumber = 6;
  inline double roll_torque_desired(int index) const;
  inline void set_roll_torque_desired(int index, double value);
  inline void add_roll_torque_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      roll_torque_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_roll_torque_desired();

  // repeated double steer_torque_desired = 7;
  inline int steer_torque_desired_size() const;
  inline void clear_steer_torque_desired();
  static const int kSteerTorqueDesiredFieldNumber = 7;
  inline double steer_torque_desired(int index) const;
  inline void set_steer_torque_desired(int index, double value);
  inline void add_steer_torque_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      steer_torque_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_steer_torque_desired();

  // repeated double steer_angle = 8;
  inline int steer_angle_size() const;
  inline void clear_steer_angle();
  static const int kSteerAngleFieldNumber = 8;
  inline double steer_angle(int index) const;
  inline void set_steer_angle(int index, double value);
  inline void add_steer_angle(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      steer_angle() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_steer_angle();

  // repeated double steer_velocity = 9;
  inline int steer_velocity_size() const;
  inline void clear_steer_velocity();
  static const int kSteerVelocityFieldNumber = 9;
  inline double steer_velocity(int index) const;
  inline void set_steer_velocity(int index, double value);
  inline void add_steer_velocity(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      steer_velocity() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_steer_velocity();

  // repeated double roll_angle = 10;
  inline int roll_angle_size() const;
  inline void clear_roll_angle();
  static const int kRollAngleFieldNumber = 10;
  inline double roll_angle(int index) const;
  inline void set_roll_angle(int index, double value);
  inline void add_roll_angle(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      roll_angle() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_roll_angle();

  // repeated double roll_velocity = 11;
  inline int roll_velocity_size() const;
  inline void clear_roll_velocity();
  static const int kRollVelocityFieldNumber = 11;
  inline double roll_velocity(int index) const;
  inline void set_roll_velocity(int index, double value);
  inline void add_roll_velocity(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      roll_velocity() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_roll_velocity();

  // repeated double local_force = 12;
  inline int local_force_size() const;
  inline void clear_local_force();
  static const int kLocalForceFieldNumber = 12;
  inline double local_force(int index) const;
  inline void set_local_force(int index, double value);
  inline void add_local_force(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      local_force() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_local_force();

  // repeated double local_acceleration = 13;
  inline int local_acceleration_size() const;
  inline void clear_local_acceleration();
  static const int kLocalAccelerationFieldNumber = 13;
  inline double local_acceleration(int index) const;
  inline void set_local_acceleration(int index, double value);
  inline void add_local_acceleration(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      local_acceleration() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_local_acceleration();

  // repeated double motor_torque_desired = 14;
  inline int motor_torque_desired_size() const;
  inline void clear_motor_torque_desired();
  static const int kMotorTorqueDesiredFieldNumber = 14;
  inline double motor_torque_desired(int index) const;
  inline void set_motor_torque_desired(int index, double value);
  inline void add_motor_torque_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      motor_torque_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_motor_torque_desired();

  // repeated double local_position = 15;
  inline int local_position_size() const;
  inline void clear_local_position();
  static const int kLocalPositionFieldNumber = 15;
  inline double local_position(int index) const;
  inline void set_local_position(int index, double value);
  inline void add_local_position(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      local_position() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_local_position();

  // repeated double position_desired = 16;
  inline int position_desired_size() const;
  inline void clear_position_desired();
  static const int kPositionDesiredFieldNumber = 16;
  inline double position_desired(int index) const;
  inline void set_position_desired(int index, double value);
  inline void add_position_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      position_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_position_desired();

  // repeated double velocity_desired = 17;
  inline int velocity_desired_size() const;
  inline void clear_velocity_desired();
  static const int kVelocityDesiredFieldNumber = 17;
  inline double velocity_desired(int index) const;
  inline void set_velocity_desired(int index, double value);
  inline void add_velocity_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      velocity_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_velocity_desired();

  // repeated double acceleration_desired = 18;
  inline int acceleration_desired_size() const;
  inline void clear_acceleration_desired();
  static const int kAccelerationDesiredFieldNumber = 18;
  inline double acceleration_desired(int index) const;
  inline void set_acceleration_desired(int index, double value);
  inline void add_acceleration_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      acceleration_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_acceleration_desired();

  // optional int32 traj_goal_reached = 19;
  inline bool has_traj_goal_reached() const;
  inline void clear_traj_goal_reached();
  static const int kTrajGoalReachedFieldNumber = 19;
  inline ::google::protobuf::int32 traj_goal_reached() const;
  inline void set_traj_goal_reached(::google::protobuf::int32 value);

  // optional double bus_voltage = 20;
  inline bool has_bus_voltage() const;
  inline void clear_bus_voltage();
  static const int kBusVoltageFieldNumber = 20;
  inline double bus_voltage() const;
  inline void set_bus_voltage(double value);

  // repeated double position_error = 21;
  inline int position_error_size() const;
  inline void clear_position_error();
  static const int kPositionErrorFieldNumber = 21;
  inline double position_error(int index) const;
  inline void set_position_error(int index, double value);
  inline void add_position_error(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      position_error() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_position_error();

  // repeated double velocity_error = 22;
  inline int velocity_error_size() const;
  inline void clear_velocity_error();
  static const int kVelocityErrorFieldNumber = 22;
  inline double velocity_error(int index) const;
  inline void set_velocity_error(int index, double value);
  inline void add_velocity_error(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      velocity_error() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_velocity_error();

  // repeated double motor_current = 23;
  inline int motor_current_size() const;
  inline void clear_motor_current();
  static const int kMotorCurrentFieldNumber = 23;
  inline double motor_current(int index) const;
  inline void set_motor_current(int index, double value);
  inline void add_motor_current(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      motor_current() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_motor_current();

  // repeated double roll_torque_internal = 24;
  inline int roll_torque_internal_size() const;
  inline void clear_roll_torque_internal();
  static const int kRollTorqueInternalFieldNumber = 24;
  inline double roll_torque_internal(int index) const;
  inline void set_roll_torque_internal(int index, double value);
  inline void add_roll_torque_internal(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      roll_torque_internal() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_roll_torque_internal();

  // repeated double steer_torque_internal = 25;
  inline int steer_torque_internal_size() const;
  inline void clear_steer_torque_internal();
  static const int kSteerTorqueInternalFieldNumber = 25;
  inline double steer_torque_internal(int index) const;
  inline void set_steer_torque_internal(int index, double value);
  inline void add_steer_torque_internal(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      steer_torque_internal() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_steer_torque_internal();

  // repeated double truss_vel = 26;
  inline int truss_vel_size() const;
  inline void clear_truss_vel();
  static const int kTrussVelFieldNumber = 26;
  inline double truss_vel(int index) const;
  inline void set_truss_vel(int index, double value);
  inline void add_truss_vel(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      truss_vel() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_truss_vel();

  // @@protoc_insertion_point(class_scope:M3OmnibaseStatus)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_traj_goal_reached();
  inline void clear_has_traj_goal_reached();
  inline void set_has_bus_voltage();
  inline void clear_has_bus_voltage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::M3BaseStatus* base_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > calibrated_;
  ::google::protobuf::RepeatedField< double > global_position_;
  ::google::protobuf::RepeatedField< double > global_velocity_;
  ::google::protobuf::RepeatedField< double > local_velocity_;
  ::google::protobuf::RepeatedField< double > roll_torque_desired_;
  ::google::protobuf::RepeatedField< double > steer_torque_desired_;
  ::google::protobuf::RepeatedField< double > steer_angle_;
  ::google::protobuf::RepeatedField< double > steer_velocity_;
  ::google::protobuf::RepeatedField< double > roll_angle_;
  ::google::protobuf::RepeatedField< double > roll_velocity_;
  ::google::protobuf::RepeatedField< double > local_force_;
  ::google::protobuf::RepeatedField< double > local_acceleration_;
  ::google::protobuf::RepeatedField< double > motor_torque_desired_;
  ::google::protobuf::RepeatedField< double > local_position_;
  ::google::protobuf::RepeatedField< double > position_desired_;
  ::google::protobuf::RepeatedField< double > velocity_desired_;
  ::google::protobuf::RepeatedField< double > acceleration_desired_;
  double bus_voltage_;
  ::google::protobuf::RepeatedField< double > position_error_;
  ::google::protobuf::RepeatedField< double > velocity_error_;
  ::google::protobuf::RepeatedField< double > motor_current_;
  ::google::protobuf::RepeatedField< double > roll_torque_internal_;
  ::google::protobuf::RepeatedField< double > steer_torque_internal_;
  ::google::protobuf::RepeatedField< double > truss_vel_;
  ::google::protobuf::int32 traj_goal_reached_;
  friend void  protobuf_AddDesc_omnibase_2eproto();
  friend void protobuf_AssignDesc_omnibase_2eproto();
  friend void protobuf_ShutdownFile_omnibase_2eproto();

  void InitAsDefaultInstance();
  static M3OmnibaseStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3OmnibaseParam : public ::google::protobuf::Message {
 public:
  M3OmnibaseParam();
  virtual ~M3OmnibaseParam();

  M3OmnibaseParam(const M3OmnibaseParam& from);

  inline M3OmnibaseParam& operator=(const M3OmnibaseParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3OmnibaseParam& default_instance();

  void Swap(M3OmnibaseParam* other);

  // implements Message ----------------------------------------------

  M3OmnibaseParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3OmnibaseParam& from);
  void MergeFrom(const M3OmnibaseParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 enable_breakbeam = 1;
  inline int enable_breakbeam_size() const;
  inline void clear_enable_breakbeam();
  static const int kEnableBreakbeamFieldNumber = 1;
  inline ::google::protobuf::int32 enable_breakbeam(int index) const;
  inline void set_enable_breakbeam(int index, ::google::protobuf::int32 value);
  inline void add_enable_breakbeam(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      enable_breakbeam() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_enable_breakbeam();

  // optional double ks_i = 2;
  inline bool has_ks_i() const;
  inline void clear_ks_i();
  static const int kKsIFieldNumber = 2;
  inline double ks_i() const;
  inline void set_ks_i(double value);

  // optional double ks_i_limit = 3;
  inline bool has_ks_i_limit() const;
  inline void clear_ks_i_limit();
  static const int kKsILimitFieldNumber = 3;
  inline double ks_i_limit() const;
  inline void set_ks_i_limit(double value);

  // optional double ks_i_range = 4;
  inline bool has_ks_i_range() const;
  inline void clear_ks_i_range();
  static const int kKsIRangeFieldNumber = 4;
  inline double ks_i_range() const;
  inline void set_ks_i_range(double value);

  // optional double ks_p = 5;
  inline bool has_ks_p() const;
  inline void clear_ks_p();
  static const int kKsPFieldNumber = 5;
  inline double ks_p() const;
  inline void set_ks_p(double value);

  // optional double ks_d = 6;
  inline bool has_ks_d() const;
  inline void clear_ks_d();
  static const int kKsDFieldNumber = 6;
  inline double ks_d() const;
  inline void set_ks_d(double value);

  // @@protoc_insertion_point(class_scope:M3OmnibaseParam)
 private:
  inline void set_has_ks_i();
  inline void clear_has_ks_i();
  inline void set_has_ks_i_limit();
  inline void clear_has_ks_i_limit();
  inline void set_has_ks_i_range();
  inline void clear_has_ks_i_range();
  inline void set_has_ks_p();
  inline void clear_has_ks_p();
  inline void set_has_ks_d();
  inline void clear_has_ks_d();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > enable_breakbeam_;
  double ks_i_;
  double ks_i_limit_;
  double ks_i_range_;
  double ks_p_;
  double ks_d_;
  friend void  protobuf_AddDesc_omnibase_2eproto();
  friend void protobuf_AssignDesc_omnibase_2eproto();
  friend void protobuf_ShutdownFile_omnibase_2eproto();

  void InitAsDefaultInstance();
  static M3OmnibaseParam* default_instance_;
};
// -------------------------------------------------------------------

class M3OmnibaseCommand : public ::google::protobuf::Message {
 public:
  M3OmnibaseCommand();
  virtual ~M3OmnibaseCommand();

  M3OmnibaseCommand(const M3OmnibaseCommand& from);

  inline M3OmnibaseCommand& operator=(const M3OmnibaseCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3OmnibaseCommand& default_instance();

  void Swap(M3OmnibaseCommand* other);

  // implements Message ----------------------------------------------

  M3OmnibaseCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3OmnibaseCommand& from);
  void MergeFrom(const M3OmnibaseCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .OMNIBASE_CTRL_MODE ctrl_mode = 1;
  inline bool has_ctrl_mode() const;
  inline void clear_ctrl_mode();
  static const int kCtrlModeFieldNumber = 1;
  inline ::OMNIBASE_CTRL_MODE ctrl_mode() const;
  inline void set_ctrl_mode(::OMNIBASE_CTRL_MODE value);

  // optional .OMNIBASE_TRAJ_MODE traj_mode = 2;
  inline bool has_traj_mode() const;
  inline void clear_traj_mode();
  static const int kTrajModeFieldNumber = 2;
  inline ::OMNIBASE_TRAJ_MODE traj_mode() const;
  inline void set_traj_mode(::OMNIBASE_TRAJ_MODE value);

  // repeated double roll_torque_desired = 3;
  inline int roll_torque_desired_size() const;
  inline void clear_roll_torque_desired();
  static const int kRollTorqueDesiredFieldNumber = 3;
  inline double roll_torque_desired(int index) const;
  inline void set_roll_torque_desired(int index, double value);
  inline void add_roll_torque_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      roll_torque_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_roll_torque_desired();

  // repeated double opspace_force_desired = 4;
  inline int opspace_force_desired_size() const;
  inline void clear_opspace_force_desired();
  static const int kOpspaceForceDesiredFieldNumber = 4;
  inline double opspace_force_desired(int index) const;
  inline void set_opspace_force_desired(int index, double value);
  inline void add_opspace_force_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      opspace_force_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_opspace_force_desired();

  // repeated double local_position_desired = 5;
  inline int local_position_desired_size() const;
  inline void clear_local_position_desired();
  static const int kLocalPositionDesiredFieldNumber = 5;
  inline double local_position_desired(int index) const;
  inline void set_local_position_desired(int index, double value);
  inline void add_local_position_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      local_position_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_local_position_desired();

  // repeated double local_velocity_desired = 6;
  inline int local_velocity_desired_size() const;
  inline void clear_local_velocity_desired();
  static const int kLocalVelocityDesiredFieldNumber = 6;
  inline double local_velocity_desired(int index) const;
  inline void set_local_velocity_desired(int index, double value);
  inline void add_local_velocity_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      local_velocity_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_local_velocity_desired();

  // repeated double local_acceleration_desired = 7;
  inline int local_acceleration_desired_size() const;
  inline void clear_local_acceleration_desired();
  static const int kLocalAccelerationDesiredFieldNumber = 7;
  inline double local_acceleration_desired(int index) const;
  inline void set_local_acceleration_desired(int index, double value);
  inline void add_local_acceleration_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      local_acceleration_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_local_acceleration_desired();

  // repeated double global_position_desired = 8;
  inline int global_position_desired_size() const;
  inline void clear_global_position_desired();
  static const int kGlobalPositionDesiredFieldNumber = 8;
  inline double global_position_desired(int index) const;
  inline void set_global_position_desired(int index, double value);
  inline void add_global_position_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      global_position_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_global_position_desired();

  // repeated double global_velocity_desired = 9;
  inline int global_velocity_desired_size() const;
  inline void clear_global_velocity_desired();
  static const int kGlobalVelocityDesiredFieldNumber = 9;
  inline double global_velocity_desired(int index) const;
  inline void set_global_velocity_desired(int index, double value);
  inline void add_global_velocity_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      global_velocity_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_global_velocity_desired();

  // repeated double global_acceleration_desired = 10;
  inline int global_acceleration_desired_size() const;
  inline void clear_global_acceleration_desired();
  static const int kGlobalAccelerationDesiredFieldNumber = 10;
  inline double global_acceleration_desired(int index) const;
  inline void set_global_acceleration_desired(int index, double value);
  inline void add_global_acceleration_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      global_acceleration_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_global_acceleration_desired();

  // repeated double steer_torque_desired = 11;
  inline int steer_torque_desired_size() const;
  inline void clear_steer_torque_desired();
  static const int kSteerTorqueDesiredFieldNumber = 11;
  inline double steer_torque_desired(int index) const;
  inline void set_steer_torque_desired(int index, double value);
  inline void add_steer_torque_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      steer_torque_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_steer_torque_desired();

  // optional double joystick_x = 12;
  inline bool has_joystick_x() const;
  inline void clear_joystick_x();
  static const int kJoystickXFieldNumber = 12;
  inline double joystick_x() const;
  inline void set_joystick_x(double value);

  // optional double joystick_y = 13;
  inline bool has_joystick_y() const;
  inline void clear_joystick_y();
  static const int kJoystickYFieldNumber = 13;
  inline double joystick_y() const;
  inline void set_joystick_y(double value);

  // optional double joystick_yaw = 14;
  inline bool has_joystick_yaw() const;
  inline void clear_joystick_yaw();
  static const int kJoystickYawFieldNumber = 14;
  inline double joystick_yaw() const;
  inline void set_joystick_yaw(double value);

  // repeated double steer_velocity_desired = 15;
  inline int steer_velocity_desired_size() const;
  inline void clear_steer_velocity_desired();
  static const int kSteerVelocityDesiredFieldNumber = 15;
  inline double steer_velocity_desired(int index) const;
  inline void set_steer_velocity_desired(int index, double value);
  inline void add_steer_velocity_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      steer_velocity_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_steer_velocity_desired();

  // repeated double roll_velocity_desired = 16;
  inline int roll_velocity_desired_size() const;
  inline void clear_roll_velocity_desired();
  static const int kRollVelocityDesiredFieldNumber = 16;
  inline double roll_velocity_desired(int index) const;
  inline void set_roll_velocity_desired(int index, double value);
  inline void add_roll_velocity_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      roll_velocity_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_roll_velocity_desired();

  // optional int32 joystick_button = 17;
  inline bool has_joystick_button() const;
  inline void clear_joystick_button();
  static const int kJoystickButtonFieldNumber = 17;
  inline ::google::protobuf::int32 joystick_button() const;
  inline void set_joystick_button(::google::protobuf::int32 value);

  // repeated .OMNIBASE_CASTER_MODE caster_mode = 19;
  inline int caster_mode_size() const;
  inline void clear_caster_mode();
  static const int kCasterModeFieldNumber = 19;
  inline ::OMNIBASE_CASTER_MODE caster_mode(int index) const;
  inline void set_caster_mode(int index, ::OMNIBASE_CASTER_MODE value);
  inline void add_caster_mode(::OMNIBASE_CASTER_MODE value);
  inline const ::google::protobuf::RepeatedField<int>& caster_mode() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_caster_mode();

  // repeated double traj_goal = 20;
  inline int traj_goal_size() const;
  inline void clear_traj_goal();
  static const int kTrajGoalFieldNumber = 20;
  inline double traj_goal(int index) const;
  inline void set_traj_goal(int index, double value);
  inline void add_traj_goal(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      traj_goal() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_traj_goal();

  // repeated double global_position = 21;
  inline int global_position_size() const;
  inline void clear_global_position();
  static const int kGlobalPositionFieldNumber = 21;
  inline double global_position(int index) const;
  inline void set_global_position(int index, double value);
  inline void add_global_position(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      global_position() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_global_position();

  // repeated double local_position = 22;
  inline int local_position_size() const;
  inline void clear_local_position();
  static const int kLocalPositionFieldNumber = 22;
  inline double local_position(int index) const;
  inline void set_local_position(int index, double value);
  inline void add_local_position(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      local_position() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_local_position();

  // optional int32 adjust_local_position = 23;
  inline bool has_adjust_local_position() const;
  inline void clear_adjust_local_position();
  static const int kAdjustLocalPositionFieldNumber = 23;
  inline ::google::protobuf::int32 adjust_local_position() const;
  inline void set_adjust_local_position(::google::protobuf::int32 value);

  // optional int32 adjust_global_position = 24;
  inline bool has_adjust_global_position() const;
  inline void clear_adjust_global_position();
  static const int kAdjustGlobalPositionFieldNumber = 24;
  inline ::google::protobuf::int32 adjust_global_position() const;
  inline void set_adjust_global_position(::google::protobuf::int32 value);

  // repeated .M3OmniVia vias = 25;
  inline int vias_size() const;
  inline void clear_vias();
  static const int kViasFieldNumber = 25;
  inline const ::M3OmniVia& vias(int index) const;
  inline ::M3OmniVia* mutable_vias(int index);
  inline ::M3OmniVia* add_vias();
  inline const ::google::protobuf::RepeatedPtrField< ::M3OmniVia >&
      vias() const;
  inline ::google::protobuf::RepeatedPtrField< ::M3OmniVia >*
      mutable_vias();

  // optional double max_linear_velocity = 26;
  inline bool has_max_linear_velocity() const;
  inline void clear_max_linear_velocity();
  static const int kMaxLinearVelocityFieldNumber = 26;
  inline double max_linear_velocity() const;
  inline void set_max_linear_velocity(double value);

  // optional double max_rotation_velocity = 27;
  inline bool has_max_rotation_velocity() const;
  inline void clear_max_rotation_velocity();
  static const int kMaxRotationVelocityFieldNumber = 27;
  inline double max_rotation_velocity() const;
  inline void set_max_rotation_velocity(double value);

  // optional double max_linear_acceleration = 28;
  inline bool has_max_linear_acceleration() const;
  inline void clear_max_linear_acceleration();
  static const int kMaxLinearAccelerationFieldNumber = 28;
  inline double max_linear_acceleration() const;
  inline void set_max_linear_acceleration(double value);

  // optional double max_rotation_acceleration = 29;
  inline bool has_max_rotation_acceleration() const;
  inline void clear_max_rotation_acceleration();
  static const int kMaxRotationAccelerationFieldNumber = 29;
  inline double max_rotation_acceleration() const;
  inline void set_max_rotation_acceleration(double value);

  // repeated double steer_theta_desired = 30;
  inline int steer_theta_desired_size() const;
  inline void clear_steer_theta_desired();
  static const int kSteerThetaDesiredFieldNumber = 30;
  inline double steer_theta_desired(int index) const;
  inline void set_steer_theta_desired(int index, double value);
  inline void add_steer_theta_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      steer_theta_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_steer_theta_desired();

  // @@protoc_insertion_point(class_scope:M3OmnibaseCommand)
 private:
  inline void set_has_ctrl_mode();
  inline void clear_has_ctrl_mode();
  inline void set_has_traj_mode();
  inline void clear_has_traj_mode();
  inline void set_has_joystick_x();
  inline void clear_has_joystick_x();
  inline void set_has_joystick_y();
  inline void clear_has_joystick_y();
  inline void set_has_joystick_yaw();
  inline void clear_has_joystick_yaw();
  inline void set_has_joystick_button();
  inline void clear_has_joystick_button();
  inline void set_has_adjust_local_position();
  inline void clear_has_adjust_local_position();
  inline void set_has_adjust_global_position();
  inline void clear_has_adjust_global_position();
  inline void set_has_max_linear_velocity();
  inline void clear_has_max_linear_velocity();
  inline void set_has_max_rotation_velocity();
  inline void clear_has_max_rotation_velocity();
  inline void set_has_max_linear_acceleration();
  inline void clear_has_max_linear_acceleration();
  inline void set_has_max_rotation_acceleration();
  inline void clear_has_max_rotation_acceleration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int ctrl_mode_;
  int traj_mode_;
  ::google::protobuf::RepeatedField< double > roll_torque_desired_;
  ::google::protobuf::RepeatedField< double > opspace_force_desired_;
  ::google::protobuf::RepeatedField< double > local_position_desired_;
  ::google::protobuf::RepeatedField< double > local_velocity_desired_;
  ::google::protobuf::RepeatedField< double > local_acceleration_desired_;
  ::google::protobuf::RepeatedField< double > global_position_desired_;
  ::google::protobuf::RepeatedField< double > global_velocity_desired_;
  ::google::protobuf::RepeatedField< double > global_acceleration_desired_;
  ::google::protobuf::RepeatedField< double > steer_torque_desired_;
  double joystick_x_;
  double joystick_y_;
  double joystick_yaw_;
  ::google::protobuf::RepeatedField< double > steer_velocity_desired_;
  ::google::protobuf::RepeatedField< double > roll_velocity_desired_;
  ::google::protobuf::RepeatedField<int> caster_mode_;
  ::google::protobuf::RepeatedField< double > traj_goal_;
  ::google::protobuf::int32 joystick_button_;
  ::google::protobuf::int32 adjust_local_position_;
  ::google::protobuf::RepeatedField< double > global_position_;
  ::google::protobuf::RepeatedField< double > local_position_;
  ::google::protobuf::RepeatedPtrField< ::M3OmniVia > vias_;
  double max_linear_velocity_;
  double max_rotation_velocity_;
  double max_linear_acceleration_;
  double max_rotation_acceleration_;
  ::google::protobuf::RepeatedField< double > steer_theta_desired_;
  ::google::protobuf::int32 adjust_global_position_;
  friend void  protobuf_AddDesc_omnibase_2eproto();
  friend void protobuf_AssignDesc_omnibase_2eproto();
  friend void protobuf_ShutdownFile_omnibase_2eproto();

  void InitAsDefaultInstance();
  static M3OmnibaseCommand* default_instance_;
};
// -------------------------------------------------------------------

class M3OmniVia : public ::google::protobuf::Message {
 public:
  M3OmniVia();
  virtual ~M3OmniVia();

  M3OmniVia(const M3OmniVia& from);

  inline M3OmniVia& operator=(const M3OmniVia& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const M3OmniVia& default_instance();

  void Swap(M3OmniVia* other);

  // implements Message ----------------------------------------------

  M3OmniVia* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3OmniVia& from);
  void MergeFrom(const M3OmniVia& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::int32 idx() const;
  inline void set_idx(::google::protobuf::int32 value);

  // repeated double position_desired = 2;
  inline int position_desired_size() const;
  inline void clear_position_desired();
  static const int kPositionDesiredFieldNumber = 2;
  inline double position_desired(int index) const;
  inline void set_position_desired(int index, double value);
  inline void add_position_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      position_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_position_desired();

  // optional double lin_velocity_avg = 3;
  inline bool has_lin_velocity_avg() const;
  inline void clear_lin_velocity_avg();
  static const int kLinVelocityAvgFieldNumber = 3;
  inline double lin_velocity_avg() const;
  inline void set_lin_velocity_avg(double value);

  // optional double ang_velocity_avg = 4;
  inline bool has_ang_velocity_avg() const;
  inline void clear_ang_velocity_avg();
  static const int kAngVelocityAvgFieldNumber = 4;
  inline double ang_velocity_avg() const;
  inline void set_ang_velocity_avg(double value);

  // @@protoc_insertion_point(class_scope:M3OmniVia)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_lin_velocity_avg();
  inline void clear_has_lin_velocity_avg();
  inline void set_has_ang_velocity_avg();
  inline void clear_has_ang_velocity_avg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > position_desired_;
  double lin_velocity_avg_;
  double ang_velocity_avg_;
  ::google::protobuf::int32 idx_;
  friend void  protobuf_AddDesc_omnibase_2eproto();
  friend void protobuf_AssignDesc_omnibase_2eproto();
  friend void protobuf_ShutdownFile_omnibase_2eproto();

  void InitAsDefaultInstance();
  static M3OmniVia* default_instance_;
};
// ===================================================================


// ===================================================================

// M3OmnibaseStatus

// optional .M3BaseStatus base = 1;
inline bool M3OmnibaseStatus::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3OmnibaseStatus::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3OmnibaseStatus::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3OmnibaseStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  clear_has_base();
}
inline const ::M3BaseStatus& M3OmnibaseStatus::base() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3OmnibaseStatus::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  // @@protoc_insertion_point(field_mutable:M3OmnibaseStatus.base)
  return base_;
}
inline ::M3BaseStatus* M3OmnibaseStatus::release_base() {
  clear_has_base();
  ::M3BaseStatus* temp = base_;
  base_ = NULL;
  return temp;
}
inline void M3OmnibaseStatus::set_allocated_base(::M3BaseStatus* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
  // @@protoc_insertion_point(field_set_allocated:M3OmnibaseStatus.base)
}

// repeated int32 calibrated = 2;
inline int M3OmnibaseStatus::calibrated_size() const {
  return calibrated_.size();
}
inline void M3OmnibaseStatus::clear_calibrated() {
  calibrated_.Clear();
}
inline ::google::protobuf::int32 M3OmnibaseStatus::calibrated(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.calibrated)
  return calibrated_.Get(index);
}
inline void M3OmnibaseStatus::set_calibrated(int index, ::google::protobuf::int32 value) {
  calibrated_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.calibrated)
}
inline void M3OmnibaseStatus::add_calibrated(::google::protobuf::int32 value) {
  calibrated_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.calibrated)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
M3OmnibaseStatus::calibrated() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.calibrated)
  return calibrated_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
M3OmnibaseStatus::mutable_calibrated() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.calibrated)
  return &calibrated_;
}

// repeated double global_position = 3;
inline int M3OmnibaseStatus::global_position_size() const {
  return global_position_.size();
}
inline void M3OmnibaseStatus::clear_global_position() {
  global_position_.Clear();
}
inline double M3OmnibaseStatus::global_position(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.global_position)
  return global_position_.Get(index);
}
inline void M3OmnibaseStatus::set_global_position(int index, double value) {
  global_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.global_position)
}
inline void M3OmnibaseStatus::add_global_position(double value) {
  global_position_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.global_position)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::global_position() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.global_position)
  return global_position_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_global_position() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.global_position)
  return &global_position_;
}

// repeated double global_velocity = 4;
inline int M3OmnibaseStatus::global_velocity_size() const {
  return global_velocity_.size();
}
inline void M3OmnibaseStatus::clear_global_velocity() {
  global_velocity_.Clear();
}
inline double M3OmnibaseStatus::global_velocity(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.global_velocity)
  return global_velocity_.Get(index);
}
inline void M3OmnibaseStatus::set_global_velocity(int index, double value) {
  global_velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.global_velocity)
}
inline void M3OmnibaseStatus::add_global_velocity(double value) {
  global_velocity_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.global_velocity)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::global_velocity() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.global_velocity)
  return global_velocity_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_global_velocity() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.global_velocity)
  return &global_velocity_;
}

// repeated double local_velocity = 5;
inline int M3OmnibaseStatus::local_velocity_size() const {
  return local_velocity_.size();
}
inline void M3OmnibaseStatus::clear_local_velocity() {
  local_velocity_.Clear();
}
inline double M3OmnibaseStatus::local_velocity(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.local_velocity)
  return local_velocity_.Get(index);
}
inline void M3OmnibaseStatus::set_local_velocity(int index, double value) {
  local_velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.local_velocity)
}
inline void M3OmnibaseStatus::add_local_velocity(double value) {
  local_velocity_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.local_velocity)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::local_velocity() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.local_velocity)
  return local_velocity_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_local_velocity() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.local_velocity)
  return &local_velocity_;
}

// repeated double roll_torque_desired = 6;
inline int M3OmnibaseStatus::roll_torque_desired_size() const {
  return roll_torque_desired_.size();
}
inline void M3OmnibaseStatus::clear_roll_torque_desired() {
  roll_torque_desired_.Clear();
}
inline double M3OmnibaseStatus::roll_torque_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.roll_torque_desired)
  return roll_torque_desired_.Get(index);
}
inline void M3OmnibaseStatus::set_roll_torque_desired(int index, double value) {
  roll_torque_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.roll_torque_desired)
}
inline void M3OmnibaseStatus::add_roll_torque_desired(double value) {
  roll_torque_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.roll_torque_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::roll_torque_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.roll_torque_desired)
  return roll_torque_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_roll_torque_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.roll_torque_desired)
  return &roll_torque_desired_;
}

// repeated double steer_torque_desired = 7;
inline int M3OmnibaseStatus::steer_torque_desired_size() const {
  return steer_torque_desired_.size();
}
inline void M3OmnibaseStatus::clear_steer_torque_desired() {
  steer_torque_desired_.Clear();
}
inline double M3OmnibaseStatus::steer_torque_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.steer_torque_desired)
  return steer_torque_desired_.Get(index);
}
inline void M3OmnibaseStatus::set_steer_torque_desired(int index, double value) {
  steer_torque_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.steer_torque_desired)
}
inline void M3OmnibaseStatus::add_steer_torque_desired(double value) {
  steer_torque_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.steer_torque_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::steer_torque_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.steer_torque_desired)
  return steer_torque_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_steer_torque_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.steer_torque_desired)
  return &steer_torque_desired_;
}

// repeated double steer_angle = 8;
inline int M3OmnibaseStatus::steer_angle_size() const {
  return steer_angle_.size();
}
inline void M3OmnibaseStatus::clear_steer_angle() {
  steer_angle_.Clear();
}
inline double M3OmnibaseStatus::steer_angle(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.steer_angle)
  return steer_angle_.Get(index);
}
inline void M3OmnibaseStatus::set_steer_angle(int index, double value) {
  steer_angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.steer_angle)
}
inline void M3OmnibaseStatus::add_steer_angle(double value) {
  steer_angle_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.steer_angle)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::steer_angle() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.steer_angle)
  return steer_angle_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_steer_angle() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.steer_angle)
  return &steer_angle_;
}

// repeated double steer_velocity = 9;
inline int M3OmnibaseStatus::steer_velocity_size() const {
  return steer_velocity_.size();
}
inline void M3OmnibaseStatus::clear_steer_velocity() {
  steer_velocity_.Clear();
}
inline double M3OmnibaseStatus::steer_velocity(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.steer_velocity)
  return steer_velocity_.Get(index);
}
inline void M3OmnibaseStatus::set_steer_velocity(int index, double value) {
  steer_velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.steer_velocity)
}
inline void M3OmnibaseStatus::add_steer_velocity(double value) {
  steer_velocity_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.steer_velocity)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::steer_velocity() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.steer_velocity)
  return steer_velocity_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_steer_velocity() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.steer_velocity)
  return &steer_velocity_;
}

// repeated double roll_angle = 10;
inline int M3OmnibaseStatus::roll_angle_size() const {
  return roll_angle_.size();
}
inline void M3OmnibaseStatus::clear_roll_angle() {
  roll_angle_.Clear();
}
inline double M3OmnibaseStatus::roll_angle(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.roll_angle)
  return roll_angle_.Get(index);
}
inline void M3OmnibaseStatus::set_roll_angle(int index, double value) {
  roll_angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.roll_angle)
}
inline void M3OmnibaseStatus::add_roll_angle(double value) {
  roll_angle_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.roll_angle)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::roll_angle() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.roll_angle)
  return roll_angle_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_roll_angle() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.roll_angle)
  return &roll_angle_;
}

// repeated double roll_velocity = 11;
inline int M3OmnibaseStatus::roll_velocity_size() const {
  return roll_velocity_.size();
}
inline void M3OmnibaseStatus::clear_roll_velocity() {
  roll_velocity_.Clear();
}
inline double M3OmnibaseStatus::roll_velocity(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.roll_velocity)
  return roll_velocity_.Get(index);
}
inline void M3OmnibaseStatus::set_roll_velocity(int index, double value) {
  roll_velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.roll_velocity)
}
inline void M3OmnibaseStatus::add_roll_velocity(double value) {
  roll_velocity_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.roll_velocity)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::roll_velocity() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.roll_velocity)
  return roll_velocity_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_roll_velocity() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.roll_velocity)
  return &roll_velocity_;
}

// repeated double local_force = 12;
inline int M3OmnibaseStatus::local_force_size() const {
  return local_force_.size();
}
inline void M3OmnibaseStatus::clear_local_force() {
  local_force_.Clear();
}
inline double M3OmnibaseStatus::local_force(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.local_force)
  return local_force_.Get(index);
}
inline void M3OmnibaseStatus::set_local_force(int index, double value) {
  local_force_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.local_force)
}
inline void M3OmnibaseStatus::add_local_force(double value) {
  local_force_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.local_force)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::local_force() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.local_force)
  return local_force_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_local_force() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.local_force)
  return &local_force_;
}

// repeated double local_acceleration = 13;
inline int M3OmnibaseStatus::local_acceleration_size() const {
  return local_acceleration_.size();
}
inline void M3OmnibaseStatus::clear_local_acceleration() {
  local_acceleration_.Clear();
}
inline double M3OmnibaseStatus::local_acceleration(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.local_acceleration)
  return local_acceleration_.Get(index);
}
inline void M3OmnibaseStatus::set_local_acceleration(int index, double value) {
  local_acceleration_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.local_acceleration)
}
inline void M3OmnibaseStatus::add_local_acceleration(double value) {
  local_acceleration_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.local_acceleration)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::local_acceleration() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.local_acceleration)
  return local_acceleration_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_local_acceleration() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.local_acceleration)
  return &local_acceleration_;
}

// repeated double motor_torque_desired = 14;
inline int M3OmnibaseStatus::motor_torque_desired_size() const {
  return motor_torque_desired_.size();
}
inline void M3OmnibaseStatus::clear_motor_torque_desired() {
  motor_torque_desired_.Clear();
}
inline double M3OmnibaseStatus::motor_torque_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.motor_torque_desired)
  return motor_torque_desired_.Get(index);
}
inline void M3OmnibaseStatus::set_motor_torque_desired(int index, double value) {
  motor_torque_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.motor_torque_desired)
}
inline void M3OmnibaseStatus::add_motor_torque_desired(double value) {
  motor_torque_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.motor_torque_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::motor_torque_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.motor_torque_desired)
  return motor_torque_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_motor_torque_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.motor_torque_desired)
  return &motor_torque_desired_;
}

// repeated double local_position = 15;
inline int M3OmnibaseStatus::local_position_size() const {
  return local_position_.size();
}
inline void M3OmnibaseStatus::clear_local_position() {
  local_position_.Clear();
}
inline double M3OmnibaseStatus::local_position(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.local_position)
  return local_position_.Get(index);
}
inline void M3OmnibaseStatus::set_local_position(int index, double value) {
  local_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.local_position)
}
inline void M3OmnibaseStatus::add_local_position(double value) {
  local_position_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.local_position)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::local_position() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.local_position)
  return local_position_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_local_position() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.local_position)
  return &local_position_;
}

// repeated double position_desired = 16;
inline int M3OmnibaseStatus::position_desired_size() const {
  return position_desired_.size();
}
inline void M3OmnibaseStatus::clear_position_desired() {
  position_desired_.Clear();
}
inline double M3OmnibaseStatus::position_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.position_desired)
  return position_desired_.Get(index);
}
inline void M3OmnibaseStatus::set_position_desired(int index, double value) {
  position_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.position_desired)
}
inline void M3OmnibaseStatus::add_position_desired(double value) {
  position_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.position_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::position_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.position_desired)
  return position_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_position_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.position_desired)
  return &position_desired_;
}

// repeated double velocity_desired = 17;
inline int M3OmnibaseStatus::velocity_desired_size() const {
  return velocity_desired_.size();
}
inline void M3OmnibaseStatus::clear_velocity_desired() {
  velocity_desired_.Clear();
}
inline double M3OmnibaseStatus::velocity_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.velocity_desired)
  return velocity_desired_.Get(index);
}
inline void M3OmnibaseStatus::set_velocity_desired(int index, double value) {
  velocity_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.velocity_desired)
}
inline void M3OmnibaseStatus::add_velocity_desired(double value) {
  velocity_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.velocity_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::velocity_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.velocity_desired)
  return velocity_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_velocity_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.velocity_desired)
  return &velocity_desired_;
}

// repeated double acceleration_desired = 18;
inline int M3OmnibaseStatus::acceleration_desired_size() const {
  return acceleration_desired_.size();
}
inline void M3OmnibaseStatus::clear_acceleration_desired() {
  acceleration_desired_.Clear();
}
inline double M3OmnibaseStatus::acceleration_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.acceleration_desired)
  return acceleration_desired_.Get(index);
}
inline void M3OmnibaseStatus::set_acceleration_desired(int index, double value) {
  acceleration_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.acceleration_desired)
}
inline void M3OmnibaseStatus::add_acceleration_desired(double value) {
  acceleration_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.acceleration_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::acceleration_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.acceleration_desired)
  return acceleration_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_acceleration_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.acceleration_desired)
  return &acceleration_desired_;
}

// optional int32 traj_goal_reached = 19;
inline bool M3OmnibaseStatus::has_traj_goal_reached() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void M3OmnibaseStatus::set_has_traj_goal_reached() {
  _has_bits_[0] |= 0x00040000u;
}
inline void M3OmnibaseStatus::clear_has_traj_goal_reached() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void M3OmnibaseStatus::clear_traj_goal_reached() {
  traj_goal_reached_ = 0;
  clear_has_traj_goal_reached();
}
inline ::google::protobuf::int32 M3OmnibaseStatus::traj_goal_reached() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.traj_goal_reached)
  return traj_goal_reached_;
}
inline void M3OmnibaseStatus::set_traj_goal_reached(::google::protobuf::int32 value) {
  set_has_traj_goal_reached();
  traj_goal_reached_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.traj_goal_reached)
}

// optional double bus_voltage = 20;
inline bool M3OmnibaseStatus::has_bus_voltage() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void M3OmnibaseStatus::set_has_bus_voltage() {
  _has_bits_[0] |= 0x00080000u;
}
inline void M3OmnibaseStatus::clear_has_bus_voltage() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void M3OmnibaseStatus::clear_bus_voltage() {
  bus_voltage_ = 0;
  clear_has_bus_voltage();
}
inline double M3OmnibaseStatus::bus_voltage() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.bus_voltage)
  return bus_voltage_;
}
inline void M3OmnibaseStatus::set_bus_voltage(double value) {
  set_has_bus_voltage();
  bus_voltage_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.bus_voltage)
}

// repeated double position_error = 21;
inline int M3OmnibaseStatus::position_error_size() const {
  return position_error_.size();
}
inline void M3OmnibaseStatus::clear_position_error() {
  position_error_.Clear();
}
inline double M3OmnibaseStatus::position_error(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.position_error)
  return position_error_.Get(index);
}
inline void M3OmnibaseStatus::set_position_error(int index, double value) {
  position_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.position_error)
}
inline void M3OmnibaseStatus::add_position_error(double value) {
  position_error_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.position_error)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::position_error() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.position_error)
  return position_error_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_position_error() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.position_error)
  return &position_error_;
}

// repeated double velocity_error = 22;
inline int M3OmnibaseStatus::velocity_error_size() const {
  return velocity_error_.size();
}
inline void M3OmnibaseStatus::clear_velocity_error() {
  velocity_error_.Clear();
}
inline double M3OmnibaseStatus::velocity_error(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.velocity_error)
  return velocity_error_.Get(index);
}
inline void M3OmnibaseStatus::set_velocity_error(int index, double value) {
  velocity_error_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.velocity_error)
}
inline void M3OmnibaseStatus::add_velocity_error(double value) {
  velocity_error_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.velocity_error)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::velocity_error() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.velocity_error)
  return velocity_error_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_velocity_error() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.velocity_error)
  return &velocity_error_;
}

// repeated double motor_current = 23;
inline int M3OmnibaseStatus::motor_current_size() const {
  return motor_current_.size();
}
inline void M3OmnibaseStatus::clear_motor_current() {
  motor_current_.Clear();
}
inline double M3OmnibaseStatus::motor_current(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.motor_current)
  return motor_current_.Get(index);
}
inline void M3OmnibaseStatus::set_motor_current(int index, double value) {
  motor_current_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.motor_current)
}
inline void M3OmnibaseStatus::add_motor_current(double value) {
  motor_current_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.motor_current)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::motor_current() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.motor_current)
  return motor_current_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_motor_current() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.motor_current)
  return &motor_current_;
}

// repeated double roll_torque_internal = 24;
inline int M3OmnibaseStatus::roll_torque_internal_size() const {
  return roll_torque_internal_.size();
}
inline void M3OmnibaseStatus::clear_roll_torque_internal() {
  roll_torque_internal_.Clear();
}
inline double M3OmnibaseStatus::roll_torque_internal(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.roll_torque_internal)
  return roll_torque_internal_.Get(index);
}
inline void M3OmnibaseStatus::set_roll_torque_internal(int index, double value) {
  roll_torque_internal_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.roll_torque_internal)
}
inline void M3OmnibaseStatus::add_roll_torque_internal(double value) {
  roll_torque_internal_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.roll_torque_internal)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::roll_torque_internal() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.roll_torque_internal)
  return roll_torque_internal_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_roll_torque_internal() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.roll_torque_internal)
  return &roll_torque_internal_;
}

// repeated double steer_torque_internal = 25;
inline int M3OmnibaseStatus::steer_torque_internal_size() const {
  return steer_torque_internal_.size();
}
inline void M3OmnibaseStatus::clear_steer_torque_internal() {
  steer_torque_internal_.Clear();
}
inline double M3OmnibaseStatus::steer_torque_internal(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.steer_torque_internal)
  return steer_torque_internal_.Get(index);
}
inline void M3OmnibaseStatus::set_steer_torque_internal(int index, double value) {
  steer_torque_internal_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.steer_torque_internal)
}
inline void M3OmnibaseStatus::add_steer_torque_internal(double value) {
  steer_torque_internal_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.steer_torque_internal)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::steer_torque_internal() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.steer_torque_internal)
  return steer_torque_internal_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_steer_torque_internal() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.steer_torque_internal)
  return &steer_torque_internal_;
}

// repeated double truss_vel = 26;
inline int M3OmnibaseStatus::truss_vel_size() const {
  return truss_vel_.size();
}
inline void M3OmnibaseStatus::clear_truss_vel() {
  truss_vel_.Clear();
}
inline double M3OmnibaseStatus::truss_vel(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseStatus.truss_vel)
  return truss_vel_.Get(index);
}
inline void M3OmnibaseStatus::set_truss_vel(int index, double value) {
  truss_vel_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseStatus.truss_vel)
}
inline void M3OmnibaseStatus::add_truss_vel(double value) {
  truss_vel_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseStatus.truss_vel)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseStatus::truss_vel() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseStatus.truss_vel)
  return truss_vel_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseStatus::mutable_truss_vel() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseStatus.truss_vel)
  return &truss_vel_;
}

// -------------------------------------------------------------------

// M3OmnibaseParam

// repeated int32 enable_breakbeam = 1;
inline int M3OmnibaseParam::enable_breakbeam_size() const {
  return enable_breakbeam_.size();
}
inline void M3OmnibaseParam::clear_enable_breakbeam() {
  enable_breakbeam_.Clear();
}
inline ::google::protobuf::int32 M3OmnibaseParam::enable_breakbeam(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseParam.enable_breakbeam)
  return enable_breakbeam_.Get(index);
}
inline void M3OmnibaseParam::set_enable_breakbeam(int index, ::google::protobuf::int32 value) {
  enable_breakbeam_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseParam.enable_breakbeam)
}
inline void M3OmnibaseParam::add_enable_breakbeam(::google::protobuf::int32 value) {
  enable_breakbeam_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseParam.enable_breakbeam)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
M3OmnibaseParam::enable_breakbeam() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseParam.enable_breakbeam)
  return enable_breakbeam_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
M3OmnibaseParam::mutable_enable_breakbeam() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseParam.enable_breakbeam)
  return &enable_breakbeam_;
}

// optional double ks_i = 2;
inline bool M3OmnibaseParam::has_ks_i() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3OmnibaseParam::set_has_ks_i() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3OmnibaseParam::clear_has_ks_i() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3OmnibaseParam::clear_ks_i() {
  ks_i_ = 0;
  clear_has_ks_i();
}
inline double M3OmnibaseParam::ks_i() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseParam.ks_i)
  return ks_i_;
}
inline void M3OmnibaseParam::set_ks_i(double value) {
  set_has_ks_i();
  ks_i_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseParam.ks_i)
}

// optional double ks_i_limit = 3;
inline bool M3OmnibaseParam::has_ks_i_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3OmnibaseParam::set_has_ks_i_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3OmnibaseParam::clear_has_ks_i_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3OmnibaseParam::clear_ks_i_limit() {
  ks_i_limit_ = 0;
  clear_has_ks_i_limit();
}
inline double M3OmnibaseParam::ks_i_limit() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseParam.ks_i_limit)
  return ks_i_limit_;
}
inline void M3OmnibaseParam::set_ks_i_limit(double value) {
  set_has_ks_i_limit();
  ks_i_limit_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseParam.ks_i_limit)
}

// optional double ks_i_range = 4;
inline bool M3OmnibaseParam::has_ks_i_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3OmnibaseParam::set_has_ks_i_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3OmnibaseParam::clear_has_ks_i_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3OmnibaseParam::clear_ks_i_range() {
  ks_i_range_ = 0;
  clear_has_ks_i_range();
}
inline double M3OmnibaseParam::ks_i_range() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseParam.ks_i_range)
  return ks_i_range_;
}
inline void M3OmnibaseParam::set_ks_i_range(double value) {
  set_has_ks_i_range();
  ks_i_range_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseParam.ks_i_range)
}

// optional double ks_p = 5;
inline bool M3OmnibaseParam::has_ks_p() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3OmnibaseParam::set_has_ks_p() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3OmnibaseParam::clear_has_ks_p() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3OmnibaseParam::clear_ks_p() {
  ks_p_ = 0;
  clear_has_ks_p();
}
inline double M3OmnibaseParam::ks_p() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseParam.ks_p)
  return ks_p_;
}
inline void M3OmnibaseParam::set_ks_p(double value) {
  set_has_ks_p();
  ks_p_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseParam.ks_p)
}

// optional double ks_d = 6;
inline bool M3OmnibaseParam::has_ks_d() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void M3OmnibaseParam::set_has_ks_d() {
  _has_bits_[0] |= 0x00000020u;
}
inline void M3OmnibaseParam::clear_has_ks_d() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void M3OmnibaseParam::clear_ks_d() {
  ks_d_ = 0;
  clear_has_ks_d();
}
inline double M3OmnibaseParam::ks_d() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseParam.ks_d)
  return ks_d_;
}
inline void M3OmnibaseParam::set_ks_d(double value) {
  set_has_ks_d();
  ks_d_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseParam.ks_d)
}

// -------------------------------------------------------------------

// M3OmnibaseCommand

// optional .OMNIBASE_CTRL_MODE ctrl_mode = 1;
inline bool M3OmnibaseCommand::has_ctrl_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3OmnibaseCommand::set_has_ctrl_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3OmnibaseCommand::clear_has_ctrl_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3OmnibaseCommand::clear_ctrl_mode() {
  ctrl_mode_ = 0;
  clear_has_ctrl_mode();
}
inline ::OMNIBASE_CTRL_MODE M3OmnibaseCommand::ctrl_mode() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.ctrl_mode)
  return static_cast< ::OMNIBASE_CTRL_MODE >(ctrl_mode_);
}
inline void M3OmnibaseCommand::set_ctrl_mode(::OMNIBASE_CTRL_MODE value) {
  assert(::OMNIBASE_CTRL_MODE_IsValid(value));
  set_has_ctrl_mode();
  ctrl_mode_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.ctrl_mode)
}

// optional .OMNIBASE_TRAJ_MODE traj_mode = 2;
inline bool M3OmnibaseCommand::has_traj_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3OmnibaseCommand::set_has_traj_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3OmnibaseCommand::clear_has_traj_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3OmnibaseCommand::clear_traj_mode() {
  traj_mode_ = 0;
  clear_has_traj_mode();
}
inline ::OMNIBASE_TRAJ_MODE M3OmnibaseCommand::traj_mode() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.traj_mode)
  return static_cast< ::OMNIBASE_TRAJ_MODE >(traj_mode_);
}
inline void M3OmnibaseCommand::set_traj_mode(::OMNIBASE_TRAJ_MODE value) {
  assert(::OMNIBASE_TRAJ_MODE_IsValid(value));
  set_has_traj_mode();
  traj_mode_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.traj_mode)
}

// repeated double roll_torque_desired = 3;
inline int M3OmnibaseCommand::roll_torque_desired_size() const {
  return roll_torque_desired_.size();
}
inline void M3OmnibaseCommand::clear_roll_torque_desired() {
  roll_torque_desired_.Clear();
}
inline double M3OmnibaseCommand::roll_torque_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.roll_torque_desired)
  return roll_torque_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_roll_torque_desired(int index, double value) {
  roll_torque_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.roll_torque_desired)
}
inline void M3OmnibaseCommand::add_roll_torque_desired(double value) {
  roll_torque_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.roll_torque_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::roll_torque_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.roll_torque_desired)
  return roll_torque_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_roll_torque_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.roll_torque_desired)
  return &roll_torque_desired_;
}

// repeated double opspace_force_desired = 4;
inline int M3OmnibaseCommand::opspace_force_desired_size() const {
  return opspace_force_desired_.size();
}
inline void M3OmnibaseCommand::clear_opspace_force_desired() {
  opspace_force_desired_.Clear();
}
inline double M3OmnibaseCommand::opspace_force_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.opspace_force_desired)
  return opspace_force_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_opspace_force_desired(int index, double value) {
  opspace_force_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.opspace_force_desired)
}
inline void M3OmnibaseCommand::add_opspace_force_desired(double value) {
  opspace_force_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.opspace_force_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::opspace_force_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.opspace_force_desired)
  return opspace_force_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_opspace_force_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.opspace_force_desired)
  return &opspace_force_desired_;
}

// repeated double local_position_desired = 5;
inline int M3OmnibaseCommand::local_position_desired_size() const {
  return local_position_desired_.size();
}
inline void M3OmnibaseCommand::clear_local_position_desired() {
  local_position_desired_.Clear();
}
inline double M3OmnibaseCommand::local_position_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.local_position_desired)
  return local_position_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_local_position_desired(int index, double value) {
  local_position_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.local_position_desired)
}
inline void M3OmnibaseCommand::add_local_position_desired(double value) {
  local_position_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.local_position_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::local_position_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.local_position_desired)
  return local_position_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_local_position_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.local_position_desired)
  return &local_position_desired_;
}

// repeated double local_velocity_desired = 6;
inline int M3OmnibaseCommand::local_velocity_desired_size() const {
  return local_velocity_desired_.size();
}
inline void M3OmnibaseCommand::clear_local_velocity_desired() {
  local_velocity_desired_.Clear();
}
inline double M3OmnibaseCommand::local_velocity_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.local_velocity_desired)
  return local_velocity_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_local_velocity_desired(int index, double value) {
  local_velocity_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.local_velocity_desired)
}
inline void M3OmnibaseCommand::add_local_velocity_desired(double value) {
  local_velocity_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.local_velocity_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::local_velocity_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.local_velocity_desired)
  return local_velocity_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_local_velocity_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.local_velocity_desired)
  return &local_velocity_desired_;
}

// repeated double local_acceleration_desired = 7;
inline int M3OmnibaseCommand::local_acceleration_desired_size() const {
  return local_acceleration_desired_.size();
}
inline void M3OmnibaseCommand::clear_local_acceleration_desired() {
  local_acceleration_desired_.Clear();
}
inline double M3OmnibaseCommand::local_acceleration_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.local_acceleration_desired)
  return local_acceleration_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_local_acceleration_desired(int index, double value) {
  local_acceleration_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.local_acceleration_desired)
}
inline void M3OmnibaseCommand::add_local_acceleration_desired(double value) {
  local_acceleration_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.local_acceleration_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::local_acceleration_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.local_acceleration_desired)
  return local_acceleration_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_local_acceleration_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.local_acceleration_desired)
  return &local_acceleration_desired_;
}

// repeated double global_position_desired = 8;
inline int M3OmnibaseCommand::global_position_desired_size() const {
  return global_position_desired_.size();
}
inline void M3OmnibaseCommand::clear_global_position_desired() {
  global_position_desired_.Clear();
}
inline double M3OmnibaseCommand::global_position_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.global_position_desired)
  return global_position_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_global_position_desired(int index, double value) {
  global_position_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.global_position_desired)
}
inline void M3OmnibaseCommand::add_global_position_desired(double value) {
  global_position_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.global_position_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::global_position_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.global_position_desired)
  return global_position_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_global_position_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.global_position_desired)
  return &global_position_desired_;
}

// repeated double global_velocity_desired = 9;
inline int M3OmnibaseCommand::global_velocity_desired_size() const {
  return global_velocity_desired_.size();
}
inline void M3OmnibaseCommand::clear_global_velocity_desired() {
  global_velocity_desired_.Clear();
}
inline double M3OmnibaseCommand::global_velocity_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.global_velocity_desired)
  return global_velocity_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_global_velocity_desired(int index, double value) {
  global_velocity_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.global_velocity_desired)
}
inline void M3OmnibaseCommand::add_global_velocity_desired(double value) {
  global_velocity_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.global_velocity_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::global_velocity_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.global_velocity_desired)
  return global_velocity_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_global_velocity_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.global_velocity_desired)
  return &global_velocity_desired_;
}

// repeated double global_acceleration_desired = 10;
inline int M3OmnibaseCommand::global_acceleration_desired_size() const {
  return global_acceleration_desired_.size();
}
inline void M3OmnibaseCommand::clear_global_acceleration_desired() {
  global_acceleration_desired_.Clear();
}
inline double M3OmnibaseCommand::global_acceleration_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.global_acceleration_desired)
  return global_acceleration_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_global_acceleration_desired(int index, double value) {
  global_acceleration_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.global_acceleration_desired)
}
inline void M3OmnibaseCommand::add_global_acceleration_desired(double value) {
  global_acceleration_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.global_acceleration_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::global_acceleration_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.global_acceleration_desired)
  return global_acceleration_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_global_acceleration_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.global_acceleration_desired)
  return &global_acceleration_desired_;
}

// repeated double steer_torque_desired = 11;
inline int M3OmnibaseCommand::steer_torque_desired_size() const {
  return steer_torque_desired_.size();
}
inline void M3OmnibaseCommand::clear_steer_torque_desired() {
  steer_torque_desired_.Clear();
}
inline double M3OmnibaseCommand::steer_torque_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.steer_torque_desired)
  return steer_torque_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_steer_torque_desired(int index, double value) {
  steer_torque_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.steer_torque_desired)
}
inline void M3OmnibaseCommand::add_steer_torque_desired(double value) {
  steer_torque_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.steer_torque_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::steer_torque_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.steer_torque_desired)
  return steer_torque_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_steer_torque_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.steer_torque_desired)
  return &steer_torque_desired_;
}

// optional double joystick_x = 12;
inline bool M3OmnibaseCommand::has_joystick_x() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void M3OmnibaseCommand::set_has_joystick_x() {
  _has_bits_[0] |= 0x00000800u;
}
inline void M3OmnibaseCommand::clear_has_joystick_x() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void M3OmnibaseCommand::clear_joystick_x() {
  joystick_x_ = 0;
  clear_has_joystick_x();
}
inline double M3OmnibaseCommand::joystick_x() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.joystick_x)
  return joystick_x_;
}
inline void M3OmnibaseCommand::set_joystick_x(double value) {
  set_has_joystick_x();
  joystick_x_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.joystick_x)
}

// optional double joystick_y = 13;
inline bool M3OmnibaseCommand::has_joystick_y() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void M3OmnibaseCommand::set_has_joystick_y() {
  _has_bits_[0] |= 0x00001000u;
}
inline void M3OmnibaseCommand::clear_has_joystick_y() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void M3OmnibaseCommand::clear_joystick_y() {
  joystick_y_ = 0;
  clear_has_joystick_y();
}
inline double M3OmnibaseCommand::joystick_y() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.joystick_y)
  return joystick_y_;
}
inline void M3OmnibaseCommand::set_joystick_y(double value) {
  set_has_joystick_y();
  joystick_y_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.joystick_y)
}

// optional double joystick_yaw = 14;
inline bool M3OmnibaseCommand::has_joystick_yaw() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void M3OmnibaseCommand::set_has_joystick_yaw() {
  _has_bits_[0] |= 0x00002000u;
}
inline void M3OmnibaseCommand::clear_has_joystick_yaw() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void M3OmnibaseCommand::clear_joystick_yaw() {
  joystick_yaw_ = 0;
  clear_has_joystick_yaw();
}
inline double M3OmnibaseCommand::joystick_yaw() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.joystick_yaw)
  return joystick_yaw_;
}
inline void M3OmnibaseCommand::set_joystick_yaw(double value) {
  set_has_joystick_yaw();
  joystick_yaw_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.joystick_yaw)
}

// repeated double steer_velocity_desired = 15;
inline int M3OmnibaseCommand::steer_velocity_desired_size() const {
  return steer_velocity_desired_.size();
}
inline void M3OmnibaseCommand::clear_steer_velocity_desired() {
  steer_velocity_desired_.Clear();
}
inline double M3OmnibaseCommand::steer_velocity_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.steer_velocity_desired)
  return steer_velocity_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_steer_velocity_desired(int index, double value) {
  steer_velocity_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.steer_velocity_desired)
}
inline void M3OmnibaseCommand::add_steer_velocity_desired(double value) {
  steer_velocity_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.steer_velocity_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::steer_velocity_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.steer_velocity_desired)
  return steer_velocity_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_steer_velocity_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.steer_velocity_desired)
  return &steer_velocity_desired_;
}

// repeated double roll_velocity_desired = 16;
inline int M3OmnibaseCommand::roll_velocity_desired_size() const {
  return roll_velocity_desired_.size();
}
inline void M3OmnibaseCommand::clear_roll_velocity_desired() {
  roll_velocity_desired_.Clear();
}
inline double M3OmnibaseCommand::roll_velocity_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.roll_velocity_desired)
  return roll_velocity_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_roll_velocity_desired(int index, double value) {
  roll_velocity_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.roll_velocity_desired)
}
inline void M3OmnibaseCommand::add_roll_velocity_desired(double value) {
  roll_velocity_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.roll_velocity_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::roll_velocity_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.roll_velocity_desired)
  return roll_velocity_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_roll_velocity_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.roll_velocity_desired)
  return &roll_velocity_desired_;
}

// optional int32 joystick_button = 17;
inline bool M3OmnibaseCommand::has_joystick_button() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void M3OmnibaseCommand::set_has_joystick_button() {
  _has_bits_[0] |= 0x00010000u;
}
inline void M3OmnibaseCommand::clear_has_joystick_button() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void M3OmnibaseCommand::clear_joystick_button() {
  joystick_button_ = 0;
  clear_has_joystick_button();
}
inline ::google::protobuf::int32 M3OmnibaseCommand::joystick_button() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.joystick_button)
  return joystick_button_;
}
inline void M3OmnibaseCommand::set_joystick_button(::google::protobuf::int32 value) {
  set_has_joystick_button();
  joystick_button_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.joystick_button)
}

// repeated .OMNIBASE_CASTER_MODE caster_mode = 19;
inline int M3OmnibaseCommand::caster_mode_size() const {
  return caster_mode_.size();
}
inline void M3OmnibaseCommand::clear_caster_mode() {
  caster_mode_.Clear();
}
inline ::OMNIBASE_CASTER_MODE M3OmnibaseCommand::caster_mode(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.caster_mode)
  return static_cast< ::OMNIBASE_CASTER_MODE >(caster_mode_.Get(index));
}
inline void M3OmnibaseCommand::set_caster_mode(int index, ::OMNIBASE_CASTER_MODE value) {
  assert(::OMNIBASE_CASTER_MODE_IsValid(value));
  caster_mode_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.caster_mode)
}
inline void M3OmnibaseCommand::add_caster_mode(::OMNIBASE_CASTER_MODE value) {
  assert(::OMNIBASE_CASTER_MODE_IsValid(value));
  caster_mode_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.caster_mode)
}
inline const ::google::protobuf::RepeatedField<int>&
M3OmnibaseCommand::caster_mode() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.caster_mode)
  return caster_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
M3OmnibaseCommand::mutable_caster_mode() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.caster_mode)
  return &caster_mode_;
}

// repeated double traj_goal = 20;
inline int M3OmnibaseCommand::traj_goal_size() const {
  return traj_goal_.size();
}
inline void M3OmnibaseCommand::clear_traj_goal() {
  traj_goal_.Clear();
}
inline double M3OmnibaseCommand::traj_goal(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.traj_goal)
  return traj_goal_.Get(index);
}
inline void M3OmnibaseCommand::set_traj_goal(int index, double value) {
  traj_goal_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.traj_goal)
}
inline void M3OmnibaseCommand::add_traj_goal(double value) {
  traj_goal_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.traj_goal)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::traj_goal() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.traj_goal)
  return traj_goal_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_traj_goal() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.traj_goal)
  return &traj_goal_;
}

// repeated double global_position = 21;
inline int M3OmnibaseCommand::global_position_size() const {
  return global_position_.size();
}
inline void M3OmnibaseCommand::clear_global_position() {
  global_position_.Clear();
}
inline double M3OmnibaseCommand::global_position(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.global_position)
  return global_position_.Get(index);
}
inline void M3OmnibaseCommand::set_global_position(int index, double value) {
  global_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.global_position)
}
inline void M3OmnibaseCommand::add_global_position(double value) {
  global_position_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.global_position)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::global_position() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.global_position)
  return global_position_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_global_position() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.global_position)
  return &global_position_;
}

// repeated double local_position = 22;
inline int M3OmnibaseCommand::local_position_size() const {
  return local_position_.size();
}
inline void M3OmnibaseCommand::clear_local_position() {
  local_position_.Clear();
}
inline double M3OmnibaseCommand::local_position(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.local_position)
  return local_position_.Get(index);
}
inline void M3OmnibaseCommand::set_local_position(int index, double value) {
  local_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.local_position)
}
inline void M3OmnibaseCommand::add_local_position(double value) {
  local_position_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.local_position)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::local_position() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.local_position)
  return local_position_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_local_position() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.local_position)
  return &local_position_;
}

// optional int32 adjust_local_position = 23;
inline bool M3OmnibaseCommand::has_adjust_local_position() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void M3OmnibaseCommand::set_has_adjust_local_position() {
  _has_bits_[0] |= 0x00200000u;
}
inline void M3OmnibaseCommand::clear_has_adjust_local_position() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void M3OmnibaseCommand::clear_adjust_local_position() {
  adjust_local_position_ = 0;
  clear_has_adjust_local_position();
}
inline ::google::protobuf::int32 M3OmnibaseCommand::adjust_local_position() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.adjust_local_position)
  return adjust_local_position_;
}
inline void M3OmnibaseCommand::set_adjust_local_position(::google::protobuf::int32 value) {
  set_has_adjust_local_position();
  adjust_local_position_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.adjust_local_position)
}

// optional int32 adjust_global_position = 24;
inline bool M3OmnibaseCommand::has_adjust_global_position() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void M3OmnibaseCommand::set_has_adjust_global_position() {
  _has_bits_[0] |= 0x00400000u;
}
inline void M3OmnibaseCommand::clear_has_adjust_global_position() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void M3OmnibaseCommand::clear_adjust_global_position() {
  adjust_global_position_ = 0;
  clear_has_adjust_global_position();
}
inline ::google::protobuf::int32 M3OmnibaseCommand::adjust_global_position() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.adjust_global_position)
  return adjust_global_position_;
}
inline void M3OmnibaseCommand::set_adjust_global_position(::google::protobuf::int32 value) {
  set_has_adjust_global_position();
  adjust_global_position_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.adjust_global_position)
}

// repeated .M3OmniVia vias = 25;
inline int M3OmnibaseCommand::vias_size() const {
  return vias_.size();
}
inline void M3OmnibaseCommand::clear_vias() {
  vias_.Clear();
}
inline const ::M3OmniVia& M3OmnibaseCommand::vias(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.vias)
  return vias_.Get(index);
}
inline ::M3OmniVia* M3OmnibaseCommand::mutable_vias(int index) {
  // @@protoc_insertion_point(field_mutable:M3OmnibaseCommand.vias)
  return vias_.Mutable(index);
}
inline ::M3OmniVia* M3OmnibaseCommand::add_vias() {
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.vias)
  return vias_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::M3OmniVia >&
M3OmnibaseCommand::vias() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.vias)
  return vias_;
}
inline ::google::protobuf::RepeatedPtrField< ::M3OmniVia >*
M3OmnibaseCommand::mutable_vias() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.vias)
  return &vias_;
}

// optional double max_linear_velocity = 26;
inline bool M3OmnibaseCommand::has_max_linear_velocity() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void M3OmnibaseCommand::set_has_max_linear_velocity() {
  _has_bits_[0] |= 0x01000000u;
}
inline void M3OmnibaseCommand::clear_has_max_linear_velocity() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void M3OmnibaseCommand::clear_max_linear_velocity() {
  max_linear_velocity_ = 0;
  clear_has_max_linear_velocity();
}
inline double M3OmnibaseCommand::max_linear_velocity() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.max_linear_velocity)
  return max_linear_velocity_;
}
inline void M3OmnibaseCommand::set_max_linear_velocity(double value) {
  set_has_max_linear_velocity();
  max_linear_velocity_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.max_linear_velocity)
}

// optional double max_rotation_velocity = 27;
inline bool M3OmnibaseCommand::has_max_rotation_velocity() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void M3OmnibaseCommand::set_has_max_rotation_velocity() {
  _has_bits_[0] |= 0x02000000u;
}
inline void M3OmnibaseCommand::clear_has_max_rotation_velocity() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void M3OmnibaseCommand::clear_max_rotation_velocity() {
  max_rotation_velocity_ = 0;
  clear_has_max_rotation_velocity();
}
inline double M3OmnibaseCommand::max_rotation_velocity() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.max_rotation_velocity)
  return max_rotation_velocity_;
}
inline void M3OmnibaseCommand::set_max_rotation_velocity(double value) {
  set_has_max_rotation_velocity();
  max_rotation_velocity_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.max_rotation_velocity)
}

// optional double max_linear_acceleration = 28;
inline bool M3OmnibaseCommand::has_max_linear_acceleration() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void M3OmnibaseCommand::set_has_max_linear_acceleration() {
  _has_bits_[0] |= 0x04000000u;
}
inline void M3OmnibaseCommand::clear_has_max_linear_acceleration() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void M3OmnibaseCommand::clear_max_linear_acceleration() {
  max_linear_acceleration_ = 0;
  clear_has_max_linear_acceleration();
}
inline double M3OmnibaseCommand::max_linear_acceleration() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.max_linear_acceleration)
  return max_linear_acceleration_;
}
inline void M3OmnibaseCommand::set_max_linear_acceleration(double value) {
  set_has_max_linear_acceleration();
  max_linear_acceleration_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.max_linear_acceleration)
}

// optional double max_rotation_acceleration = 29;
inline bool M3OmnibaseCommand::has_max_rotation_acceleration() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void M3OmnibaseCommand::set_has_max_rotation_acceleration() {
  _has_bits_[0] |= 0x08000000u;
}
inline void M3OmnibaseCommand::clear_has_max_rotation_acceleration() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void M3OmnibaseCommand::clear_max_rotation_acceleration() {
  max_rotation_acceleration_ = 0;
  clear_has_max_rotation_acceleration();
}
inline double M3OmnibaseCommand::max_rotation_acceleration() const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.max_rotation_acceleration)
  return max_rotation_acceleration_;
}
inline void M3OmnibaseCommand::set_max_rotation_acceleration(double value) {
  set_has_max_rotation_acceleration();
  max_rotation_acceleration_ = value;
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.max_rotation_acceleration)
}

// repeated double steer_theta_desired = 30;
inline int M3OmnibaseCommand::steer_theta_desired_size() const {
  return steer_theta_desired_.size();
}
inline void M3OmnibaseCommand::clear_steer_theta_desired() {
  steer_theta_desired_.Clear();
}
inline double M3OmnibaseCommand::steer_theta_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmnibaseCommand.steer_theta_desired)
  return steer_theta_desired_.Get(index);
}
inline void M3OmnibaseCommand::set_steer_theta_desired(int index, double value) {
  steer_theta_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmnibaseCommand.steer_theta_desired)
}
inline void M3OmnibaseCommand::add_steer_theta_desired(double value) {
  steer_theta_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmnibaseCommand.steer_theta_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmnibaseCommand::steer_theta_desired() const {
  // @@protoc_insertion_point(field_list:M3OmnibaseCommand.steer_theta_desired)
  return steer_theta_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmnibaseCommand::mutable_steer_theta_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmnibaseCommand.steer_theta_desired)
  return &steer_theta_desired_;
}

// -------------------------------------------------------------------

// M3OmniVia

// optional int32 idx = 1;
inline bool M3OmniVia::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3OmniVia::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3OmniVia::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3OmniVia::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::google::protobuf::int32 M3OmniVia::idx() const {
  // @@protoc_insertion_point(field_get:M3OmniVia.idx)
  return idx_;
}
inline void M3OmniVia::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:M3OmniVia.idx)
}

// repeated double position_desired = 2;
inline int M3OmniVia::position_desired_size() const {
  return position_desired_.size();
}
inline void M3OmniVia::clear_position_desired() {
  position_desired_.Clear();
}
inline double M3OmniVia::position_desired(int index) const {
  // @@protoc_insertion_point(field_get:M3OmniVia.position_desired)
  return position_desired_.Get(index);
}
inline void M3OmniVia::set_position_desired(int index, double value) {
  position_desired_.Set(index, value);
  // @@protoc_insertion_point(field_set:M3OmniVia.position_desired)
}
inline void M3OmniVia::add_position_desired(double value) {
  position_desired_.Add(value);
  // @@protoc_insertion_point(field_add:M3OmniVia.position_desired)
}
inline const ::google::protobuf::RepeatedField< double >&
M3OmniVia::position_desired() const {
  // @@protoc_insertion_point(field_list:M3OmniVia.position_desired)
  return position_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3OmniVia::mutable_position_desired() {
  // @@protoc_insertion_point(field_mutable_list:M3OmniVia.position_desired)
  return &position_desired_;
}

// optional double lin_velocity_avg = 3;
inline bool M3OmniVia::has_lin_velocity_avg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3OmniVia::set_has_lin_velocity_avg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3OmniVia::clear_has_lin_velocity_avg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3OmniVia::clear_lin_velocity_avg() {
  lin_velocity_avg_ = 0;
  clear_has_lin_velocity_avg();
}
inline double M3OmniVia::lin_velocity_avg() const {
  // @@protoc_insertion_point(field_get:M3OmniVia.lin_velocity_avg)
  return lin_velocity_avg_;
}
inline void M3OmniVia::set_lin_velocity_avg(double value) {
  set_has_lin_velocity_avg();
  lin_velocity_avg_ = value;
  // @@protoc_insertion_point(field_set:M3OmniVia.lin_velocity_avg)
}

// optional double ang_velocity_avg = 4;
inline bool M3OmniVia::has_ang_velocity_avg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3OmniVia::set_has_ang_velocity_avg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3OmniVia::clear_has_ang_velocity_avg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3OmniVia::clear_ang_velocity_avg() {
  ang_velocity_avg_ = 0;
  clear_has_ang_velocity_avg();
}
inline double M3OmniVia::ang_velocity_avg() const {
  // @@protoc_insertion_point(field_get:M3OmniVia.ang_velocity_avg)
  return ang_velocity_avg_;
}
inline void M3OmniVia::set_ang_velocity_avg(double value) {
  set_has_ang_velocity_avg();
  ang_velocity_avg_ = value;
  // @@protoc_insertion_point(field_set:M3OmniVia.ang_velocity_avg)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::OMNIBASE_CTRL_MODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OMNIBASE_CTRL_MODE>() {
  return ::OMNIBASE_CTRL_MODE_descriptor();
}
template <> struct is_proto_enum< ::OMNIBASE_CASTER_MODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OMNIBASE_CASTER_MODE>() {
  return ::OMNIBASE_CASTER_MODE_descriptor();
}
template <> struct is_proto_enum< ::OMNIBASE_TRAJ_MODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OMNIBASE_TRAJ_MODE>() {
  return ::OMNIBASE_TRAJ_MODE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_omnibase_2eproto__INCLUDED
