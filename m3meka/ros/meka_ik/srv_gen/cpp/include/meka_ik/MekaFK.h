/* Auto-generated by genmsg_cpp for file /home/meka/mekabot/m3meka/ros/meka_ik/srv/MekaFK.srv */
#ifndef MEKA_IK_SERVICE_MEKAFK_H
#define MEKA_IK_SERVICE_MEKAFK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace meka_ik
{
template <class ContainerAllocator>
struct MekaFKRequest_ {
  typedef MekaFKRequest_<ContainerAllocator> Type;

  MekaFKRequest_()
  : arm_name()
  , joint_angles()
  {
    joint_angles.assign(0.0);
  }

  MekaFKRequest_(const ContainerAllocator& _alloc)
  : arm_name(_alloc)
  , joint_angles()
  {
    joint_angles.assign(0.0);
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arm_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  arm_name;

  typedef boost::array<float, 7>  _joint_angles_type;
  boost::array<float, 7>  joint_angles;


  typedef boost::shared_ptr< ::meka_ik::MekaFKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::meka_ik::MekaFKRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MekaFKRequest
typedef  ::meka_ik::MekaFKRequest_<std::allocator<void> > MekaFKRequest;

typedef boost::shared_ptr< ::meka_ik::MekaFKRequest> MekaFKRequestPtr;
typedef boost::shared_ptr< ::meka_ik::MekaFKRequest const> MekaFKRequestConstPtr;


template <class ContainerAllocator>
struct MekaFKResponse_ {
  typedef MekaFKResponse_<ContainerAllocator> Type;

  MekaFKResponse_()
  : end_position()
  , end_rpy()
  {
    end_position.assign(0.0);
    end_rpy.assign(0.0);
  }

  MekaFKResponse_(const ContainerAllocator& _alloc)
  : end_position()
  , end_rpy()
  {
    end_position.assign(0.0);
    end_rpy.assign(0.0);
  }

  typedef boost::array<float, 3>  _end_position_type;
  boost::array<float, 3>  end_position;

  typedef boost::array<float, 3>  _end_rpy_type;
  boost::array<float, 3>  end_rpy;


  typedef boost::shared_ptr< ::meka_ik::MekaFKResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::meka_ik::MekaFKResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MekaFKResponse
typedef  ::meka_ik::MekaFKResponse_<std::allocator<void> > MekaFKResponse;

typedef boost::shared_ptr< ::meka_ik::MekaFKResponse> MekaFKResponsePtr;
typedef boost::shared_ptr< ::meka_ik::MekaFKResponse const> MekaFKResponseConstPtr;

struct MekaFK
{

typedef MekaFKRequest Request;
typedef MekaFKResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MekaFK
} // namespace meka_ik

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::meka_ik::MekaFKRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::meka_ik::MekaFKRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::meka_ik::MekaFKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c13cedd689aa257ae9251cd4cd2b0acd";
  }

  static const char* value(const  ::meka_ik::MekaFKRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc13cedd689aa257aULL;
  static const uint64_t static_value2 = 0xe9251cd4cd2b0acdULL;
};

template<class ContainerAllocator>
struct DataType< ::meka_ik::MekaFKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "meka_ik/MekaFKRequest";
  }

  static const char* value(const  ::meka_ik::MekaFKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::meka_ik::MekaFKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string arm_name\n\
float32[7] joint_angles\n\
\n\
";
  }

  static const char* value(const  ::meka_ik::MekaFKRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::meka_ik::MekaFKResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::meka_ik::MekaFKResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::meka_ik::MekaFKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bce9b7dcadecc597d63e070011964c69";
  }

  static const char* value(const  ::meka_ik::MekaFKResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbce9b7dcadecc597ULL;
  static const uint64_t static_value2 = 0xd63e070011964c69ULL;
};

template<class ContainerAllocator>
struct DataType< ::meka_ik::MekaFKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "meka_ik/MekaFKResponse";
  }

  static const char* value(const  ::meka_ik::MekaFKResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::meka_ik::MekaFKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[3] end_position\n\
float32[3] end_rpy\n\
\n\
";
  }

  static const char* value(const  ::meka_ik::MekaFKResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::meka_ik::MekaFKResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::meka_ik::MekaFKRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.arm_name);
    stream.next(m.joint_angles);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MekaFKRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::meka_ik::MekaFKResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.end_position);
    stream.next(m.end_rpy);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MekaFKResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<meka_ik::MekaFK> {
  static const char* value() 
  {
    return "220adc38ef40d3a76c46bfd9f09c5504";
  }

  static const char* value(const meka_ik::MekaFK&) { return value(); } 
};

template<>
struct DataType<meka_ik::MekaFK> {
  static const char* value() 
  {
    return "meka_ik/MekaFK";
  }

  static const char* value(const meka_ik::MekaFK&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<meka_ik::MekaFKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "220adc38ef40d3a76c46bfd9f09c5504";
  }

  static const char* value(const meka_ik::MekaFKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<meka_ik::MekaFKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "meka_ik/MekaFK";
  }

  static const char* value(const meka_ik::MekaFKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<meka_ik::MekaFKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "220adc38ef40d3a76c46bfd9f09c5504";
  }

  static const char* value(const meka_ik::MekaFKResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<meka_ik::MekaFKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "meka_ik/MekaFK";
  }

  static const char* value(const meka_ik::MekaFKResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MEKA_IK_SERVICE_MEKAFK_H

