/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// To compile with gcc use: gcc -lstdc++ 
/// To compile without any main function use: gcc -lstdc++ -DIKFAST_NO_MAIN
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

// define when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
extern "C"
{
    bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions);
    int getNumFreeParameters();
    int* getFreeParameters();
    int getNumJoints();
    int getIKRealSize();
}
#endif

int getNumFreeParameters() { return 1; }
int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
int getNumJoints() { return 7; }

int getIKRealSize() { return sizeof(IKReal); }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    IKReal j0, cj0, sj0,
    j1, cj1, sj1,
    j3, cj3, sj3,
    j4, cj4, sj4,
    j5, cj5, sj5,
    j6, cj6, sj6,
    j2=pfree[0], cj2=cos(pfree[0]), sj2=sin(pfree[0]),
    _r00, r00 = eerot[0*3+0],
    _r01, r01 = eerot[0*3+1],
    _r02, r02 = eerot[0*3+2],
    _r10, r10 = eerot[1*3+0],
    _r11, r11 = eerot[1*3+1],
    _r12, r12 = eerot[1*3+2],
    _r20, r20 = eerot[2*3+0],
    _r21, r21 = eerot[2*3+1],
    _r22, r22 = eerot[2*3+2],
    _px, _py, _pz, px = eetrans[0], py = eetrans[1], pz = eetrans[2];
    
    _r00=((-1.00000000000000)*(r01));
    _r01=((-1.00000000000000)*(r02));
    _r02=r00;
    _px=px;
    _r10=((-1.00000000000000)*(r11));
    _r11=((-1.00000000000000)*(r12));
    _r12=r10;
    _py=((-0.184930000000000)+(py));
    _r20=((-1.00000000000000)*(r21));
    _r21=((-1.00000000000000)*(r22));
    _r22=r20;
    _pz=pz;
    r00 = _r00; r01 = _r01; r02 = _r02; r10 = _r10; r11 = _r11; r12 = _r12; r20 = _r20; r21 = _r21; r22 = _r22; px = _px; py = _py; pz = _pz;
    {
    IKReal evalcond;
        evalcond=j2;
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x0=(px)*(px);
        IKReal x1=((6.45681049529230)*(x0));
        IKReal x2=(pz)*(pz);
        IKReal x3=((6.45681049529230)*(x2));
        IKReal x4=(py)*(py);
        IKReal x5=((6.45681049529230)*(x4));
        IKReal x6=((x3)+(x1)+(x5));
        IKReal x7=((1.00651053135516)+(((-1.00000000000000)*(x6))));
        if( (x7) < -1.0001 || (x7) > 1.0001 )
            continue;
        IKReal x8=IKasin(x7);
        j3array[0]=((-1.54795446462778)+(((-1.00000000000000)*(x8))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.59363818896201)+(x8));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j0eval[1];
            j0eval[0]=(((px)*(px))+((pz)*(pz)));
            if( IKabs(j0eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=(((px)*(px))+((pz)*(pz)));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[7];
                        IKReal x9=((0.278529999999591)*(sj3));
                        IKReal x10=((0.00634999999999764)+(x9));
                        IKReal x11=((((-1.00000000000000)*(px)))+(x10));
                        IKReal x12=((-0.00634999999999764)+(px));
                        IKReal x13=((x12)+(((-1.00000000000000)*(x9))));
                        j0eval[0]=x11;
                        j0eval[1]=x11;
                        j0eval[2]=x11;
                        j0eval[3]=x11;
                        j0eval[4]=x13;
                        j0eval[5]=x13;
                        j0eval[6]=x13;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  && IKabs(j0eval[5]) < 0.000100  && IKabs(j0eval[6]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x14=x2;
                            IKReal x15=x4;
                            IKReal x16=((x15)+(x14));
                            IKReal x17=((IKabs(x16) != 0)?((IKReal)1/(x16)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((-0.0317500000001019)*(pz)*(x17)))+(((-0.278529999999591)*(cj3)*(py)*(x17)))+(((-0.277949999999691)*(py)*(x17)))), ((((-0.278529999999591)*(cj3)*(pz)*(x17)))+(((-0.277949999999691)*(pz)*(x17)))+(((0.0317500000001019)*(py)*(x17)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                            _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                            _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                            _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                            _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x18=IKsin(j4);
                                    IKReal x19=((IKabs(x18) != 0)?((IKReal)1/(x18)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r00)*(x19)), ((_r02)*(x19)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x20=IKcos(j4);
                                    IKReal x21=(x20)*(x20);
                                    IKReal x22=IKcos(j5);
                                    IKReal x23=(x22)*(x22);
                                    IKReal x24=((x21)*(x23));
                                    IKReal x25=((1.00000000000000)+(((-1.00000000000000)*(x24))));
                                    IKReal x26=((IKabs(x25) != 0)?((IKReal)1/(x25)):(IKReal)1.0e30);
                                    IKReal x27=IKsin(j4);
                                    IKReal x28=IKsin(j5);
                                    j6array[0]=IKatan2(((((_r00)*(x26)*(x27)))+(((_r02)*(x20)*(x26)*(x28)))), ((((_r02)*(x26)*(x27)))+(((-1.00000000000000)*(_r00)*(x20)*(x26)*(x28)))));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[3];
                        IKReal x29=((0.0317500000001019)+(((-1.00000000000000)*(py))));
                        j1eval[0]=x29;
                        j1eval[1]=x29;
                        j1eval[2]=((-0.0317500000001019)+(py));
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1]={false};
                            IKReal x30=x0;
                            IKReal x31=x2;
                            IKReal x32=((x31)+(x30));
                            IKReal x33=((IKabs(x32) != 0)?((IKReal)1/(x32)):(IKReal)1.0e30);
                            j0array[0]=IKatan2(((((0.278529999999591)*(cj3)*(px)*(x33)))+(((0.278529999999591)*(pz)*(sj3)*(x33)))+(((0.00634999999999764)*(pz)*(x33)))+(((0.277949999999691)*(px)*(x33)))), ((((-0.277949999999691)*(pz)*(x33)))+(((0.00634999999999764)*(px)*(x33)))+(((0.278529999999591)*(px)*(sj3)*(x33)))+(((-0.278529999999591)*(cj3)*(pz)*(x33)))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            { int ij0 = 0;
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                            
                            _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                            _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                            _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                            _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                            _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x34=IKsin(j4);
                                    IKReal x35=((IKabs(x34) != 0)?((IKReal)1/(x34)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r00)*(x35)), ((_r02)*(x35)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x36=IKcos(j4);
                                    IKReal x37=(x36)*(x36);
                                    IKReal x38=IKcos(j5);
                                    IKReal x39=(x38)*(x38);
                                    IKReal x40=((x37)*(x39));
                                    IKReal x41=((1.00000000000000)+(((-1.00000000000000)*(x40))));
                                    IKReal x42=((IKabs(x41) != 0)?((IKReal)1/(x41)):(IKReal)1.0e30);
                                    IKReal x43=IKsin(j4);
                                    IKReal x44=IKsin(j5);
                                    j6array[0]=IKatan2(((((_r00)*(x42)*(x43)))+(((_r02)*(x36)*(x42)*(x44)))), ((((_r02)*(x42)*(x43)))+(((-1.00000000000000)*(_r00)*(x36)*(x42)*(x44)))));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j0array[2], cj0array[2], sj0array[2];
                    bool j0valid[2]={false};
                    IKReal x45=x0;
                    IKReal x46=x2;
                    IKReal x47=((x46)+(x45));
                    IKReal x48=((IKabs(x47) != 0)?(pow(x47,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x49=((0.278529999999591)*(sj3));
                    IKReal x50=((0.00634999999999764)+(x49));
                    IKReal x51=((x48)*(x50));
                    if( (x51) < -1.0001 || (x51) > 1.0001 )
                        continue;
                    IKReal x52=IKasin(x51);
                    IKReal x53=((-1.00000000000000)*(px));
                    IKReal x54=((-1.00000000000000)*(pz));
                    IKReal x55=IKatan2(x53, x54);
                    j0array[0]=((((-1.00000000000000)*(x55)))+(((-1.00000000000000)*(x52))));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    j0array[1]=((3.14159265358979)+(x52)+(((-1.00000000000000)*(x55))));
                    sj0array[1]=IKsin(j0array[1]);
                    cj0array[1]=IKcos(j0array[1]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    if( j0array[1] > IKPI )
                        j0array[1]-=IK2PI;
                    else if( j0array[1] < -IKPI )
                        j0array[1]+=IK2PI;
                    j0valid[1] = true;
                    if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                        j0valid[1]=false;
                    for(int ij0 = 0; ij0 < 2; ++ij0) {
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x56=((0.0317500000001019)*(cj0)*(pz));
                    IKReal x57=((0.277949999999691)*(py));
                    IKReal x58=((1.00208670624124)*(cj3)*(x57));
                    IKReal x59=((0.0317500000001019)*(px)*(sj0));
                    IKReal x60=((x59)+(x58)+(x57));
                    IKReal x61=((x56)+(((-1.00000000000000)*(x60))));
                    IKReal x62=((IKabs(x61) != 0)?((IKReal)1/(x61)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((x62)*((py)*(py))))+(((-0.00100806250000574)*(x62)))), ((((-113.315571118146)*(x57)*(x59)*(x62)))+(((113.315571118146)*(x56)*(x57)*(x62)))+(((-0.00882491250001749)*(x62)))+(((-0.00884332750001704)*(cj3)*(x62)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                    _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                    _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                    _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                    _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                    _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                    _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                    _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                    _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                    {
                    IKReal j5eval;
                    j5eval=_r11;
                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKcos(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x63=IKsin(j4);
                            IKReal x64=((IKabs(x63) != 0)?((IKReal)1/(x63)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r00)*(x64)), ((_r02)*(x64)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x65=IKcos(j4);
                            IKReal x66=(x65)*(x65);
                            IKReal x67=IKcos(j5);
                            IKReal x68=(x67)*(x67);
                            IKReal x69=((x66)*(x68));
                            IKReal x70=((1.00000000000000)+(((-1.00000000000000)*(x69))));
                            IKReal x71=((IKabs(x70) != 0)?((IKReal)1/(x70)):(IKReal)1.0e30);
                            IKReal x72=IKsin(j4);
                            IKReal x73=IKsin(j5);
                            j6array[0]=IKatan2(((((_r00)*(x71)*(x72)))+(((_r02)*(x65)*(x71)*(x73)))), ((((_r02)*(x71)*(x72)))+(((-1.00000000000000)*(_r00)*(x65)*(x71)*(x73)))));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x74=x0;
                IKReal x75=x2;
                IKReal x76=((x75)+(x74));
                IKReal x77=((IKabs(x76) != 0)?(pow(x76,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x78=((0.278529999999591)*(sj3));
                IKReal x79=((0.00634999999999764)+(x78));
                IKReal x80=((x77)*(x79));
                if( (x80) < -1.0001 || (x80) > 1.0001 )
                    continue;
                IKReal x81=IKasin(x80);
                IKReal x82=((-1.00000000000000)*(px));
                IKReal x83=((-1.00000000000000)*(pz));
                IKReal x84=IKatan2(x82, x83);
                j0array[0]=((((-1.00000000000000)*(x84)))+(((-1.00000000000000)*(x81))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x84)))+(x81));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0) {
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x85=((0.0317500000001019)*(cj0)*(pz));
                IKReal x86=((0.277949999999691)*(py));
                IKReal x87=((1.00208670624124)*(cj3)*(x86));
                IKReal x88=((0.0317500000001019)*(px)*(sj0));
                IKReal x89=((x88)+(x86)+(x87));
                IKReal x90=((((-1.00000000000000)*(x89)))+(x85));
                IKReal x91=((IKabs(x90) != 0)?((IKReal)1/(x90)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((x91)*((py)*(py))))+(((-0.00100806250000574)*(x91)))), ((((-0.00884332750001704)*(cj3)*(x91)))+(((-0.00882491250001749)*(x91)))+(((113.315571118146)*(x85)*(x86)*(x91)))+(((-113.315571118146)*(x86)*(x88)*(x91)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                {
                IKReal j5eval;
                j5eval=_r11;
                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal evalcond;
                        evalcond=IKcos(j4);
                        if( IKabs(evalcond) < 0.00001 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x92=IKsin(j4);
                        IKReal x93=((IKabs(x92) != 0)?((IKReal)1/(x92)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((_r00)*(x93)), ((_r02)*(x93)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                        if( 1 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x94=IKcos(j4);
                        IKReal x95=(x94)*(x94);
                        IKReal x96=IKcos(j5);
                        IKReal x97=(x96)*(x96);
                        IKReal x98=((x95)*(x97));
                        IKReal x99=((1.00000000000000)+(((-1.00000000000000)*(x98))));
                        IKReal x100=((IKabs(x99) != 0)?((IKReal)1/(x99)):(IKReal)1.0e30);
                        IKReal x101=IKsin(j4);
                        IKReal x102=IKsin(j5);
                        j6array[0]=IKatan2(((((_r00)*(x100)*(x101)))+(((_r02)*(x100)*(x102)*(x94)))), ((((_r02)*(x100)*(x101)))+(((-1.00000000000000)*(_r00)*(x100)*(x102)*(x94)))));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((((-0.500000000000000)*(3.14159265358979)))+(j2));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x103=((-1.00000000000000)*(px));
        IKReal x104=((-1.00000000000000)*(pz));
        IKReal x105=IKatan2(x103, x104);
        j0array[0]=((-1.00000000000000)*(x105));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x105))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0) {
        if( !j0valid[ij0] )
            continue;
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x106=(py)*(py);
        IKReal x107=((6.43169584433781)*(x106));
        IKReal x108=(pz)*(pz);
        IKReal x109=((6.43169584433781)*(x108));
        IKReal x110=(px)*(px);
        IKReal x111=((6.43169584433781)*(x110));
        IKReal x112=((x109)+(x107)+(x111));
        IKReal x113=((1.00000214988540)+(((-1.00000000000000)*(x112))));
        if( (x113) < -1.0001 || (x113) > 1.0001 )
            continue;
        IKReal x114=IKasin(x113);
        j3array[0]=((-1.66192655796100)+(((-1.00000000000000)*(x114))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.47966609562880)+(x114));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
        IKReal x115=((0.278529999999591)*(py)*(sj3));
        IKReal x116=((0.278529999999591)*(cj3)*(px)*(sj0));
        IKReal x117=((0.277949999999691)*(px)*(sj0));
        IKReal x118=((x117)+(x116)+(x115));
        IKReal x119=((0.0253999999999905)*(py));
        IKReal x120=((0.277949999999691)*(cj0)*(pz));
        IKReal x121=((1.00208670624124)*(cj3)*(x120));
        IKReal x122=((x120)+(x121)+(x119));
        IKReal x123=((((-1.00000000000000)*(x122)))+(x118));
        IKReal x124=((IKabs(x123) != 0)?((IKReal)1/(x123)):(IKReal)1.0e30);
        j1array[0]=IKatan2(((((-0.0774174134994610)*(sj3)*(x124)))+(((-141.644463896751)*(x117)*(x119)*(x124)))+(((0.00707466199997953)*(cj3)*(x124)))+(((0.00705992999996852)*(x124)))+(((-0.0775789608997002)*(cj3)*(sj3)*(x124)))+(((141.644463896751)*(x119)*(x120)*(x124)))), ((((0.154834826998922)*(cj3)*(x124)))+(((0.0772562024994841)*(x124)))+(((0.0775789608997002)*(x124)*((cj3)*(cj3))))+(((-1.00000000000000)*(x124)*((py)*(py))))));
        sj1array[0]=IKsin(j1array[0]);
        cj1array[0]=IKcos(j1array[0]);
        if( j1array[0] > IKPI )
            j1array[0]-=IK2PI;
        else if( j1array[0] < -IKPI )
            j1array[0]+=IK2PI;
        j1valid[0] = true;
        { int ij1 = 0;
        if( !j1valid[ij1] )
            continue;
        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
        
        _r00=((((cj1)*(cj3)*(r10)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)))+(((cj3)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
        _r01=((((cj3)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1))));
        _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12))));
        _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj3))));
        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj3)))+(((cj0)*(r21)*(sj1)*(sj3))));
        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj3)))+(((cj0)*(r22)*(sj1)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
        _r20=((((-1.00000000000000)*(cj0)*(r00)))+(((-1.00000000000000)*(r20)*(sj0))));
        _r21=((((-1.00000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(r21)*(sj0))));
        _r22=((((-1.00000000000000)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02))));
        {
        IKReal j5eval;
        j5eval=_r11;
        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
            {
            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
            {
            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4) {
            if( !j4valid[ij4] )
                continue;
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond;
                evalcond=IKcos(j4);
                if( IKabs(evalcond) < 0.00001 ) {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                { int ij5 = 0;
                if( !j5valid[ij5] )
                    continue;
                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x125=IKsin(j4);
                IKReal x126=((IKabs(x125) != 0)?((IKReal)1/(x125)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((_r00)*(x126)), ((_r02)*(x126)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                { int ij6 = 0;
                if( !j6valid[ij6] )
                    continue;
                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
                } else {
                if( 1 ) {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                { int ij5 = 0;
                if( !j5valid[ij5] )
                    continue;
                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x127=IKcos(j4);
                IKReal x128=(x127)*(x127);
                IKReal x129=IKcos(j5);
                IKReal x130=(x129)*(x129);
                IKReal x131=((x128)*(x130));
                IKReal x132=((1.00000000000000)+(((-1.00000000000000)*(x131))));
                IKReal x133=((IKabs(x132) != 0)?((IKReal)1/(x132)):(IKReal)1.0e30);
                IKReal x134=IKsin(j4);
                IKReal x135=IKsin(j5);
                j6array[0]=IKatan2(((((_r00)*(x133)*(x134)))+(((_r02)*(x127)*(x133)*(x135)))), ((((-1.00000000000000)*(_r00)*(x127)*(x133)*(x135)))+(((_r02)*(x133)*(x134)))));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                { int ij6 = 0;
                if( !j6valid[ij6] )
                    continue;
                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
                } else {
            }
            }
            }
            }
            }
            }
        }
        }
        }
        }
        }
        }
        }
        } else {
        evalcond=((j2)+(((-1.00000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x136=(px)*(px);
        IKReal x137=((6.45681049529230)*(x136));
        IKReal x138=(pz)*(pz);
        IKReal x139=((6.45681049529230)*(x138));
        IKReal x140=(py)*(py);
        IKReal x141=((6.45681049529230)*(x140));
        IKReal x142=((x137)+(x139)+(x141));
        IKReal x143=((1.00651053135516)+(((-1.00000000000000)*(x142))));
        if( (x143) < -1.0001 || (x143) > 1.0001 )
            continue;
        IKReal x144=IKasin(x143);
        j3array[0]=((-1.54795446462778)+(((-1.00000000000000)*(x144))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.59363818896201)+(x144));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j0eval[1];
            j0eval[0]=(((px)*(px))+((pz)*(pz)));
            if( IKabs(j0eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=(((px)*(px))+((pz)*(pz)));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[7];
                        IKReal x145=((0.278529999999591)*(sj3));
                        IKReal x146=((px)+(x145));
                        IKReal x147=((-0.00634999999999764)+(((-1.00000000000000)*(x146))));
                        j0eval[0]=x147;
                        j0eval[1]=x147;
                        j0eval[2]=x147;
                        j0eval[3]=x147;
                        j0eval[4]=((0.00634999999999764)+(x146));
                        j0eval[5]=x147;
                        j0eval[6]=x147;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  && IKabs(j0eval[5]) < 0.000100  && IKabs(j0eval[6]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x148=x138;
                            IKReal x149=x140;
                            IKReal x150=((x148)+(x149));
                            IKReal x151=((IKabs(x150) != 0)?((IKReal)1/(x150)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((-0.278529999999591)*(cj3)*(py)*(x151)))+(((-0.277949999999691)*(py)*(x151)))+(((-0.0317500000001019)*(pz)*(x151)))), ((((-0.278529999999591)*(cj3)*(pz)*(x151)))+(((-0.277949999999691)*(pz)*(x151)))+(((0.0317500000001019)*(py)*(x151)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                            _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                            _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                            _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                            _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x152=(sj4)*(sj4);
                                IKReal x153=(cj4)*(cj4);
                                IKReal x154=(sj5)*(sj5);
                                IKReal x155=((x153)*(x154));
                                IKReal x156=((x155)+(x152));
                                IKReal x157=((IKabs(x156) != 0)?((IKReal)1/(x156)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((((_r00)*(sj4)*(x157)))+(((_r02)*(cj4)*(sj5)*(x157)))), ((((_r02)*(sj4)*(x157)))+(((-1.00000000000000)*(_r00)*(cj4)*(sj5)*(x157)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[3];
                        IKReal x158=((0.0317500000001019)+(((-1.00000000000000)*(py))));
                        j1eval[0]=x158;
                        j1eval[1]=x158;
                        j1eval[2]=((-0.0317500000001019)+(py));
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1]={false};
                            IKReal x159=x136;
                            IKReal x160=x138;
                            IKReal x161=((x159)+(x160));
                            IKReal x162=((IKabs(x161) != 0)?((IKReal)1/(x161)):(IKReal)1.0e30);
                            j0array[0]=IKatan2(((((-0.278529999999591)*(pz)*(sj3)*(x162)))+(((-0.00634999999999764)*(pz)*(x162)))+(((0.278529999999591)*(cj3)*(px)*(x162)))+(((0.277949999999691)*(px)*(x162)))), ((((-0.278529999999591)*(cj3)*(pz)*(x162)))+(((-0.00634999999999764)*(px)*(x162)))+(((-0.277949999999691)*(pz)*(x162)))+(((-0.278529999999591)*(px)*(sj3)*(x162)))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            { int ij0 = 0;
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                            
                            _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                            _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                            _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                            _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                            _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x163=(sj4)*(sj4);
                                IKReal x164=(cj4)*(cj4);
                                IKReal x165=(sj5)*(sj5);
                                IKReal x166=((x164)*(x165));
                                IKReal x167=((x163)+(x166));
                                IKReal x168=((IKabs(x167) != 0)?((IKReal)1/(x167)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((((_r00)*(sj4)*(x168)))+(((_r02)*(cj4)*(sj5)*(x168)))), ((((-1.00000000000000)*(_r00)*(cj4)*(sj5)*(x168)))+(((_r02)*(sj4)*(x168)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j0array[2], cj0array[2], sj0array[2];
                    bool j0valid[2]={false};
                    IKReal x169=x136;
                    IKReal x170=x138;
                    IKReal x171=((x170)+(x169));
                    IKReal x172=((IKabs(x171) != 0)?(pow(x171,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x173=((0.278529999999591)*(sj3));
                    IKReal x174=((0.00634999999999764)+(x173));
                    IKReal x175=((x172)*(x174));
                    if( (x175) < -1.0001 || (x175) > 1.0001 )
                        continue;
                    IKReal x176=IKasin(x175);
                    IKReal x177=((-1.00000000000000)*(px));
                    IKReal x178=((-1.00000000000000)*(pz));
                    IKReal x179=IKatan2(x177, x178);
                    j0array[0]=((((-1.00000000000000)*(x179)))+(x176));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x179)))+(((-1.00000000000000)*(x176))));
                    sj0array[1]=IKsin(j0array[1]);
                    cj0array[1]=IKcos(j0array[1]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    if( j0array[1] > IKPI )
                        j0array[1]-=IK2PI;
                    else if( j0array[1] < -IKPI )
                        j0array[1]+=IK2PI;
                    j0valid[1] = true;
                    if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                        j0valid[1]=false;
                    for(int ij0 = 0; ij0 < 2; ++ij0) {
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x180=((0.0317500000001019)*(cj0)*(pz));
                    IKReal x181=((0.277949999999691)*(py));
                    IKReal x182=((1.00208670624124)*(cj3)*(x181));
                    IKReal x183=((0.0317500000001019)*(px)*(sj0));
                    IKReal x184=((x181)+(x182)+(x183));
                    IKReal x185=((x180)+(((-1.00000000000000)*(x184))));
                    IKReal x186=((IKabs(x185) != 0)?((IKReal)1/(x185)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((x186)*((py)*(py))))+(((-0.00100806250000574)*(x186)))), ((((113.315571118146)*(x180)*(x181)*(x186)))+(((-113.315571118146)*(x181)*(x183)*(x186)))+(((-0.00884332750001704)*(cj3)*(x186)))+(((-0.00882491250001749)*(x186)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                    _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                    _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                    _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                    _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                    _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                    {
                    IKReal j5eval;
                    j5eval=_r11;
                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x187=(sj4)*(sj4);
                        IKReal x188=(cj4)*(cj4);
                        IKReal x189=(sj5)*(sj5);
                        IKReal x190=((x188)*(x189));
                        IKReal x191=((x190)+(x187));
                        IKReal x192=((IKabs(x191) != 0)?((IKReal)1/(x191)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((((_r00)*(sj4)*(x192)))+(((_r02)*(cj4)*(sj5)*(x192)))), ((((_r02)*(sj4)*(x192)))+(((-1.00000000000000)*(_r00)*(cj4)*(sj5)*(x192)))));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x193=x136;
                IKReal x194=x138;
                IKReal x195=((x193)+(x194));
                IKReal x196=((IKabs(x195) != 0)?(pow(x195,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x197=((0.278529999999591)*(sj3));
                IKReal x198=((0.00634999999999764)+(x197));
                IKReal x199=((x196)*(x198));
                if( (x199) < -1.0001 || (x199) > 1.0001 )
                    continue;
                IKReal x200=IKasin(x199);
                IKReal x201=((-1.00000000000000)*(px));
                IKReal x202=((-1.00000000000000)*(pz));
                IKReal x203=IKatan2(x201, x202);
                j0array[0]=((((-1.00000000000000)*(x203)))+(x200));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x203)))+(((-1.00000000000000)*(x200))));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0) {
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x204=((0.0317500000001019)*(cj0)*(pz));
                IKReal x205=((0.277949999999691)*(py));
                IKReal x206=((1.00208670624124)*(cj3)*(x205));
                IKReal x207=((0.0317500000001019)*(px)*(sj0));
                IKReal x208=((x207)+(x206)+(x205));
                IKReal x209=((x204)+(((-1.00000000000000)*(x208))));
                IKReal x210=((IKabs(x209) != 0)?((IKReal)1/(x209)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((x210)*((py)*(py))))+(((-0.00100806250000574)*(x210)))), ((((-113.315571118146)*(x205)*(x207)*(x210)))+(((-0.00884332750001704)*(cj3)*(x210)))+(((-0.00882491250001749)*(x210)))+(((113.315571118146)*(x204)*(x205)*(x210)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                {
                IKReal j5eval;
                j5eval=_r11;
                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    { int ij5 = 0;
                    if( !j5valid[ij5] )
                        continue;
                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                    
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x211=(sj4)*(sj4);
                    IKReal x212=(cj4)*(cj4);
                    IKReal x213=(sj5)*(sj5);
                    IKReal x214=((x212)*(x213));
                    IKReal x215=((x211)+(x214));
                    IKReal x216=((IKabs(x215) != 0)?((IKReal)1/(x215)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((((_r02)*(cj4)*(sj5)*(x216)))+(((_r00)*(sj4)*(x216)))), ((((_r02)*(sj4)*(x216)))+(((-1.00000000000000)*(_r00)*(cj4)*(sj5)*(x216)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((j2)+(((0.500000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x217=((-1.00000000000000)*(px));
        IKReal x218=((-1.00000000000000)*(pz));
        IKReal x219=IKatan2(x217, x218);
        j0array[0]=((-1.00000000000000)*(x219));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x219))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0) {
        if( !j0valid[ij0] )
            continue;
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x220=(py)*(py);
        IKReal x221=((6.39866103045642)*(x220));
        IKReal x222=(pz)*(pz);
        IKReal x223=((6.39866103045642)*(x222));
        IKReal x224=(px)*(px);
        IKReal x225=((6.39866103045642)*(x224));
        IKReal x226=((x221)+(x223)+(x225));
        IKReal x227=((1.00002608651994)+(((-1.00000000000000)*(x226))));
        if( (x227) < -1.0001 || (x227) > 1.0001 )
            continue;
        IKReal x228=IKasin(x227);
        j3array[0]=((-1.43457028889960)+(((-1.00000000000000)*(x228))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.70702236469019)+(x228));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
        IKReal x229=((0.278529999999591)*(cj3)*(px)*(sj0));
        IKReal x230=((0.277949999999691)*(px)*(sj0));
        IKReal x231=((x230)+(x229));
        IKReal x232=((0.278529999999591)*(py)*(sj3));
        IKReal x233=((0.277949999999691)*(cj0)*(pz));
        IKReal x234=((1.00208670624124)*(cj3)*(x233));
        IKReal x235=((0.0381000000002132)*(py));
        IKReal x236=((x232)+(x233)+(x234)+(x235));
        IKReal x237=((((-1.00000000000000)*(x236)))+(x231));
        IKReal x238=((IKabs(x237) != 0)?((IKReal)1/(x237)):(IKReal)1.0e30);
        j1array[0]=IKatan2(((((-94.4296425972134)*(x230)*(x235)*(x238)))+(((0.0106119929999977)*(cj3)*(x238)))+(((94.4296425972134)*(x233)*(x235)*(x238)))+(((0.0775789608997002)*(cj3)*(sj3)*(x238)))+(((0.0105898950000665)*(x238)))+(((0.0774174134994610)*(sj3)*(x238)))), ((((-1.00000000000000)*(x238)*((py)*(py))))+(((0.154834826998922)*(cj3)*(x238)))+(((0.0775789608997002)*(x238)*((cj3)*(cj3))))+(((0.0772562024994841)*(x238)))));
        sj1array[0]=IKsin(j1array[0]);
        cj1array[0]=IKcos(j1array[0]);
        if( j1array[0] > IKPI )
            j1array[0]-=IK2PI;
        else if( j1array[0] < -IKPI )
            j1array[0]+=IK2PI;
        j1valid[0] = true;
        { int ij1 = 0;
        if( !j1valid[ij1] )
            continue;
        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
        
        _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r10)))+(((cj0)*(cj3)*(r20)*(sj1)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
        _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r21)*(sj1)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0)*(sj1))));
        _r02=((((cj0)*(cj3)*(r22)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r12)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
        _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((r00)*(sj0)*(sj1)*(sj3)))+(((cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((r01)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj1)*(r11)*(sj3))));
        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1)*(sj3)))+(((cj1)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((r02)*(sj0)*(sj1)*(sj3))));
        _r20=((((r20)*(sj0)))+(((cj0)*(r00))));
        _r21=((((r21)*(sj0)))+(((cj0)*(r01))));
        _r22=((((cj0)*(r02)))+(((r22)*(sj0))));
        {
        IKReal j5eval;
        j5eval=_r11;
        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
            {
            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
            {
            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4) {
            if( !j4valid[ij4] )
                continue;
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal j5array[1], cj5array[1], sj5array[1];
            bool j5valid[1]={false};
            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
            sj5array[0]=IKsin(j5array[0]);
            cj5array[0]=IKcos(j5array[0]);
            if( j5array[0] > IKPI )
                j5array[0]-=IK2PI;
            else if( j5array[0] < -IKPI )
                j5array[0]+=IK2PI;
            j5valid[0] = true;
            { int ij5 = 0;
            if( !j5valid[ij5] )
                continue;
            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
            
            {
            IKReal j6array[1], cj6array[1], sj6array[1];
            bool j6valid[1]={false};
            IKReal x239=(sj4)*(sj4);
            IKReal x240=(cj4)*(cj4);
            IKReal x241=(sj5)*(sj5);
            IKReal x242=((x240)*(x241));
            IKReal x243=((x239)+(x242));
            IKReal x244=((IKabs(x243) != 0)?((IKReal)1/(x243)):(IKReal)1.0e30);
            j6array[0]=IKatan2(((((_r00)*(sj4)*(x244)))+(((_r02)*(cj4)*(sj5)*(x244)))), ((((_r02)*(sj4)*(x244)))+(((-1.00000000000000)*(_r00)*(cj4)*(sj5)*(x244)))));
            sj6array[0]=IKsin(j6array[0]);
            cj6array[0]=IKcos(j6array[0]);
            if( j6array[0] > IKPI )
                j6array[0]-=IK2PI;
            else if( j6array[0] < -IKPI )
                j6array[0]+=IK2PI;
            j6valid[0] = true;
            { int ij6 = 0;
            if( !j6valid[ij6] )
                continue;
            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
            
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.vfree.resize(0);
            }
            }
            }
            }
            }
            }
            }
        }
        }
        }
        }
        }
        }
        }
        } else {
        if( 1 ) {
        {
            IKReal j3eval[1];
            j3eval[0]=((0.0239738236518861)+((((0.00353733099998976)+(((-0.0176866550000341)*(sj2)))))*(((0.00353733099998976)+(((-0.0176866550000341)*(sj2)))))));
            if( IKabs(j3eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=((0.0239738236518861)+((((0.00353733099998976)+(((-0.0176866550000341)*(sj2)))))*(((0.00353733099998976)+(((-0.0176866550000341)*(sj2)))))));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[0];
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[0];
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j3eval[0];
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j3array[2], cj3array[2], sj3array[2];
                    bool j3valid[2]={false};
                    IKReal x245=((0.0176866550000341)*(sj2));
                    IKReal x246=((0.00353733099998976)+(((-1.00000000000000)*(x245))));
                    IKReal x247=(px)*(px);
                    IKReal x248=((0.0227982623055141)*(x245));
                    IKReal x249=(pz)*(pz);
                    IKReal x250=(py)*(py);
                    IKReal x251=((x250)+(x247)+(x249)+(x248));
                    IKReal x252=((0.155883548399288)+(((-1.00000000000000)*(x251))));
                    IKReal x253=(x246)*(x246);
                    IKReal x254=((0.0239738236518861)+(x253));
                    IKReal x255=((IKabs(x254) != 0)?(pow(x254,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x256=((x252)*(x255));
                    if( (x256) < -1.0001 || (x256) > 1.0001 )
                        continue;
                    IKReal x257=IKasin(x256);
                    IKReal x258=IKatan2(0.154834826998922, x246);
                    j3array[0]=((((-1.00000000000000)*(x258)))+(((-1.00000000000000)*(x257))));
                    sj3array[0]=IKsin(j3array[0]);
                    cj3array[0]=IKcos(j3array[0]);
                    j3array[1]=((3.14159265358979)+(((-1.00000000000000)*(x258)))+(x257));
                    sj3array[1]=IKsin(j3array[1]);
                    cj3array[1]=IKcos(j3array[1]);
                    if( j3array[0] > IKPI )
                        j3array[0]-=IK2PI;
                    else if( j3array[0] < -IKPI )
                        j3array[0]+=IK2PI;
                    j3valid[0] = true;
                    if( j3array[1] > IKPI )
                        j3array[1]-=IK2PI;
                    else if( j3array[1] < -IKPI )
                        j3array[1]+=IK2PI;
                    j3valid[1] = true;
                    if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                        j3valid[1]=false;
                    for(int ij3 = 0; ij3 < 2; ++ij3) {
                    if( !j3valid[ij3] )
                        continue;
                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                    
                    {
                        IKReal j0eval[1];
                        j0eval[0]=(((px)*(px))+((pz)*(pz)));
                        if( IKabs(j0eval[0]) < 0.000010  ) {
                            {
                            IKReal evalcond;
                                evalcond=(((px)*(px))+((pz)*(pz)));
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                    IKReal j0eval[5];
                                    IKReal x259=((0.278529999999591)*(cj2)*(sj3));
                                    IKReal x260=((0.00634999999999764)*(cj2));
                                    IKReal x261=((x259)+(x260));
                                    IKReal x262=((((-1.00000000000000)*(px)))+(x261));
                                    j0eval[0]=x262;
                                    j0eval[1]=x262;
                                    j0eval[2]=x262;
                                    j0eval[3]=x262;
                                    j0eval[4]=((px)+(((-1.00000000000000)*(x261))));
                                    if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  ) {
                                        {
                                        j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        IKReal x263=x249;
                                        IKReal x264=x250;
                                        IKReal x265=((x264)+(x263));
                                        IKReal x266=((IKabs(x265) != 0)?((IKReal)1/(x265)):(IKReal)1.0e30);
                                        j1array[0]=IKatan2(((((-0.277949999999691)*(py)*(x266)))+(((-0.278529999999591)*(cj3)*(py)*(x266)))+(((0.278529999999591)*(pz)*(sj2)*(sj3)*(x266)))+(((-0.0317500000001019)*(pz)*(x266)))+(((0.00634999999999764)*(pz)*(sj2)*(x266)))), ((((-0.278529999999591)*(py)*(sj2)*(sj3)*(x266)))+(((-0.00634999999999764)*(py)*(sj2)*(x266)))+(((0.0317500000001019)*(py)*(x266)))+(((-0.277949999999691)*(pz)*(x266)))+(((-0.278529999999591)*(cj3)*(pz)*(x266)))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        { int ij1 = 0;
                                        if( !j1valid[ij1] )
                                            continue;
                                        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                        
                                        _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                        _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                        _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                        _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                        _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                        _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                        _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                        {
                                        IKReal j5eval;
                                        j5eval=_r11;
                                        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                            {
                                            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=1.00000000000000;
                                            j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                            {
                                            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=-1.00000000000000;
                                            j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else {
                                            {
                                            IKReal j4array[2], cj4array[2], sj4array[2];
                                            bool j4valid[2]={false};
                                            j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                            sj4array[0]=IKsin(j4array[0]);
                                            cj4array[0]=IKcos(j4array[0]);
                                            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                            sj4array[1] = -sj4array[0];
                                            cj4array[1] = -cj4array[0];
                                            if( j4array[0] > IKPI )
                                                j4array[0]-=IK2PI;
                                            else if( j4array[0] < -IKPI )
                                                j4array[0]+=IK2PI;
                                            j4valid[0] = true;
                                            if( j4array[1] > IKPI )
                                                j4array[1]-=IK2PI;
                                            else if( j4array[1] < -IKPI )
                                                j4array[1]+=IK2PI;
                                            j4valid[1] = true;
                                            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                                j4valid[1]=false;
                                            for(int ij4 = 0; ij4 < 2; ++ij4) {
                                            if( !j4valid[ij4] )
                                                continue;
                                            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                            
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j4);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x267=IKsin(j4);
                                                IKReal x268=((IKabs(x267) != 0)?((IKReal)1/(x267)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((_r00)*(x268)), ((_r02)*(x268)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x269=IKcos(j4);
                                                IKReal x270=(x269)*(x269);
                                                IKReal x271=IKcos(j5);
                                                IKReal x272=(x271)*(x271);
                                                IKReal x273=((x270)*(x272));
                                                IKReal x274=((1.00000000000000)+(((-1.00000000000000)*(x273))));
                                                IKReal x275=((IKabs(x274) != 0)?((IKReal)1/(x274)):(IKReal)1.0e30);
                                                IKReal x276=IKsin(j4);
                                                IKReal x277=IKsin(j5);
                                                j6array[0]=IKatan2(((((_r02)*(x269)*(x275)*(x277)))+(((_r00)*(x275)*(x276)))), ((((_r02)*(x275)*(x276)))+(((-1.00000000000000)*(_r00)*(x269)*(x275)*(x277)))));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            }
                                            }
                                            }
                                        }
                                        }
                                        }
                                        }
                                        
                                    } else
                                    {
                                        continue;
                                        
                                    }
                                    }
                                {
                                    IKReal j1eval[5];
                                    IKReal x278=((0.00634999999999764)*(sj2));
                                    IKReal x279=((43.8629921260290)*(sj3)*(x278));
                                    IKReal x280=((x278)+(x279)+(py));
                                    IKReal x281=((0.0317500000001019)+(((-1.00000000000000)*(x280))));
                                    IKReal x282=((-0.0317500000001019)+(x280));
                                    j1eval[0]=x281;
                                    j1eval[1]=x281;
                                    j1eval[2]=x282;
                                    j1eval[3]=x282;
                                    j1eval[4]=x282;
                                    if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  ) {
                                        {
                                        j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                                        {
                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                        bool j0valid[1]={false};
                                        IKReal x283=x249;
                                        IKReal x284=((sj2)*(x283));
                                        IKReal x285=x247;
                                        IKReal x286=((sj2)*(x285));
                                        IKReal x287=((x286)+(x284));
                                        IKReal x288=((IKabs(x287) != 0)?((IKReal)1/(x287)):(IKReal)1.0e30);
                                        j0array[0]=IKatan2(((((0.277949999999691)*(px)*(sj2)*(x288)))+(((0.278529999999591)*(cj3)*(px)*(sj2)*(x288)))+(((0.0317500000001019)*(cj2)*(pz)*(x288)))+(((-1.00000000000000)*(cj2)*(py)*(pz)*(x288)))), ((((0.0317500000001019)*(cj2)*(px)*(x288)))+(((-0.277949999999691)*(pz)*(sj2)*(x288)))+(((-1.00000000000000)*(cj2)*(px)*(py)*(x288)))+(((-0.278529999999591)*(cj3)*(pz)*(sj2)*(x288)))));
                                        sj0array[0]=IKsin(j0array[0]);
                                        cj0array[0]=IKcos(j0array[0]);
                                        if( j0array[0] > IKPI )
                                            j0array[0]-=IK2PI;
                                        else if( j0array[0] < -IKPI )
                                            j0array[0]+=IK2PI;
                                        j0valid[0] = true;
                                        { int ij0 = 0;
                                        if( !j0valid[ij0] )
                                            continue;
                                        j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                                        
                                        _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                        _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                        _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                        _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                        _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                        _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                        _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                        {
                                        IKReal j5eval;
                                        j5eval=_r11;
                                        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                            {
                                            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=1.00000000000000;
                                            j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                            {
                                            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=-1.00000000000000;
                                            j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else {
                                            {
                                            IKReal j4array[2], cj4array[2], sj4array[2];
                                            bool j4valid[2]={false};
                                            j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                            sj4array[0]=IKsin(j4array[0]);
                                            cj4array[0]=IKcos(j4array[0]);
                                            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                            sj4array[1] = -sj4array[0];
                                            cj4array[1] = -cj4array[0];
                                            if( j4array[0] > IKPI )
                                                j4array[0]-=IK2PI;
                                            else if( j4array[0] < -IKPI )
                                                j4array[0]+=IK2PI;
                                            j4valid[0] = true;
                                            if( j4array[1] > IKPI )
                                                j4array[1]-=IK2PI;
                                            else if( j4array[1] < -IKPI )
                                                j4array[1]+=IK2PI;
                                            j4valid[1] = true;
                                            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                                j4valid[1]=false;
                                            for(int ij4 = 0; ij4 < 2; ++ij4) {
                                            if( !j4valid[ij4] )
                                                continue;
                                            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                            
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j4);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x289=IKsin(j4);
                                                IKReal x290=((IKabs(x289) != 0)?((IKReal)1/(x289)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((_r00)*(x290)), ((_r02)*(x290)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x291=IKcos(j4);
                                                IKReal x292=(x291)*(x291);
                                                IKReal x293=IKcos(j5);
                                                IKReal x294=(x293)*(x293);
                                                IKReal x295=((x292)*(x294));
                                                IKReal x296=((1.00000000000000)+(((-1.00000000000000)*(x295))));
                                                IKReal x297=((IKabs(x296) != 0)?((IKReal)1/(x296)):(IKReal)1.0e30);
                                                IKReal x298=IKsin(j4);
                                                IKReal x299=IKsin(j5);
                                                j6array[0]=IKatan2(((((_r02)*(x291)*(x297)*(x299)))+(((_r00)*(x297)*(x298)))), ((((-1.00000000000000)*(_r00)*(x291)*(x297)*(x299)))+(((_r02)*(x297)*(x298)))));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            }
                                            }
                                            }
                                        }
                                        }
                                        }
                                        }
                                        
                                    } else
                                    {
                                        continue;
                                        
                                    }
                                    }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j0array[2], cj0array[2], sj0array[2];
                                bool j0valid[2]={false};
                                IKReal x300=x247;
                                IKReal x301=x249;
                                IKReal x302=((x300)+(x301));
                                IKReal x303=((IKabs(x302) != 0)?(pow(x302,-0.500000000000000)):(IKReal)1.0e30);
                                IKReal x304=((0.278529999999591)*(cj2)*(sj3));
                                IKReal x305=((0.00634999999999764)*(cj2));
                                IKReal x306=((x304)+(x305));
                                IKReal x307=((x303)*(x306));
                                if( (x307) < -1.0001 || (x307) > 1.0001 )
                                    continue;
                                IKReal x308=IKasin(x307);
                                IKReal x309=((-1.00000000000000)*(px));
                                IKReal x310=((-1.00000000000000)*(pz));
                                IKReal x311=IKatan2(x309, x310);
                                j0array[0]=((((-1.00000000000000)*(x308)))+(((-1.00000000000000)*(x311))));
                                sj0array[0]=IKsin(j0array[0]);
                                cj0array[0]=IKcos(j0array[0]);
                                j0array[1]=((3.14159265358979)+(x308)+(((-1.00000000000000)*(x311))));
                                sj0array[1]=IKsin(j0array[1]);
                                cj0array[1]=IKcos(j0array[1]);
                                if( j0array[0] > IKPI )
                                    j0array[0]-=IK2PI;
                                else if( j0array[0] < -IKPI )
                                    j0array[0]+=IK2PI;
                                j0valid[0] = true;
                                if( j0array[1] > IKPI )
                                    j0array[1]-=IK2PI;
                                else if( j0array[1] < -IKPI )
                                    j0array[1]+=IK2PI;
                                j0valid[1] = true;
                                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                    j0valid[1]=false;
                                for(int ij0 = 0; ij0 < 2; ++ij0) {
                                if( !j0valid[ij0] )
                                    continue;
                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                
                                {
                                IKReal evalcond;
                                    evalcond=j0;
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x312=x249;
                                    IKReal x313=x250;
                                    IKReal x314=((x313)+(x312));
                                    IKReal x315=((IKabs(x314) != 0)?((IKReal)1/(x314)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((((-0.0317500000001019)*(pz)*(x315)))+(((-0.278529999999591)*(cj3)*(py)*(x315)))+(((-0.277949999999691)*(py)*(x315)))+(((0.278529999999591)*(pz)*(sj2)*(sj3)*(x315)))+(((0.00634999999999764)*(pz)*(sj2)*(x315)))), ((((-0.278529999999591)*(cj3)*(pz)*(x315)))+(((0.0317500000001019)*(py)*(x315)))+(((-0.00634999999999764)*(py)*(sj2)*(x315)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x315)))+(((-0.277949999999691)*(pz)*(x315)))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    { int ij1 = 0;
                                    if( !j1valid[ij1] )
                                        continue;
                                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[2], cj4array[2], sj4array[2];
                                        bool j4valid[2]={false};
                                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                        sj4array[1] = -sj4array[0];
                                        cj4array[1] = -cj4array[0];
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        if( j4array[1] > IKPI )
                                            j4array[1]-=IK2PI;
                                        else if( j4array[1] < -IKPI )
                                            j4array[1]+=IK2PI;
                                        j4valid[1] = true;
                                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                            j4valid[1]=false;
                                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x316=IKsin(j4);
                                            IKReal x317=((IKabs(x316) != 0)?((IKReal)1/(x316)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r00)*(x317)), ((_r02)*(x317)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x318=IKcos(j4);
                                            IKReal x319=(x318)*(x318);
                                            IKReal x320=IKcos(j5);
                                            IKReal x321=(x320)*(x320);
                                            IKReal x322=((x319)*(x321));
                                            IKReal x323=((1.00000000000000)+(((-1.00000000000000)*(x322))));
                                            IKReal x324=((IKabs(x323) != 0)?((IKReal)1/(x323)):(IKReal)1.0e30);
                                            IKReal x325=IKsin(j4);
                                            IKReal x326=IKsin(j5);
                                            j6array[0]=IKatan2(((((_r00)*(x324)*(x325)))+(((_r02)*(x318)*(x324)*(x326)))), ((((-1.00000000000000)*(_r00)*(x318)*(x324)*(x326)))+(((_r02)*(x324)*(x325)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x327=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                                    IKReal x328=x247;
                                    IKReal x329=(cj0)*(cj0);
                                    IKReal x330=x249;
                                    IKReal x331=((x327)*(x329)*(x330));
                                    IKReal x332=x250;
                                    IKReal x333=((x327)*(x332));
                                    IKReal x334=((x328)+(x333)+(x331));
                                    IKReal x335=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                                    IKReal x336=((2.00000000000000)*(cj0)*(px)*(pz)*(x335));
                                    IKReal x337=((x334)+(((-1.00000000000000)*(x336))));
                                    IKReal x338=((IKabs(x337) != 0)?((IKReal)1/(x337)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((((-0.277949999999691)*(py)*(x327)*(x338)))+(((-0.278529999999591)*(cj3)*(py)*(x327)*(x338)))+(((-0.0317500000001019)*(cj0)*(pz)*(x327)*(x338)))+(((0.0317500000001019)*(px)*(x335)*(x338)))+(((-0.278529999999591)*(px)*(sj2)*(sj3)*(x335)*(x338)))+(((0.278529999999591)*(cj0)*(pz)*(sj2)*(sj3)*(x327)*(x338)))+(((0.00634999999999764)*(cj0)*(pz)*(sj2)*(x327)*(x338)))+(((-0.00634999999999764)*(px)*(sj2)*(x335)*(x338)))), ((((0.278529999999591)*(cj3)*(px)*(x335)*(x338)))+(((0.0317500000001019)*(py)*(x327)*(x338)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x327)*(x338)))+(((0.277949999999691)*(px)*(x335)*(x338)))+(((-0.278529999999591)*(cj0)*(cj3)*(pz)*(x327)*(x338)))+(((-0.00634999999999764)*(py)*(sj2)*(x327)*(x338)))+(((-0.277949999999691)*(cj0)*(pz)*(x327)*(x338)))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    { int ij1 = 0;
                                    if( !j1valid[ij1] )
                                        continue;
                                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[2], cj4array[2], sj4array[2];
                                        bool j4valid[2]={false};
                                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                        sj4array[1] = -sj4array[0];
                                        cj4array[1] = -cj4array[0];
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        if( j4array[1] > IKPI )
                                            j4array[1]-=IK2PI;
                                        else if( j4array[1] < -IKPI )
                                            j4array[1]+=IK2PI;
                                        j4valid[1] = true;
                                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                            j4valid[1]=false;
                                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x339=IKsin(j4);
                                            IKReal x340=((IKabs(x339) != 0)?((IKReal)1/(x339)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r00)*(x340)), ((_r02)*(x340)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x341=IKcos(j4);
                                            IKReal x342=(x341)*(x341);
                                            IKReal x343=IKcos(j5);
                                            IKReal x344=(x343)*(x343);
                                            IKReal x345=((x342)*(x344));
                                            IKReal x346=((1.00000000000000)+(((-1.00000000000000)*(x345))));
                                            IKReal x347=((IKabs(x346) != 0)?((IKReal)1/(x346)):(IKReal)1.0e30);
                                            IKReal x348=IKsin(j4);
                                            IKReal x349=IKsin(j5);
                                            j6array[0]=IKatan2(((((_r02)*(x341)*(x347)*(x349)))+(((_r00)*(x347)*(x348)))), ((((-1.00000000000000)*(_r00)*(x341)*(x347)*(x349)))+(((_r02)*(x347)*(x348)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            
                        } else
                        {
                            {
                            IKReal j0array[2], cj0array[2], sj0array[2];
                            bool j0valid[2]={false};
                            IKReal x350=x247;
                            IKReal x351=x249;
                            IKReal x352=((x351)+(x350));
                            IKReal x353=((IKabs(x352) != 0)?(pow(x352,-0.500000000000000)):(IKReal)1.0e30);
                            IKReal x354=((0.278529999999591)*(cj2)*(sj3));
                            IKReal x355=((0.00634999999999764)*(cj2));
                            IKReal x356=((x355)+(x354));
                            IKReal x357=((x353)*(x356));
                            if( (x357) < -1.0001 || (x357) > 1.0001 )
                                continue;
                            IKReal x358=IKasin(x357);
                            IKReal x359=((-1.00000000000000)*(px));
                            IKReal x360=((-1.00000000000000)*(pz));
                            IKReal x361=IKatan2(x359, x360);
                            j0array[0]=((((-1.00000000000000)*(x361)))+(((-1.00000000000000)*(x358))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x361)))+(x358));
                            sj0array[1]=IKsin(j0array[1]);
                            cj0array[1]=IKcos(j0array[1]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            if( j0array[1] > IKPI )
                                j0array[1]-=IK2PI;
                            else if( j0array[1] < -IKPI )
                                j0array[1]+=IK2PI;
                            j0valid[1] = true;
                            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                j0valid[1]=false;
                            for(int ij0 = 0; ij0 < 2; ++ij0) {
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                            
                            {
                            IKReal evalcond;
                                evalcond=j0;
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x362=x249;
                                IKReal x363=x250;
                                IKReal x364=((x362)+(x363));
                                IKReal x365=((IKabs(x364) != 0)?((IKReal)1/(x364)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((-0.0317500000001019)*(pz)*(x365)))+(((0.00634999999999764)*(pz)*(sj2)*(x365)))+(((-0.277949999999691)*(py)*(x365)))+(((-0.278529999999591)*(cj3)*(py)*(x365)))+(((0.278529999999591)*(pz)*(sj2)*(sj3)*(x365)))), ((((-0.00634999999999764)*(py)*(sj2)*(x365)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x365)))+(((-0.278529999999591)*(cj3)*(pz)*(x365)))+(((-0.277949999999691)*(pz)*(x365)))+(((0.0317500000001019)*(py)*(x365)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x366=IKsin(j4);
                                        IKReal x367=((IKabs(x366) != 0)?((IKReal)1/(x366)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r00)*(x367)), ((_r02)*(x367)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x368=IKcos(j4);
                                        IKReal x369=(x368)*(x368);
                                        IKReal x370=IKcos(j5);
                                        IKReal x371=(x370)*(x370);
                                        IKReal x372=((x369)*(x371));
                                        IKReal x373=((1.00000000000000)+(((-1.00000000000000)*(x372))));
                                        IKReal x374=((IKabs(x373) != 0)?((IKReal)1/(x373)):(IKReal)1.0e30);
                                        IKReal x375=IKsin(j4);
                                        IKReal x376=IKsin(j5);
                                        j6array[0]=IKatan2(((((_r02)*(x368)*(x374)*(x376)))+(((_r00)*(x374)*(x375)))), ((((_r02)*(x374)*(x375)))+(((-1.00000000000000)*(_r00)*(x368)*(x374)*(x376)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x377=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x378=x247;
                                IKReal x379=(cj0)*(cj0);
                                IKReal x380=x249;
                                IKReal x381=((x377)*(x379)*(x380));
                                IKReal x382=x250;
                                IKReal x383=((x377)*(x382));
                                IKReal x384=((x383)+(x381)+(x378));
                                IKReal x385=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                                IKReal x386=((2.00000000000000)*(cj0)*(px)*(pz)*(x385));
                                IKReal x387=((x384)+(((-1.00000000000000)*(x386))));
                                IKReal x388=((IKabs(x387) != 0)?((IKReal)1/(x387)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((0.00634999999999764)*(cj0)*(pz)*(sj2)*(x377)*(x388)))+(((-0.278529999999591)*(px)*(sj2)*(sj3)*(x385)*(x388)))+(((0.278529999999591)*(cj0)*(pz)*(sj2)*(sj3)*(x377)*(x388)))+(((-0.00634999999999764)*(px)*(sj2)*(x385)*(x388)))+(((-0.277949999999691)*(py)*(x377)*(x388)))+(((-0.0317500000001019)*(cj0)*(pz)*(x377)*(x388)))+(((0.0317500000001019)*(px)*(x385)*(x388)))+(((-0.278529999999591)*(cj3)*(py)*(x377)*(x388)))), ((((-0.277949999999691)*(cj0)*(pz)*(x377)*(x388)))+(((0.277949999999691)*(px)*(x385)*(x388)))+(((0.0317500000001019)*(py)*(x377)*(x388)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x377)*(x388)))+(((-0.278529999999591)*(cj0)*(cj3)*(pz)*(x377)*(x388)))+(((-0.00634999999999764)*(py)*(sj2)*(x377)*(x388)))+(((0.278529999999591)*(cj3)*(px)*(x385)*(x388)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x389=IKsin(j4);
                                        IKReal x390=((IKabs(x389) != 0)?((IKReal)1/(x389)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r00)*(x390)), ((_r02)*(x390)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x391=IKcos(j4);
                                        IKReal x392=(x391)*(x391);
                                        IKReal x393=IKcos(j5);
                                        IKReal x394=(x393)*(x393);
                                        IKReal x395=((x392)*(x394));
                                        IKReal x396=((1.00000000000000)+(((-1.00000000000000)*(x395))));
                                        IKReal x397=((IKabs(x396) != 0)?((IKReal)1/(x396)):(IKReal)1.0e30);
                                        IKReal x398=IKsin(j4);
                                        IKReal x399=IKsin(j5);
                                        j6array[0]=IKatan2(((((_r00)*(x397)*(x398)))+(((_r02)*(x391)*(x397)*(x399)))), ((((_r02)*(x397)*(x398)))+(((-1.00000000000000)*(_r00)*(x391)*(x397)*(x399)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            
                        }
                        }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j3array[2], cj3array[2], sj3array[2];
                bool j3valid[2]={false};
                IKReal x400=((0.0176866550000341)*(sj2));
                IKReal x401=((0.00353733099998976)+(((-1.00000000000000)*(x400))));
                IKReal x402=(px)*(px);
                IKReal x403=((0.0227982623055141)*(x400));
                IKReal x404=(pz)*(pz);
                IKReal x405=(py)*(py);
                IKReal x406=((x403)+(x402)+(x405)+(x404));
                IKReal x407=((0.155883548399288)+(((-1.00000000000000)*(x406))));
                IKReal x408=(x401)*(x401);
                IKReal x409=((0.0239738236518861)+(x408));
                IKReal x410=((IKabs(x409) != 0)?(pow(x409,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x411=((x407)*(x410));
                if( (x411) < -1.0001 || (x411) > 1.0001 )
                    continue;
                IKReal x412=IKasin(x411);
                IKReal x413=IKatan2(0.154834826998922, x401);
                j3array[0]=((((-1.00000000000000)*(x412)))+(((-1.00000000000000)*(x413))));
                sj3array[0]=IKsin(j3array[0]);
                cj3array[0]=IKcos(j3array[0]);
                j3array[1]=((3.14159265358979)+(((-1.00000000000000)*(x413)))+(x412));
                sj3array[1]=IKsin(j3array[1]);
                cj3array[1]=IKcos(j3array[1]);
                if( j3array[0] > IKPI )
                    j3array[0]-=IK2PI;
                else if( j3array[0] < -IKPI )
                    j3array[0]+=IK2PI;
                j3valid[0] = true;
                if( j3array[1] > IKPI )
                    j3array[1]-=IK2PI;
                else if( j3array[1] < -IKPI )
                    j3array[1]+=IK2PI;
                j3valid[1] = true;
                if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                    j3valid[1]=false;
                for(int ij3 = 0; ij3 < 2; ++ij3) {
                if( !j3valid[ij3] )
                    continue;
                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                
                {
                    IKReal j0eval[1];
                    j0eval[0]=(((px)*(px))+((pz)*(pz)));
                    if( IKabs(j0eval[0]) < 0.000010  ) {
                        {
                        IKReal evalcond;
                            evalcond=(((px)*(px))+((pz)*(pz)));
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                                IKReal j0eval[5];
                                IKReal x414=((0.278529999999591)*(cj2)*(sj3));
                                IKReal x415=((0.00634999999999764)*(cj2));
                                IKReal x416=((x414)+(x415));
                                IKReal x417=((((-1.00000000000000)*(px)))+(x416));
                                j0eval[0]=x417;
                                j0eval[1]=x417;
                                j0eval[2]=x417;
                                j0eval[3]=x417;
                                j0eval[4]=((((-1.00000000000000)*(x416)))+(px));
                                if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  ) {
                                    {
                                    j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x418=x404;
                                    IKReal x419=x405;
                                    IKReal x420=((x418)+(x419));
                                    IKReal x421=((IKabs(x420) != 0)?((IKReal)1/(x420)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((((-0.0317500000001019)*(pz)*(x421)))+(((0.00634999999999764)*(pz)*(sj2)*(x421)))+(((-0.277949999999691)*(py)*(x421)))+(((-0.278529999999591)*(cj3)*(py)*(x421)))+(((0.278529999999591)*(pz)*(sj2)*(sj3)*(x421)))), ((((0.0317500000001019)*(py)*(x421)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x421)))+(((-0.278529999999591)*(cj3)*(pz)*(x421)))+(((-0.00634999999999764)*(py)*(sj2)*(x421)))+(((-0.277949999999691)*(pz)*(x421)))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    { int ij1 = 0;
                                    if( !j1valid[ij1] )
                                        continue;
                                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[2], cj4array[2], sj4array[2];
                                        bool j4valid[2]={false};
                                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                        sj4array[1] = -sj4array[0];
                                        cj4array[1] = -cj4array[0];
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        if( j4array[1] > IKPI )
                                            j4array[1]-=IK2PI;
                                        else if( j4array[1] < -IKPI )
                                            j4array[1]+=IK2PI;
                                        j4valid[1] = true;
                                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                            j4valid[1]=false;
                                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x422=IKsin(j4);
                                            IKReal x423=((IKabs(x422) != 0)?((IKReal)1/(x422)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r00)*(x423)), ((_r02)*(x423)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x424=IKcos(j4);
                                            IKReal x425=(x424)*(x424);
                                            IKReal x426=IKcos(j5);
                                            IKReal x427=(x426)*(x426);
                                            IKReal x428=((x425)*(x427));
                                            IKReal x429=((1.00000000000000)+(((-1.00000000000000)*(x428))));
                                            IKReal x430=((IKabs(x429) != 0)?((IKReal)1/(x429)):(IKReal)1.0e30);
                                            IKReal x431=IKsin(j4);
                                            IKReal x432=IKsin(j5);
                                            j6array[0]=IKatan2(((((_r00)*(x430)*(x431)))+(((_r02)*(x424)*(x430)*(x432)))), ((((-1.00000000000000)*(_r00)*(x424)*(x430)*(x432)))+(((_r02)*(x430)*(x431)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    }
                                    
                                } else
                                {
                                    continue;
                                    
                                }
                                }
                            {
                                IKReal j1eval[5];
                                IKReal x433=((0.00634999999999764)*(sj2));
                                IKReal x434=((43.8629921260290)*(sj3)*(x433));
                                IKReal x435=((x433)+(x434)+(py));
                                IKReal x436=((0.0317500000001019)+(((-1.00000000000000)*(x435))));
                                IKReal x437=((-0.0317500000001019)+(x435));
                                j1eval[0]=x436;
                                j1eval[1]=x436;
                                j1eval[2]=x437;
                                j1eval[3]=x437;
                                j1eval[4]=x437;
                                if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  ) {
                                    {
                                    j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                                    {
                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                    bool j0valid[1]={false};
                                    IKReal x438=x404;
                                    IKReal x439=((sj2)*(x438));
                                    IKReal x440=x402;
                                    IKReal x441=((sj2)*(x440));
                                    IKReal x442=((x439)+(x441));
                                    IKReal x443=((IKabs(x442) != 0)?((IKReal)1/(x442)):(IKReal)1.0e30);
                                    j0array[0]=IKatan2(((((0.0317500000001019)*(cj2)*(pz)*(x443)))+(((0.278529999999591)*(cj3)*(px)*(sj2)*(x443)))+(((-1.00000000000000)*(cj2)*(py)*(pz)*(x443)))+(((0.277949999999691)*(px)*(sj2)*(x443)))), ((((-1.00000000000000)*(cj2)*(px)*(py)*(x443)))+(((0.0317500000001019)*(cj2)*(px)*(x443)))+(((-0.278529999999591)*(cj3)*(pz)*(sj2)*(x443)))+(((-0.277949999999691)*(pz)*(sj2)*(x443)))));
                                    sj0array[0]=IKsin(j0array[0]);
                                    cj0array[0]=IKcos(j0array[0]);
                                    if( j0array[0] > IKPI )
                                        j0array[0]-=IK2PI;
                                    else if( j0array[0] < -IKPI )
                                        j0array[0]+=IK2PI;
                                    j0valid[0] = true;
                                    { int ij0 = 0;
                                    if( !j0valid[ij0] )
                                        continue;
                                    j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[2], cj4array[2], sj4array[2];
                                        bool j4valid[2]={false};
                                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                        sj4array[1] = -sj4array[0];
                                        cj4array[1] = -cj4array[0];
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        if( j4array[1] > IKPI )
                                            j4array[1]-=IK2PI;
                                        else if( j4array[1] < -IKPI )
                                            j4array[1]+=IK2PI;
                                        j4valid[1] = true;
                                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                            j4valid[1]=false;
                                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x444=IKsin(j4);
                                            IKReal x445=((IKabs(x444) != 0)?((IKReal)1/(x444)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r00)*(x445)), ((_r02)*(x445)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x446=IKcos(j4);
                                            IKReal x447=(x446)*(x446);
                                            IKReal x448=IKcos(j5);
                                            IKReal x449=(x448)*(x448);
                                            IKReal x450=((x447)*(x449));
                                            IKReal x451=((1.00000000000000)+(((-1.00000000000000)*(x450))));
                                            IKReal x452=((IKabs(x451) != 0)?((IKReal)1/(x451)):(IKReal)1.0e30);
                                            IKReal x453=IKsin(j4);
                                            IKReal x454=IKsin(j5);
                                            j6array[0]=IKatan2(((((_r02)*(x446)*(x452)*(x454)))+(((_r00)*(x452)*(x453)))), ((((_r02)*(x452)*(x453)))+(((-1.00000000000000)*(_r00)*(x446)*(x452)*(x454)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    }
                                    
                                } else
                                {
                                    continue;
                                    
                                }
                                }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j0array[2], cj0array[2], sj0array[2];
                            bool j0valid[2]={false};
                            IKReal x455=x402;
                            IKReal x456=x404;
                            IKReal x457=((x456)+(x455));
                            IKReal x458=((IKabs(x457) != 0)?(pow(x457,-0.500000000000000)):(IKReal)1.0e30);
                            IKReal x459=((0.278529999999591)*(cj2)*(sj3));
                            IKReal x460=((0.00634999999999764)*(cj2));
                            IKReal x461=((x459)+(x460));
                            IKReal x462=((x458)*(x461));
                            if( (x462) < -1.0001 || (x462) > 1.0001 )
                                continue;
                            IKReal x463=IKasin(x462);
                            IKReal x464=((-1.00000000000000)*(px));
                            IKReal x465=((-1.00000000000000)*(pz));
                            IKReal x466=IKatan2(x464, x465);
                            j0array[0]=((((-1.00000000000000)*(x463)))+(((-1.00000000000000)*(x466))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            j0array[1]=((3.14159265358979)+(x463)+(((-1.00000000000000)*(x466))));
                            sj0array[1]=IKsin(j0array[1]);
                            cj0array[1]=IKcos(j0array[1]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            if( j0array[1] > IKPI )
                                j0array[1]-=IK2PI;
                            else if( j0array[1] < -IKPI )
                                j0array[1]+=IK2PI;
                            j0valid[1] = true;
                            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                j0valid[1]=false;
                            for(int ij0 = 0; ij0 < 2; ++ij0) {
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                            
                            {
                            IKReal evalcond;
                                evalcond=j0;
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x467=x404;
                                IKReal x468=x405;
                                IKReal x469=((x468)+(x467));
                                IKReal x470=((IKabs(x469) != 0)?((IKReal)1/(x469)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((-0.0317500000001019)*(pz)*(x470)))+(((-0.277949999999691)*(py)*(x470)))+(((0.00634999999999764)*(pz)*(sj2)*(x470)))+(((0.278529999999591)*(pz)*(sj2)*(sj3)*(x470)))+(((-0.278529999999591)*(cj3)*(py)*(x470)))), ((((-0.00634999999999764)*(py)*(sj2)*(x470)))+(((-0.278529999999591)*(cj3)*(pz)*(x470)))+(((-0.277949999999691)*(pz)*(x470)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x470)))+(((0.0317500000001019)*(py)*(x470)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x471=IKsin(j4);
                                        IKReal x472=((IKabs(x471) != 0)?((IKReal)1/(x471)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r00)*(x472)), ((_r02)*(x472)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x473=IKcos(j4);
                                        IKReal x474=(x473)*(x473);
                                        IKReal x475=IKcos(j5);
                                        IKReal x476=(x475)*(x475);
                                        IKReal x477=((x474)*(x476));
                                        IKReal x478=((1.00000000000000)+(((-1.00000000000000)*(x477))));
                                        IKReal x479=((IKabs(x478) != 0)?((IKReal)1/(x478)):(IKReal)1.0e30);
                                        IKReal x480=IKsin(j4);
                                        IKReal x481=IKsin(j5);
                                        j6array[0]=IKatan2(((((_r02)*(x473)*(x479)*(x481)))+(((_r00)*(x479)*(x480)))), ((((_r02)*(x479)*(x480)))+(((-1.00000000000000)*(_r00)*(x473)*(x479)*(x481)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x482=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x483=x402;
                                IKReal x484=(cj0)*(cj0);
                                IKReal x485=x404;
                                IKReal x486=((x482)*(x484)*(x485));
                                IKReal x487=x405;
                                IKReal x488=((x482)*(x487));
                                IKReal x489=((x488)+(x483)+(x486));
                                IKReal x490=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                                IKReal x491=((2.00000000000000)*(cj0)*(px)*(pz)*(x490));
                                IKReal x492=((((-1.00000000000000)*(x491)))+(x489));
                                IKReal x493=((IKabs(x492) != 0)?((IKReal)1/(x492)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((-0.00634999999999764)*(px)*(sj2)*(x490)*(x493)))+(((-0.278529999999591)*(cj3)*(py)*(x482)*(x493)))+(((0.278529999999591)*(cj0)*(pz)*(sj2)*(sj3)*(x482)*(x493)))+(((0.0317500000001019)*(px)*(x490)*(x493)))+(((-0.0317500000001019)*(cj0)*(pz)*(x482)*(x493)))+(((0.00634999999999764)*(cj0)*(pz)*(sj2)*(x482)*(x493)))+(((-0.277949999999691)*(py)*(x482)*(x493)))+(((-0.278529999999591)*(px)*(sj2)*(sj3)*(x490)*(x493)))), ((((-0.00634999999999764)*(py)*(sj2)*(x482)*(x493)))+(((-0.277949999999691)*(cj0)*(pz)*(x482)*(x493)))+(((0.0317500000001019)*(py)*(x482)*(x493)))+(((0.278529999999591)*(cj3)*(px)*(x490)*(x493)))+(((-0.278529999999591)*(cj0)*(cj3)*(pz)*(x482)*(x493)))+(((0.277949999999691)*(px)*(x490)*(x493)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x482)*(x493)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x494=IKsin(j4);
                                        IKReal x495=((IKabs(x494) != 0)?((IKReal)1/(x494)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r00)*(x495)), ((_r02)*(x495)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x496=IKcos(j4);
                                        IKReal x497=(x496)*(x496);
                                        IKReal x498=IKcos(j5);
                                        IKReal x499=(x498)*(x498);
                                        IKReal x500=((x497)*(x499));
                                        IKReal x501=((1.00000000000000)+(((-1.00000000000000)*(x500))));
                                        IKReal x502=((IKabs(x501) != 0)?((IKReal)1/(x501)):(IKReal)1.0e30);
                                        IKReal x503=IKsin(j4);
                                        IKReal x504=IKsin(j5);
                                        j6array[0]=IKatan2(((((_r00)*(x502)*(x503)))+(((_r02)*(x496)*(x502)*(x504)))), ((((-1.00000000000000)*(_r00)*(x496)*(x502)*(x504)))+(((_r02)*(x502)*(x503)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        
                    } else
                    {
                        {
                        IKReal j0array[2], cj0array[2], sj0array[2];
                        bool j0valid[2]={false};
                        IKReal x505=x402;
                        IKReal x506=x404;
                        IKReal x507=((x505)+(x506));
                        IKReal x508=((IKabs(x507) != 0)?(pow(x507,-0.500000000000000)):(IKReal)1.0e30);
                        IKReal x509=((0.278529999999591)*(cj2)*(sj3));
                        IKReal x510=((0.00634999999999764)*(cj2));
                        IKReal x511=((x510)+(x509));
                        IKReal x512=((x508)*(x511));
                        if( (x512) < -1.0001 || (x512) > 1.0001 )
                            continue;
                        IKReal x513=IKasin(x512);
                        IKReal x514=((-1.00000000000000)*(px));
                        IKReal x515=((-1.00000000000000)*(pz));
                        IKReal x516=IKatan2(x514, x515);
                        j0array[0]=((((-1.00000000000000)*(x513)))+(((-1.00000000000000)*(x516))));
                        sj0array[0]=IKsin(j0array[0]);
                        cj0array[0]=IKcos(j0array[0]);
                        j0array[1]=((3.14159265358979)+(x513)+(((-1.00000000000000)*(x516))));
                        sj0array[1]=IKsin(j0array[1]);
                        cj0array[1]=IKcos(j0array[1]);
                        if( j0array[0] > IKPI )
                            j0array[0]-=IK2PI;
                        else if( j0array[0] < -IKPI )
                            j0array[0]+=IK2PI;
                        j0valid[0] = true;
                        if( j0array[1] > IKPI )
                            j0array[1]-=IK2PI;
                        else if( j0array[1] < -IKPI )
                            j0array[1]+=IK2PI;
                        j0valid[1] = true;
                        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                            j0valid[1]=false;
                        for(int ij0 = 0; ij0 < 2; ++ij0) {
                        if( !j0valid[ij0] )
                            continue;
                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                        
                        {
                        IKReal evalcond;
                            evalcond=j0;
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x517=x404;
                            IKReal x518=x405;
                            IKReal x519=((x518)+(x517));
                            IKReal x520=((IKabs(x519) != 0)?((IKReal)1/(x519)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((0.278529999999591)*(pz)*(sj2)*(sj3)*(x520)))+(((0.00634999999999764)*(pz)*(sj2)*(x520)))+(((-0.0317500000001019)*(pz)*(x520)))+(((-0.278529999999591)*(cj3)*(py)*(x520)))+(((-0.277949999999691)*(py)*(x520)))), ((((-0.278529999999591)*(cj3)*(pz)*(x520)))+(((-0.277949999999691)*(pz)*(x520)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x520)))+(((-0.00634999999999764)*(py)*(sj2)*(x520)))+(((0.0317500000001019)*(py)*(x520)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                            _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                            _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                            _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                            _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x521=IKsin(j4);
                                    IKReal x522=((IKabs(x521) != 0)?((IKReal)1/(x521)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r00)*(x522)), ((_r02)*(x522)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x523=IKcos(j4);
                                    IKReal x524=(x523)*(x523);
                                    IKReal x525=IKcos(j5);
                                    IKReal x526=(x525)*(x525);
                                    IKReal x527=((x524)*(x526));
                                    IKReal x528=((1.00000000000000)+(((-1.00000000000000)*(x527))));
                                    IKReal x529=((IKabs(x528) != 0)?((IKReal)1/(x528)):(IKReal)1.0e30);
                                    IKReal x530=IKsin(j4);
                                    IKReal x531=IKsin(j5);
                                    j6array[0]=IKatan2(((((_r00)*(x529)*(x530)))+(((_r02)*(x523)*(x529)*(x531)))), ((((-1.00000000000000)*(_r00)*(x523)*(x529)*(x531)))+(((_r02)*(x529)*(x530)))));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x532=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                            IKReal x533=x402;
                            IKReal x534=(cj0)*(cj0);
                            IKReal x535=x404;
                            IKReal x536=((x532)*(x534)*(x535));
                            IKReal x537=x405;
                            IKReal x538=((x532)*(x537));
                            IKReal x539=((x533)+(x536)+(x538));
                            IKReal x540=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                            IKReal x541=((2.00000000000000)*(cj0)*(px)*(pz)*(x540));
                            IKReal x542=((((-1.00000000000000)*(x541)))+(x539));
                            IKReal x543=((IKabs(x542) != 0)?((IKReal)1/(x542)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((-0.277949999999691)*(py)*(x532)*(x543)))+(((0.00634999999999764)*(cj0)*(pz)*(sj2)*(x532)*(x543)))+(((0.0317500000001019)*(px)*(x540)*(x543)))+(((-0.0317500000001019)*(cj0)*(pz)*(x532)*(x543)))+(((-0.00634999999999764)*(px)*(sj2)*(x540)*(x543)))+(((0.278529999999591)*(cj0)*(pz)*(sj2)*(sj3)*(x532)*(x543)))+(((-0.278529999999591)*(cj3)*(py)*(x532)*(x543)))+(((-0.278529999999591)*(px)*(sj2)*(sj3)*(x540)*(x543)))), ((((-0.278529999999591)*(cj0)*(cj3)*(pz)*(x532)*(x543)))+(((-0.277949999999691)*(cj0)*(pz)*(x532)*(x543)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x532)*(x543)))+(((0.0317500000001019)*(py)*(x532)*(x543)))+(((0.278529999999591)*(cj3)*(px)*(x540)*(x543)))+(((0.277949999999691)*(px)*(x540)*(x543)))+(((-0.00634999999999764)*(py)*(sj2)*(x532)*(x543)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                            _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                            _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                            _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                            _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x544=IKsin(j4);
                                    IKReal x545=((IKabs(x544) != 0)?((IKReal)1/(x544)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r00)*(x545)), ((_r02)*(x545)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x546=IKcos(j4);
                                    IKReal x547=(x546)*(x546);
                                    IKReal x548=IKcos(j5);
                                    IKReal x549=(x548)*(x548);
                                    IKReal x550=((x547)*(x549));
                                    IKReal x551=((1.00000000000000)+(((-1.00000000000000)*(x550))));
                                    IKReal x552=((IKabs(x551) != 0)?((IKReal)1/(x551)):(IKReal)1.0e30);
                                    IKReal x553=IKsin(j4);
                                    IKReal x554=IKsin(j5);
                                    j6array[0]=IKatan2(((((_r00)*(x552)*(x553)))+(((_r02)*(x546)*(x552)*(x554)))), ((((_r02)*(x552)*(x553)))+(((-1.00000000000000)*(_r00)*(x546)*(x552)*(x554)))));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        
                    }
                    }
                }
                }
                
            }
            }
        } else {
    }
    }
    }
    }
    }
    }
    }
return vsolutions.size()>0;
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
