/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// To compile with gcc use: gcc -lstdc++ 
/// To compile without any main function use: gcc -lstdc++ -DIKFAST_NO_MAIN
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

// define when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
extern "C"
{
    bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions);
    int getNumFreeParameters();
    int* getFreeParameters();
    int getNumJoints();
    int getIKRealSize();
}
#endif

int getNumFreeParameters() { return 1; }
int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
int getNumJoints() { return 7; }

int getIKRealSize() { return sizeof(IKReal); }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    IKReal j0, cj0, sj0,
    j1, cj1, sj1,
    j3, cj3, sj3,
    j4, cj4, sj4,
    j5, cj5, sj5,
    j6, cj6, sj6,
    j2=pfree[0], cj2=cos(pfree[0]), sj2=sin(pfree[0]),
    _r00, r00 = eerot[0*3+0],
    _r01, r01 = eerot[0*3+1],
    _r02, r02 = eerot[0*3+2],
    _r10, r10 = eerot[1*3+0],
    _r11, r11 = eerot[1*3+1],
    _r12, r12 = eerot[1*3+2],
    _r20, r20 = eerot[2*3+0],
    _r21, r21 = eerot[2*3+1],
    _r22, r22 = eerot[2*3+2],
    _px, _py, _pz, px = eetrans[0], py = eetrans[1], pz = eetrans[2];
    
    _r00=((-1.00000000000000)*(r01));
    _r01=((-1.00000000000000)*(r02));
    _r02=r00;
    _px=px;
    _r10=((-1.00000000000000)*(r11));
    _r11=((-1.00000000000000)*(r12));
    _r12=r10;
    _py=((0.184930000000000)+(py));
    _r20=((-1.00000000000000)*(r21));
    _r21=((-1.00000000000000)*(r22));
    _r22=r20;
    _pz=pz;
    r00 = _r00; r01 = _r01; r02 = _r02; r10 = _r10; r11 = _r11; r12 = _r12; r20 = _r20; r21 = _r21; r22 = _r22; px = _px; py = _py; pz = _pz;
    {
    IKReal evalcond;
        evalcond=j2;
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x0=(px)*(px);
        IKReal x1=((6.45681049529230)*(x0));
        IKReal x2=(pz)*(pz);
        IKReal x3=((6.45681049529230)*(x2));
        IKReal x4=(py)*(py);
        IKReal x5=((6.45681049529230)*(x4));
        IKReal x6=((x3)+(x1)+(x5));
        IKReal x7=((1.00651053135516)+(((-1.00000000000000)*(x6))));
        if( (x7) < -1.0001 || (x7) > 1.0001 )
            continue;
        IKReal x8=IKasin(x7);
        j3array[0]=((-1.54795446462778)+(((-1.00000000000000)*(x8))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.59363818896201)+(x8));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j0eval[1];
            j0eval[0]=(((px)*(px))+((pz)*(pz)));
            if( IKabs(j0eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=(((px)*(px))+((pz)*(pz)));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[7];
                        IKReal x9=((0.278529999999591)*(sj3));
                        IKReal x10=((0.00634999999999764)+(x9));
                        IKReal x11=((((-1.00000000000000)*(px)))+(x10));
                        IKReal x12=((-0.00634999999999764)+(px));
                        IKReal x13=((x12)+(((-1.00000000000000)*(x9))));
                        j0eval[0]=x11;
                        j0eval[1]=x11;
                        j0eval[2]=x11;
                        j0eval[3]=x11;
                        j0eval[4]=x13;
                        j0eval[5]=x13;
                        j0eval[6]=x13;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  && IKabs(j0eval[5]) < 0.000100  && IKabs(j0eval[6]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x14=x2;
                            IKReal x15=x4;
                            IKReal x16=((x15)+(x14));
                            IKReal x17=((IKabs(x16) != 0)?((IKReal)1/(x16)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((-0.278529999999591)*(cj3)*(py)*(x17)))+(((-0.277949999999691)*(py)*(x17)))+(((0.0317500000001019)*(pz)*(x17)))), ((((-0.278529999999591)*(cj3)*(pz)*(x17)))+(((-0.0317500000001019)*(py)*(x17)))+(((-0.277949999999691)*(pz)*(x17)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                            _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                            _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                            _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                            _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x18=IKsin(j4);
                                    IKReal x19=((IKabs(x18) != 0)?((IKReal)1/(x18)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r00)*(x19)), ((_r02)*(x19)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x20=IKcos(j4);
                                    IKReal x21=(x20)*(x20);
                                    IKReal x22=IKcos(j5);
                                    IKReal x23=(x22)*(x22);
                                    IKReal x24=((x21)*(x23));
                                    IKReal x25=((1.00000000000000)+(((-1.00000000000000)*(x24))));
                                    IKReal x26=((IKabs(x25) != 0)?((IKReal)1/(x25)):(IKReal)1.0e30);
                                    IKReal x27=IKsin(j4);
                                    IKReal x28=IKsin(j5);
                                    j6array[0]=IKatan2(((((_r00)*(x26)*(x27)))+(((_r02)*(x20)*(x26)*(x28)))), ((((_r02)*(x26)*(x27)))+(((-1.00000000000000)*(_r00)*(x20)*(x26)*(x28)))));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[3];
                        IKReal x29=((-0.0317500000001019)+(((-1.00000000000000)*(py))));
                        j1eval[0]=x29;
                        j1eval[1]=x29;
                        j1eval[2]=((0.0317500000001019)+(py));
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1]={false};
                            IKReal x30=x0;
                            IKReal x31=x2;
                            IKReal x32=((x31)+(x30));
                            IKReal x33=((IKabs(x32) != 0)?((IKReal)1/(x32)):(IKReal)1.0e30);
                            j0array[0]=IKatan2(((((0.278529999999591)*(cj3)*(px)*(x33)))+(((0.278529999999591)*(pz)*(sj3)*(x33)))+(((0.00634999999999764)*(pz)*(x33)))+(((0.277949999999691)*(px)*(x33)))), ((((-0.277949999999691)*(pz)*(x33)))+(((0.00634999999999764)*(px)*(x33)))+(((0.278529999999591)*(px)*(sj3)*(x33)))+(((-0.278529999999591)*(cj3)*(pz)*(x33)))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            { int ij0 = 0;
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                            
                            _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                            _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                            _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                            _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                            _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x34=IKsin(j4);
                                    IKReal x35=((IKabs(x34) != 0)?((IKReal)1/(x34)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r00)*(x35)), ((_r02)*(x35)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x36=IKcos(j4);
                                    IKReal x37=(x36)*(x36);
                                    IKReal x38=IKcos(j5);
                                    IKReal x39=(x38)*(x38);
                                    IKReal x40=((x37)*(x39));
                                    IKReal x41=((1.00000000000000)+(((-1.00000000000000)*(x40))));
                                    IKReal x42=((IKabs(x41) != 0)?((IKReal)1/(x41)):(IKReal)1.0e30);
                                    IKReal x43=IKsin(j4);
                                    IKReal x44=IKsin(j5);
                                    j6array[0]=IKatan2(((((_r00)*(x42)*(x43)))+(((_r02)*(x36)*(x42)*(x44)))), ((((_r02)*(x42)*(x43)))+(((-1.00000000000000)*(_r00)*(x36)*(x42)*(x44)))));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j0array[2], cj0array[2], sj0array[2];
                    bool j0valid[2]={false};
                    IKReal x45=x0;
                    IKReal x46=x2;
                    IKReal x47=((x46)+(x45));
                    IKReal x48=((IKabs(x47) != 0)?(pow(x47,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x49=((0.278529999999591)*(sj3));
                    IKReal x50=((0.00634999999999764)+(x49));
                    IKReal x51=((x48)*(x50));
                    if( (x51) < -1.0001 || (x51) > 1.0001 )
                        continue;
                    IKReal x52=IKasin(x51);
                    IKReal x53=((-1.00000000000000)*(px));
                    IKReal x54=((-1.00000000000000)*(pz));
                    IKReal x55=IKatan2(x53, x54);
                    j0array[0]=((((-1.00000000000000)*(x55)))+(((-1.00000000000000)*(x52))));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    j0array[1]=((3.14159265358979)+(x52)+(((-1.00000000000000)*(x55))));
                    sj0array[1]=IKsin(j0array[1]);
                    cj0array[1]=IKcos(j0array[1]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    if( j0array[1] > IKPI )
                        j0array[1]-=IK2PI;
                    else if( j0array[1] < -IKPI )
                        j0array[1]+=IK2PI;
                    j0valid[1] = true;
                    if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                        j0valid[1]=false;
                    for(int ij0 = 0; ij0 < 2; ++ij0) {
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x56=((0.0317500000001019)*(px)*(sj0));
                    IKReal x57=((0.277949999999691)*(py));
                    IKReal x58=((0.0317500000001019)*(cj0)*(pz));
                    IKReal x59=((1.00208670624124)*(cj3)*(x57));
                    IKReal x60=((x59)+(x58)+(x57));
                    IKReal x61=((x56)+(((-1.00000000000000)*(x60))));
                    IKReal x62=((IKabs(x61) != 0)?((IKReal)1/(x61)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((x62)*((py)*(py))))+(((-0.00100806250000574)*(x62)))), ((((113.315571118146)*(x57)*(x58)*(x62)))+(((-113.315571118146)*(x56)*(x57)*(x62)))+(((0.00882491250001749)*(x62)))+(((0.00884332750001704)*(cj3)*(x62)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                    _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                    _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                    _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                    _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                    _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                    _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                    _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                    _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                    {
                    IKReal j5eval;
                    j5eval=_r11;
                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKcos(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x63=IKsin(j4);
                            IKReal x64=((IKabs(x63) != 0)?((IKReal)1/(x63)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r00)*(x64)), ((_r02)*(x64)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x65=IKcos(j4);
                            IKReal x66=(x65)*(x65);
                            IKReal x67=IKcos(j5);
                            IKReal x68=(x67)*(x67);
                            IKReal x69=((x66)*(x68));
                            IKReal x70=((1.00000000000000)+(((-1.00000000000000)*(x69))));
                            IKReal x71=((IKabs(x70) != 0)?((IKReal)1/(x70)):(IKReal)1.0e30);
                            IKReal x72=IKsin(j4);
                            IKReal x73=IKsin(j5);
                            j6array[0]=IKatan2(((((_r00)*(x71)*(x72)))+(((_r02)*(x65)*(x71)*(x73)))), ((((_r02)*(x71)*(x72)))+(((-1.00000000000000)*(_r00)*(x65)*(x71)*(x73)))));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x74=x0;
                IKReal x75=x2;
                IKReal x76=((x75)+(x74));
                IKReal x77=((IKabs(x76) != 0)?(pow(x76,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x78=((0.278529999999591)*(sj3));
                IKReal x79=((0.00634999999999764)+(x78));
                IKReal x80=((x77)*(x79));
                if( (x80) < -1.0001 || (x80) > 1.0001 )
                    continue;
                IKReal x81=IKasin(x80);
                IKReal x82=((-1.00000000000000)*(px));
                IKReal x83=((-1.00000000000000)*(pz));
                IKReal x84=IKatan2(x82, x83);
                j0array[0]=((((-1.00000000000000)*(x84)))+(((-1.00000000000000)*(x81))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x84)))+(x81));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0) {
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x85=((0.0317500000001019)*(px)*(sj0));
                IKReal x86=((0.277949999999691)*(py));
                IKReal x87=((0.0317500000001019)*(cj0)*(pz));
                IKReal x88=((1.00208670624124)*(cj3)*(x86));
                IKReal x89=((x88)+(x86)+(x87));
                IKReal x90=((((-1.00000000000000)*(x89)))+(x85));
                IKReal x91=((IKabs(x90) != 0)?((IKReal)1/(x90)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((x91)*((py)*(py))))+(((-0.00100806250000574)*(x91)))), ((((113.315571118146)*(x86)*(x87)*(x91)))+(((0.00884332750001704)*(cj3)*(x91)))+(((-113.315571118146)*(x85)*(x86)*(x91)))+(((0.00882491250001749)*(x91)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                {
                IKReal j5eval;
                j5eval=_r11;
                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal evalcond;
                        evalcond=IKcos(j4);
                        if( IKabs(evalcond) < 0.00001 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x92=IKsin(j4);
                        IKReal x93=((IKabs(x92) != 0)?((IKReal)1/(x92)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((_r00)*(x93)), ((_r02)*(x93)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                        if( 1 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x94=IKcos(j4);
                        IKReal x95=(x94)*(x94);
                        IKReal x96=IKcos(j5);
                        IKReal x97=(x96)*(x96);
                        IKReal x98=((x95)*(x97));
                        IKReal x99=((1.00000000000000)+(((-1.00000000000000)*(x98))));
                        IKReal x100=((IKabs(x99) != 0)?((IKReal)1/(x99)):(IKReal)1.0e30);
                        IKReal x101=IKsin(j4);
                        IKReal x102=IKsin(j5);
                        j6array[0]=IKatan2(((((_r00)*(x100)*(x101)))+(((_r02)*(x100)*(x102)*(x94)))), ((((_r02)*(x100)*(x101)))+(((-1.00000000000000)*(_r00)*(x100)*(x102)*(x94)))));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((((-0.500000000000000)*(3.14159265358979)))+(j2));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x103=((-1.00000000000000)*(px));
        IKReal x104=((-1.00000000000000)*(pz));
        IKReal x105=IKatan2(x103, x104);
        j0array[0]=((-1.00000000000000)*(x105));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x105))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0) {
        if( !j0valid[ij0] )
            continue;
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x106=(py)*(py);
        IKReal x107=((6.39866103045642)*(x106));
        IKReal x108=(pz)*(pz);
        IKReal x109=((6.39866103045642)*(x108));
        IKReal x110=(px)*(px);
        IKReal x111=((6.39866103045642)*(x110));
        IKReal x112=((x109)+(x107)+(x111));
        IKReal x113=((1.00002608651994)+(((-1.00000000000000)*(x112))));
        if( (x113) < -1.0001 || (x113) > 1.0001 )
            continue;
        IKReal x114=IKasin(x113);
        j3array[0]=((-1.43457028889960)+(((-1.00000000000000)*(x114))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.70702236469019)+(x114));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
        IKReal x115=((0.278529999999591)*(py)*(sj3));
        IKReal x116=((0.278529999999591)*(cj3)*(px)*(sj0));
        IKReal x117=((0.277949999999691)*(px)*(sj0));
        IKReal x118=((0.0381000000002132)*(py));
        IKReal x119=((x117)+(x116)+(x115)+(x118));
        IKReal x120=((0.277949999999691)*(cj0)*(pz));
        IKReal x121=((1.00208670624124)*(cj3)*(x120));
        IKReal x122=((x120)+(x121));
        IKReal x123=((((-1.00000000000000)*(x122)))+(x119));
        IKReal x124=((IKabs(x123) != 0)?((IKReal)1/(x123)):(IKReal)1.0e30);
        j1array[0]=IKatan2(((((-0.0774174134994610)*(sj3)*(x124)))+(((-0.0105898950000665)*(x124)))+(((-0.0106119929999977)*(cj3)*(x124)))+(((94.4296425972134)*(x118)*(x120)*(x124)))+(((-0.0775789608997002)*(cj3)*(sj3)*(x124)))+(((-94.4296425972134)*(x117)*(x118)*(x124)))), ((((0.154834826998922)*(cj3)*(x124)))+(((0.0772562024994841)*(x124)))+(((0.0775789608997002)*(x124)*((cj3)*(cj3))))+(((-1.00000000000000)*(x124)*((py)*(py))))));
        sj1array[0]=IKsin(j1array[0]);
        cj1array[0]=IKcos(j1array[0]);
        if( j1array[0] > IKPI )
            j1array[0]-=IK2PI;
        else if( j1array[0] < -IKPI )
            j1array[0]+=IK2PI;
        j1valid[0] = true;
        { int ij1 = 0;
        if( !j1valid[ij1] )
            continue;
        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
        
        _r00=((((cj1)*(cj3)*(r10)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)))+(((cj3)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
        _r01=((((cj3)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1))));
        _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12))));
        _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj3))));
        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj3)))+(((cj0)*(r21)*(sj1)*(sj3))));
        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj3)))+(((cj0)*(r22)*(sj1)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
        _r20=((((-1.00000000000000)*(cj0)*(r00)))+(((-1.00000000000000)*(r20)*(sj0))));
        _r21=((((-1.00000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(r21)*(sj0))));
        _r22=((((-1.00000000000000)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02))));
        {
        IKReal j5eval;
        j5eval=_r11;
        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
            {
            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
            {
            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4) {
            if( !j4valid[ij4] )
                continue;
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal evalcond;
                evalcond=IKcos(j4);
                if( IKabs(evalcond) < 0.00001 ) {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                { int ij5 = 0;
                if( !j5valid[ij5] )
                    continue;
                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x125=IKsin(j4);
                IKReal x126=((IKabs(x125) != 0)?((IKReal)1/(x125)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((_r00)*(x126)), ((_r02)*(x126)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                { int ij6 = 0;
                if( !j6valid[ij6] )
                    continue;
                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
                } else {
                if( 1 ) {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                { int ij5 = 0;
                if( !j5valid[ij5] )
                    continue;
                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x127=IKcos(j4);
                IKReal x128=(x127)*(x127);
                IKReal x129=IKcos(j5);
                IKReal x130=(x129)*(x129);
                IKReal x131=((x128)*(x130));
                IKReal x132=((1.00000000000000)+(((-1.00000000000000)*(x131))));
                IKReal x133=((IKabs(x132) != 0)?((IKReal)1/(x132)):(IKReal)1.0e30);
                IKReal x134=IKsin(j4);
                IKReal x135=IKsin(j5);
                j6array[0]=IKatan2(((((_r00)*(x133)*(x134)))+(((_r02)*(x127)*(x133)*(x135)))), ((((-1.00000000000000)*(_r00)*(x127)*(x133)*(x135)))+(((_r02)*(x133)*(x134)))));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                { int ij6 = 0;
                if( !j6valid[ij6] )
                    continue;
                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
                } else {
            }
            }
            }
            }
            }
            }
        }
        }
        }
        }
        }
        }
        }
        } else {
        evalcond=((j2)+(((-1.00000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x136=(px)*(px);
        IKReal x137=((6.45681049529230)*(x136));
        IKReal x138=(pz)*(pz);
        IKReal x139=((6.45681049529230)*(x138));
        IKReal x140=(py)*(py);
        IKReal x141=((6.45681049529230)*(x140));
        IKReal x142=((x137)+(x139)+(x141));
        IKReal x143=((1.00651053135516)+(((-1.00000000000000)*(x142))));
        if( (x143) < -1.0001 || (x143) > 1.0001 )
            continue;
        IKReal x144=IKasin(x143);
        j3array[0]=((-1.54795446462778)+(((-1.00000000000000)*(x144))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.59363818896201)+(x144));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j0eval[1];
            j0eval[0]=(((px)*(px))+((pz)*(pz)));
            if( IKabs(j0eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=(((px)*(px))+((pz)*(pz)));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[7];
                        IKReal x145=((0.278529999999591)*(sj3));
                        IKReal x146=((px)+(x145));
                        IKReal x147=((-0.00634999999999764)+(((-1.00000000000000)*(x146))));
                        j0eval[0]=x147;
                        j0eval[1]=x147;
                        j0eval[2]=x147;
                        j0eval[3]=x147;
                        j0eval[4]=((0.00634999999999764)+(x146));
                        j0eval[5]=x147;
                        j0eval[6]=x147;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  && IKabs(j0eval[5]) < 0.000100  && IKabs(j0eval[6]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x148=x138;
                            IKReal x149=x140;
                            IKReal x150=((x148)+(x149));
                            IKReal x151=((IKabs(x150) != 0)?((IKReal)1/(x150)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((-0.278529999999591)*(cj3)*(py)*(x151)))+(((0.0317500000001019)*(pz)*(x151)))+(((-0.277949999999691)*(py)*(x151)))), ((((-0.278529999999591)*(cj3)*(pz)*(x151)))+(((-0.277949999999691)*(pz)*(x151)))+(((-0.0317500000001019)*(py)*(x151)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                            _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                            _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                            _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                            _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x152=(sj4)*(sj4);
                                IKReal x153=(cj4)*(cj4);
                                IKReal x154=(sj5)*(sj5);
                                IKReal x155=((x153)*(x154));
                                IKReal x156=((x155)+(x152));
                                IKReal x157=((IKabs(x156) != 0)?((IKReal)1/(x156)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((((_r00)*(sj4)*(x157)))+(((_r02)*(cj4)*(sj5)*(x157)))), ((((_r02)*(sj4)*(x157)))+(((-1.00000000000000)*(_r00)*(cj4)*(sj5)*(x157)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[3];
                        IKReal x158=((-0.0317500000001019)+(((-1.00000000000000)*(py))));
                        j1eval[0]=x158;
                        j1eval[1]=x158;
                        j1eval[2]=((0.0317500000001019)+(py));
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1]={false};
                            IKReal x159=x136;
                            IKReal x160=x138;
                            IKReal x161=((x159)+(x160));
                            IKReal x162=((IKabs(x161) != 0)?((IKReal)1/(x161)):(IKReal)1.0e30);
                            j0array[0]=IKatan2(((((-0.278529999999591)*(pz)*(sj3)*(x162)))+(((-0.00634999999999764)*(pz)*(x162)))+(((0.278529999999591)*(cj3)*(px)*(x162)))+(((0.277949999999691)*(px)*(x162)))), ((((-0.278529999999591)*(cj3)*(pz)*(x162)))+(((-0.00634999999999764)*(px)*(x162)))+(((-0.277949999999691)*(pz)*(x162)))+(((-0.278529999999591)*(px)*(sj3)*(x162)))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            { int ij0 = 0;
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                            
                            _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                            _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                            _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                            _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                            _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x163=(sj4)*(sj4);
                                IKReal x164=(cj4)*(cj4);
                                IKReal x165=(sj5)*(sj5);
                                IKReal x166=((x164)*(x165));
                                IKReal x167=((x163)+(x166));
                                IKReal x168=((IKabs(x167) != 0)?((IKReal)1/(x167)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((((_r00)*(sj4)*(x168)))+(((_r02)*(cj4)*(sj5)*(x168)))), ((((-1.00000000000000)*(_r00)*(cj4)*(sj5)*(x168)))+(((_r02)*(sj4)*(x168)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j0array[2], cj0array[2], sj0array[2];
                    bool j0valid[2]={false};
                    IKReal x169=x136;
                    IKReal x170=x138;
                    IKReal x171=((x170)+(x169));
                    IKReal x172=((IKabs(x171) != 0)?(pow(x171,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x173=((0.278529999999591)*(sj3));
                    IKReal x174=((0.00634999999999764)+(x173));
                    IKReal x175=((x172)*(x174));
                    if( (x175) < -1.0001 || (x175) > 1.0001 )
                        continue;
                    IKReal x176=IKasin(x175);
                    IKReal x177=((-1.00000000000000)*(px));
                    IKReal x178=((-1.00000000000000)*(pz));
                    IKReal x179=IKatan2(x177, x178);
                    j0array[0]=((((-1.00000000000000)*(x179)))+(x176));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x179)))+(((-1.00000000000000)*(x176))));
                    sj0array[1]=IKsin(j0array[1]);
                    cj0array[1]=IKcos(j0array[1]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    if( j0array[1] > IKPI )
                        j0array[1]-=IK2PI;
                    else if( j0array[1] < -IKPI )
                        j0array[1]+=IK2PI;
                    j0valid[1] = true;
                    if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                        j0valid[1]=false;
                    for(int ij0 = 0; ij0 < 2; ++ij0) {
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x180=((0.0317500000001019)*(px)*(sj0));
                    IKReal x181=((0.277949999999691)*(py));
                    IKReal x182=((0.0317500000001019)*(cj0)*(pz));
                    IKReal x183=((1.00208670624124)*(cj3)*(x181));
                    IKReal x184=((x181)+(x182)+(x183));
                    IKReal x185=((x180)+(((-1.00000000000000)*(x184))));
                    IKReal x186=((IKabs(x185) != 0)?((IKReal)1/(x185)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((x186)*((py)*(py))))+(((-0.00100806250000574)*(x186)))), ((((113.315571118146)*(x181)*(x182)*(x186)))+(((0.00884332750001704)*(cj3)*(x186)))+(((0.00882491250001749)*(x186)))+(((-113.315571118146)*(x180)*(x181)*(x186)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                    _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                    _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                    _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                    _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                    _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                    {
                    IKReal j5eval;
                    j5eval=_r11;
                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[2], cj4array[2], sj4array[2];
                        bool j4valid[2]={false};
                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                        sj4array[1] = -sj4array[0];
                        cj4array[1] = -cj4array[0];
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        if( j4array[1] > IKPI )
                            j4array[1]-=IK2PI;
                        else if( j4array[1] < -IKPI )
                            j4array[1]+=IK2PI;
                        j4valid[1] = true;
                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                            j4valid[1]=false;
                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                        
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x187=(sj4)*(sj4);
                        IKReal x188=(cj4)*(cj4);
                        IKReal x189=(sj5)*(sj5);
                        IKReal x190=((x188)*(x189));
                        IKReal x191=((x190)+(x187));
                        IKReal x192=((IKabs(x191) != 0)?((IKReal)1/(x191)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((((_r00)*(sj4)*(x192)))+(((_r02)*(cj4)*(sj5)*(x192)))), ((((_r02)*(sj4)*(x192)))+(((-1.00000000000000)*(_r00)*(cj4)*(sj5)*(x192)))));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x193=x136;
                IKReal x194=x138;
                IKReal x195=((x193)+(x194));
                IKReal x196=((IKabs(x195) != 0)?(pow(x195,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x197=((0.278529999999591)*(sj3));
                IKReal x198=((0.00634999999999764)+(x197));
                IKReal x199=((x196)*(x198));
                if( (x199) < -1.0001 || (x199) > 1.0001 )
                    continue;
                IKReal x200=IKasin(x199);
                IKReal x201=((-1.00000000000000)*(px));
                IKReal x202=((-1.00000000000000)*(pz));
                IKReal x203=IKatan2(x201, x202);
                j0array[0]=((((-1.00000000000000)*(x203)))+(x200));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x203)))+(((-1.00000000000000)*(x200))));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0) {
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x204=((0.0317500000001019)*(px)*(sj0));
                IKReal x205=((0.277949999999691)*(py));
                IKReal x206=((0.0317500000001019)*(cj0)*(pz));
                IKReal x207=((1.00208670624124)*(cj3)*(x205));
                IKReal x208=((x207)+(x206)+(x205));
                IKReal x209=((x204)+(((-1.00000000000000)*(x208))));
                IKReal x210=((IKabs(x209) != 0)?((IKReal)1/(x209)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((x210)*((py)*(py))))+(((-0.00100806250000574)*(x210)))), ((((-113.315571118146)*(x204)*(x205)*(x210)))+(((113.315571118146)*(x205)*(x206)*(x210)))+(((0.00882491250001749)*(x210)))+(((0.00884332750001704)*(cj3)*(x210)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                {
                IKReal j5eval;
                j5eval=_r11;
                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[2], cj4array[2], sj4array[2];
                    bool j4valid[2]={false};
                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                    sj4array[1] = -sj4array[0];
                    cj4array[1] = -cj4array[0];
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    if( j4array[1] > IKPI )
                        j4array[1]-=IK2PI;
                    else if( j4array[1] < -IKPI )
                        j4array[1]+=IK2PI;
                    j4valid[1] = true;
                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                        j4valid[1]=false;
                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                    
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    { int ij5 = 0;
                    if( !j5valid[ij5] )
                        continue;
                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                    
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x211=(sj4)*(sj4);
                    IKReal x212=(cj4)*(cj4);
                    IKReal x213=(sj5)*(sj5);
                    IKReal x214=((x212)*(x213));
                    IKReal x215=((x211)+(x214));
                    IKReal x216=((IKabs(x215) != 0)?((IKReal)1/(x215)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((((_r02)*(cj4)*(sj5)*(x216)))+(((_r00)*(sj4)*(x216)))), ((((_r02)*(sj4)*(x216)))+(((-1.00000000000000)*(_r00)*(cj4)*(sj5)*(x216)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((j2)+(((0.500000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x217=((-1.00000000000000)*(px));
        IKReal x218=((-1.00000000000000)*(pz));
        IKReal x219=IKatan2(x217, x218);
        j0array[0]=((-1.00000000000000)*(x219));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x219))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0) {
        if( !j0valid[ij0] )
            continue;
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x220=(py)*(py);
        IKReal x221=((6.43169584433781)*(x220));
        IKReal x222=(pz)*(pz);
        IKReal x223=((6.43169584433781)*(x222));
        IKReal x224=(px)*(px);
        IKReal x225=((6.43169584433781)*(x224));
        IKReal x226=((x221)+(x223)+(x225));
        IKReal x227=((1.00000214988540)+(((-1.00000000000000)*(x226))));
        if( (x227) < -1.0001 || (x227) > 1.0001 )
            continue;
        IKReal x228=IKasin(x227);
        j3array[0]=((-1.66192655796100)+(((-1.00000000000000)*(x228))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.47966609562880)+(x228));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
        IKReal x229=((0.278529999999591)*(cj3)*(px)*(sj0));
        IKReal x230=((0.0253999999999905)*(py));
        IKReal x231=((0.277949999999691)*(px)*(sj0));
        IKReal x232=((x230)+(x231)+(x229));
        IKReal x233=((10.9657480315072)*(sj3)*(x230));
        IKReal x234=((0.277949999999691)*(cj0)*(pz));
        IKReal x235=((1.00208670624124)*(cj3)*(x234));
        IKReal x236=((x233)+(x234)+(x235));
        IKReal x237=((((-1.00000000000000)*(x236)))+(x232));
        IKReal x238=((IKabs(x237) != 0)?((IKReal)1/(x237)):(IKReal)1.0e30);
        j1array[0]=IKatan2(((((-0.00705992999996852)*(x238)))+(((141.644463896751)*(x230)*(x234)*(x238)))+(((0.0775789608997002)*(cj3)*(sj3)*(x238)))+(((-141.644463896751)*(x230)*(x231)*(x238)))+(((0.0774174134994610)*(sj3)*(x238)))+(((-0.00707466199997953)*(cj3)*(x238)))), ((((-1.00000000000000)*(x238)*((py)*(py))))+(((0.154834826998922)*(cj3)*(x238)))+(((0.0775789608997002)*(x238)*((cj3)*(cj3))))+(((0.0772562024994841)*(x238)))));
        sj1array[0]=IKsin(j1array[0]);
        cj1array[0]=IKcos(j1array[0]);
        if( j1array[0] > IKPI )
            j1array[0]-=IK2PI;
        else if( j1array[0] < -IKPI )
            j1array[0]+=IK2PI;
        j1valid[0] = true;
        { int ij1 = 0;
        if( !j1valid[ij1] )
            continue;
        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
        
        _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r10)))+(((cj0)*(cj3)*(r20)*(sj1)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
        _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r21)*(sj1)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0)*(sj1))));
        _r02=((((cj0)*(cj3)*(r22)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r12)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
        _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((r00)*(sj0)*(sj1)*(sj3)))+(((cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((r01)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj1)*(r11)*(sj3))));
        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1)*(sj3)))+(((cj1)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((r02)*(sj0)*(sj1)*(sj3))));
        _r20=((((r20)*(sj0)))+(((cj0)*(r00))));
        _r21=((((r21)*(sj0)))+(((cj0)*(r01))));
        _r22=((((cj0)*(r02)))+(((r22)*(sj0))));
        {
        IKReal j5eval;
        j5eval=_r11;
        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
            {
            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
            {
            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else {
            {
            IKReal j4array[2], cj4array[2], sj4array[2];
            bool j4valid[2]={false};
            j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
            sj4array[1] = -sj4array[0];
            cj4array[1] = -cj4array[0];
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            if( j4array[1] > IKPI )
                j4array[1]-=IK2PI;
            else if( j4array[1] < -IKPI )
                j4array[1]+=IK2PI;
            j4valid[1] = true;
            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                j4valid[1]=false;
            for(int ij4 = 0; ij4 < 2; ++ij4) {
            if( !j4valid[ij4] )
                continue;
            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
            
            {
            IKReal j5array[1], cj5array[1], sj5array[1];
            bool j5valid[1]={false};
            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
            sj5array[0]=IKsin(j5array[0]);
            cj5array[0]=IKcos(j5array[0]);
            if( j5array[0] > IKPI )
                j5array[0]-=IK2PI;
            else if( j5array[0] < -IKPI )
                j5array[0]+=IK2PI;
            j5valid[0] = true;
            { int ij5 = 0;
            if( !j5valid[ij5] )
                continue;
            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
            
            {
            IKReal j6array[1], cj6array[1], sj6array[1];
            bool j6valid[1]={false};
            IKReal x239=(sj4)*(sj4);
            IKReal x240=(cj4)*(cj4);
            IKReal x241=(sj5)*(sj5);
            IKReal x242=((x240)*(x241));
            IKReal x243=((x239)+(x242));
            IKReal x244=((IKabs(x243) != 0)?((IKReal)1/(x243)):(IKReal)1.0e30);
            j6array[0]=IKatan2(((((_r00)*(sj4)*(x244)))+(((_r02)*(cj4)*(sj5)*(x244)))), ((((_r02)*(sj4)*(x244)))+(((-1.00000000000000)*(_r00)*(cj4)*(sj5)*(x244)))));
            sj6array[0]=IKsin(j6array[0]);
            cj6array[0]=IKcos(j6array[0]);
            if( j6array[0] > IKPI )
                j6array[0]-=IK2PI;
            else if( j6array[0] < -IKPI )
                j6array[0]+=IK2PI;
            j6valid[0] = true;
            { int ij6 = 0;
            if( !j6valid[ij6] )
                continue;
            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
            
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.vfree.resize(0);
            }
            }
            }
            }
            }
            }
            }
        }
        }
        }
        }
        }
        }
        }
        } else {
        if( 1 ) {
        {
            IKReal j3eval[1];
            j3eval[0]=((0.0239738236518861)+((((0.00353733099998976)+(((0.0176866550000341)*(sj2)))))*(((0.00353733099998976)+(((0.0176866550000341)*(sj2)))))));
            if( IKabs(j3eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=((0.0239738236518861)+((((0.00353733099998976)+(((0.0176866550000341)*(sj2)))))*(((0.00353733099998976)+(((0.0176866550000341)*(sj2)))))));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[0];
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[0];
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j3eval[0];
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j3array[2], cj3array[2], sj3array[2];
                    bool j3valid[2]={false};
                    IKReal x245=((0.0176866550000341)*(sj2));
                    IKReal x246=((0.00353733099998976)+(x245));
                    IKReal x247=(x246)*(x246);
                    IKReal x248=((0.0239738236518861)+(x247));
                    IKReal x249=((IKabs(x248) != 0)?(pow(x248,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x250=((0.0227982623055141)*(x245));
                    IKReal x251=((0.155883548399288)+(x250));
                    IKReal x252=(px)*(px);
                    IKReal x253=(pz)*(pz);
                    IKReal x254=(py)*(py);
                    IKReal x255=((x254)+(x252)+(x253));
                    IKReal x256=((((-1.00000000000000)*(x255)))+(x251));
                    IKReal x257=((x249)*(x256));
                    if( (x257) < -1.0001 || (x257) > 1.0001 )
                        continue;
                    IKReal x258=IKasin(x257);
                    IKReal x259=IKatan2(0.154834826998922, x246);
                    j3array[0]=((((-1.00000000000000)*(x258)))+(((-1.00000000000000)*(x259))));
                    sj3array[0]=IKsin(j3array[0]);
                    cj3array[0]=IKcos(j3array[0]);
                    j3array[1]=((3.14159265358979)+(x258)+(((-1.00000000000000)*(x259))));
                    sj3array[1]=IKsin(j3array[1]);
                    cj3array[1]=IKcos(j3array[1]);
                    if( j3array[0] > IKPI )
                        j3array[0]-=IK2PI;
                    else if( j3array[0] < -IKPI )
                        j3array[0]+=IK2PI;
                    j3valid[0] = true;
                    if( j3array[1] > IKPI )
                        j3array[1]-=IK2PI;
                    else if( j3array[1] < -IKPI )
                        j3array[1]+=IK2PI;
                    j3valid[1] = true;
                    if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                        j3valid[1]=false;
                    for(int ij3 = 0; ij3 < 2; ++ij3) {
                    if( !j3valid[ij3] )
                        continue;
                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                    
                    {
                        IKReal j0eval[1];
                        j0eval[0]=(((px)*(px))+((pz)*(pz)));
                        if( IKabs(j0eval[0]) < 0.000010  ) {
                            {
                            IKReal evalcond;
                                evalcond=(((px)*(px))+((pz)*(pz)));
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                    IKReal j0eval[5];
                                    IKReal x260=((0.278529999999591)*(cj2)*(sj3));
                                    IKReal x261=((0.00634999999999764)*(cj2));
                                    IKReal x262=((x261)+(x260));
                                    IKReal x263=((((-1.00000000000000)*(px)))+(x262));
                                    j0eval[0]=x263;
                                    j0eval[1]=x263;
                                    j0eval[2]=x263;
                                    j0eval[3]=x263;
                                    j0eval[4]=((px)+(((-1.00000000000000)*(x262))));
                                    if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  ) {
                                        {
                                        j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        IKReal x264=x253;
                                        IKReal x265=x254;
                                        IKReal x266=((x265)+(x264));
                                        IKReal x267=((IKabs(x266) != 0)?((IKReal)1/(x266)):(IKReal)1.0e30);
                                        j1array[0]=IKatan2(((((0.00634999999999764)*(pz)*(sj2)*(x267)))+(((0.0317500000001019)*(pz)*(x267)))+(((-0.277949999999691)*(py)*(x267)))+(((0.278529999999591)*(pz)*(sj2)*(sj3)*(x267)))+(((-0.278529999999591)*(cj3)*(py)*(x267)))), ((((-0.278529999999591)*(py)*(sj2)*(sj3)*(x267)))+(((-0.00634999999999764)*(py)*(sj2)*(x267)))+(((-0.278529999999591)*(cj3)*(pz)*(x267)))+(((-0.0317500000001019)*(py)*(x267)))+(((-0.277949999999691)*(pz)*(x267)))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        { int ij1 = 0;
                                        if( !j1valid[ij1] )
                                            continue;
                                        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                        
                                        _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                        _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                        _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                        _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                        _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                        _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                        _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                        {
                                        IKReal j5eval;
                                        j5eval=_r11;
                                        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                            {
                                            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=1.00000000000000;
                                            j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                            {
                                            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=-1.00000000000000;
                                            j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else {
                                            {
                                            IKReal j4array[2], cj4array[2], sj4array[2];
                                            bool j4valid[2]={false};
                                            j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                            sj4array[0]=IKsin(j4array[0]);
                                            cj4array[0]=IKcos(j4array[0]);
                                            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                            sj4array[1] = -sj4array[0];
                                            cj4array[1] = -cj4array[0];
                                            if( j4array[0] > IKPI )
                                                j4array[0]-=IK2PI;
                                            else if( j4array[0] < -IKPI )
                                                j4array[0]+=IK2PI;
                                            j4valid[0] = true;
                                            if( j4array[1] > IKPI )
                                                j4array[1]-=IK2PI;
                                            else if( j4array[1] < -IKPI )
                                                j4array[1]+=IK2PI;
                                            j4valid[1] = true;
                                            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                                j4valid[1]=false;
                                            for(int ij4 = 0; ij4 < 2; ++ij4) {
                                            if( !j4valid[ij4] )
                                                continue;
                                            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                            
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j4);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x268=IKsin(j4);
                                                IKReal x269=((IKabs(x268) != 0)?((IKReal)1/(x268)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((_r00)*(x269)), ((_r02)*(x269)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x270=IKcos(j4);
                                                IKReal x271=(x270)*(x270);
                                                IKReal x272=IKcos(j5);
                                                IKReal x273=(x272)*(x272);
                                                IKReal x274=((x271)*(x273));
                                                IKReal x275=((1.00000000000000)+(((-1.00000000000000)*(x274))));
                                                IKReal x276=((IKabs(x275) != 0)?((IKReal)1/(x275)):(IKReal)1.0e30);
                                                IKReal x277=IKsin(j4);
                                                IKReal x278=IKsin(j5);
                                                j6array[0]=IKatan2(((((_r02)*(x270)*(x276)*(x278)))+(((_r00)*(x276)*(x277)))), ((((_r02)*(x276)*(x277)))+(((-1.00000000000000)*(_r00)*(x270)*(x276)*(x278)))));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            }
                                            }
                                            }
                                        }
                                        }
                                        }
                                        }
                                        
                                    } else
                                    {
                                        continue;
                                        
                                    }
                                    }
                                {
                                    IKReal j1eval[5];
                                    IKReal x279=((0.00634999999999764)*(sj2));
                                    IKReal x280=((43.8629921260290)*(sj3)*(x279));
                                    IKReal x281=((x280)+(x279)+(py));
                                    IKReal x282=((-0.0317500000001019)+(((-1.00000000000000)*(x281))));
                                    IKReal x283=((0.0317500000001019)+(x281));
                                    j1eval[0]=x282;
                                    j1eval[1]=x282;
                                    j1eval[2]=x283;
                                    j1eval[3]=x283;
                                    j1eval[4]=x283;
                                    if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  ) {
                                        {
                                        j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                                        {
                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                        bool j0valid[1]={false};
                                        IKReal x284=x253;
                                        IKReal x285=((sj2)*(x284));
                                        IKReal x286=x252;
                                        IKReal x287=((sj2)*(x286));
                                        IKReal x288=((x287)+(x285));
                                        IKReal x289=((IKabs(x288) != 0)?((IKReal)1/(x288)):(IKReal)1.0e30);
                                        j0array[0]=IKatan2(((((0.278529999999591)*(cj3)*(px)*(sj2)*(x289)))+(((-1.00000000000000)*(cj2)*(py)*(pz)*(x289)))+(((-0.0317500000001019)*(cj2)*(pz)*(x289)))+(((0.277949999999691)*(px)*(sj2)*(x289)))), ((((-1.00000000000000)*(cj2)*(px)*(py)*(x289)))+(((-0.277949999999691)*(pz)*(sj2)*(x289)))+(((-0.278529999999591)*(cj3)*(pz)*(sj2)*(x289)))+(((-0.0317500000001019)*(cj2)*(px)*(x289)))));
                                        sj0array[0]=IKsin(j0array[0]);
                                        cj0array[0]=IKcos(j0array[0]);
                                        if( j0array[0] > IKPI )
                                            j0array[0]-=IK2PI;
                                        else if( j0array[0] < -IKPI )
                                            j0array[0]+=IK2PI;
                                        j0valid[0] = true;
                                        { int ij0 = 0;
                                        if( !j0valid[ij0] )
                                            continue;
                                        j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                                        
                                        _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                        _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                        _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                        _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                        _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                        _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                        _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                        {
                                        IKReal j5eval;
                                        j5eval=_r11;
                                        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                            {
                                            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=1.00000000000000;
                                            j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                            {
                                            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=-1.00000000000000;
                                            j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else {
                                            {
                                            IKReal j4array[2], cj4array[2], sj4array[2];
                                            bool j4valid[2]={false};
                                            j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                            sj4array[0]=IKsin(j4array[0]);
                                            cj4array[0]=IKcos(j4array[0]);
                                            j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                            sj4array[1] = -sj4array[0];
                                            cj4array[1] = -cj4array[0];
                                            if( j4array[0] > IKPI )
                                                j4array[0]-=IK2PI;
                                            else if( j4array[0] < -IKPI )
                                                j4array[0]+=IK2PI;
                                            j4valid[0] = true;
                                            if( j4array[1] > IKPI )
                                                j4array[1]-=IK2PI;
                                            else if( j4array[1] < -IKPI )
                                                j4array[1]+=IK2PI;
                                            j4valid[1] = true;
                                            if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                                j4valid[1]=false;
                                            for(int ij4 = 0; ij4 < 2; ++ij4) {
                                            if( !j4valid[ij4] )
                                                continue;
                                            j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                            
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j4);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x290=IKsin(j4);
                                                IKReal x291=((IKabs(x290) != 0)?((IKReal)1/(x290)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((_r00)*(x291)), ((_r02)*(x291)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x292=IKcos(j4);
                                                IKReal x293=(x292)*(x292);
                                                IKReal x294=IKcos(j5);
                                                IKReal x295=(x294)*(x294);
                                                IKReal x296=((x293)*(x295));
                                                IKReal x297=((1.00000000000000)+(((-1.00000000000000)*(x296))));
                                                IKReal x298=((IKabs(x297) != 0)?((IKReal)1/(x297)):(IKReal)1.0e30);
                                                IKReal x299=IKsin(j4);
                                                IKReal x300=IKsin(j5);
                                                j6array[0]=IKatan2(((((_r02)*(x292)*(x298)*(x300)))+(((_r00)*(x298)*(x299)))), ((((-1.00000000000000)*(_r00)*(x292)*(x298)*(x300)))+(((_r02)*(x298)*(x299)))));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            }
                                            }
                                            }
                                        }
                                        }
                                        }
                                        }
                                        
                                    } else
                                    {
                                        continue;
                                        
                                    }
                                    }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j0array[2], cj0array[2], sj0array[2];
                                bool j0valid[2]={false};
                                IKReal x301=x252;
                                IKReal x302=x253;
                                IKReal x303=((x302)+(x301));
                                IKReal x304=((IKabs(x303) != 0)?(pow(x303,-0.500000000000000)):(IKReal)1.0e30);
                                IKReal x305=((0.278529999999591)*(cj2)*(sj3));
                                IKReal x306=((0.00634999999999764)*(cj2));
                                IKReal x307=((x306)+(x305));
                                IKReal x308=((x304)*(x307));
                                if( (x308) < -1.0001 || (x308) > 1.0001 )
                                    continue;
                                IKReal x309=IKasin(x308);
                                IKReal x310=((-1.00000000000000)*(px));
                                IKReal x311=((-1.00000000000000)*(pz));
                                IKReal x312=IKatan2(x310, x311);
                                j0array[0]=((((-1.00000000000000)*(x312)))+(((-1.00000000000000)*(x309))));
                                sj0array[0]=IKsin(j0array[0]);
                                cj0array[0]=IKcos(j0array[0]);
                                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x312)))+(x309));
                                sj0array[1]=IKsin(j0array[1]);
                                cj0array[1]=IKcos(j0array[1]);
                                if( j0array[0] > IKPI )
                                    j0array[0]-=IK2PI;
                                else if( j0array[0] < -IKPI )
                                    j0array[0]+=IK2PI;
                                j0valid[0] = true;
                                if( j0array[1] > IKPI )
                                    j0array[1]-=IK2PI;
                                else if( j0array[1] < -IKPI )
                                    j0array[1]+=IK2PI;
                                j0valid[1] = true;
                                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                    j0valid[1]=false;
                                for(int ij0 = 0; ij0 < 2; ++ij0) {
                                if( !j0valid[ij0] )
                                    continue;
                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                
                                {
                                IKReal evalcond;
                                    evalcond=j0;
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x313=x253;
                                    IKReal x314=x254;
                                    IKReal x315=((x314)+(x313));
                                    IKReal x316=((IKabs(x315) != 0)?((IKReal)1/(x315)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((((0.278529999999591)*(pz)*(sj2)*(sj3)*(x316)))+(((0.0317500000001019)*(pz)*(x316)))+(((0.00634999999999764)*(pz)*(sj2)*(x316)))+(((-0.278529999999591)*(cj3)*(py)*(x316)))+(((-0.277949999999691)*(py)*(x316)))), ((((-0.277949999999691)*(pz)*(x316)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x316)))+(((-0.00634999999999764)*(py)*(sj2)*(x316)))+(((-0.278529999999591)*(cj3)*(pz)*(x316)))+(((-0.0317500000001019)*(py)*(x316)))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    { int ij1 = 0;
                                    if( !j1valid[ij1] )
                                        continue;
                                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[2], cj4array[2], sj4array[2];
                                        bool j4valid[2]={false};
                                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                        sj4array[1] = -sj4array[0];
                                        cj4array[1] = -cj4array[0];
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        if( j4array[1] > IKPI )
                                            j4array[1]-=IK2PI;
                                        else if( j4array[1] < -IKPI )
                                            j4array[1]+=IK2PI;
                                        j4valid[1] = true;
                                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                            j4valid[1]=false;
                                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x317=IKsin(j4);
                                            IKReal x318=((IKabs(x317) != 0)?((IKReal)1/(x317)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r00)*(x318)), ((_r02)*(x318)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x319=IKcos(j4);
                                            IKReal x320=(x319)*(x319);
                                            IKReal x321=IKcos(j5);
                                            IKReal x322=(x321)*(x321);
                                            IKReal x323=((x320)*(x322));
                                            IKReal x324=((1.00000000000000)+(((-1.00000000000000)*(x323))));
                                            IKReal x325=((IKabs(x324) != 0)?((IKReal)1/(x324)):(IKReal)1.0e30);
                                            IKReal x326=IKsin(j4);
                                            IKReal x327=IKsin(j5);
                                            j6array[0]=IKatan2(((((_r00)*(x325)*(x326)))+(((_r02)*(x319)*(x325)*(x327)))), ((((_r02)*(x325)*(x326)))+(((-1.00000000000000)*(_r00)*(x319)*(x325)*(x327)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x328=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                                    IKReal x329=x252;
                                    IKReal x330=(cj0)*(cj0);
                                    IKReal x331=x253;
                                    IKReal x332=((x328)*(x330)*(x331));
                                    IKReal x333=x254;
                                    IKReal x334=((x328)*(x333));
                                    IKReal x335=((x329)+(x332)+(x334));
                                    IKReal x336=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                                    IKReal x337=((2.00000000000000)*(cj0)*(px)*(pz)*(x336));
                                    IKReal x338=((((-1.00000000000000)*(x337)))+(x335));
                                    IKReal x339=((IKabs(x338) != 0)?((IKReal)1/(x338)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((((0.00634999999999764)*(cj0)*(pz)*(sj2)*(x328)*(x339)))+(((-0.278529999999591)*(px)*(sj2)*(sj3)*(x336)*(x339)))+(((-0.0317500000001019)*(px)*(x336)*(x339)))+(((-0.277949999999691)*(py)*(x328)*(x339)))+(((0.278529999999591)*(cj0)*(pz)*(sj2)*(sj3)*(x328)*(x339)))+(((-0.278529999999591)*(cj3)*(py)*(x328)*(x339)))+(((-0.00634999999999764)*(px)*(sj2)*(x336)*(x339)))+(((0.0317500000001019)*(cj0)*(pz)*(x328)*(x339)))), ((((0.277949999999691)*(px)*(x336)*(x339)))+(((-0.00634999999999764)*(py)*(sj2)*(x328)*(x339)))+(((-0.278529999999591)*(cj0)*(cj3)*(pz)*(x328)*(x339)))+(((-0.277949999999691)*(cj0)*(pz)*(x328)*(x339)))+(((0.278529999999591)*(cj3)*(px)*(x336)*(x339)))+(((-0.0317500000001019)*(py)*(x328)*(x339)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x328)*(x339)))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    { int ij1 = 0;
                                    if( !j1valid[ij1] )
                                        continue;
                                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[2], cj4array[2], sj4array[2];
                                        bool j4valid[2]={false};
                                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                        sj4array[1] = -sj4array[0];
                                        cj4array[1] = -cj4array[0];
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        if( j4array[1] > IKPI )
                                            j4array[1]-=IK2PI;
                                        else if( j4array[1] < -IKPI )
                                            j4array[1]+=IK2PI;
                                        j4valid[1] = true;
                                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                            j4valid[1]=false;
                                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x340=IKsin(j4);
                                            IKReal x341=((IKabs(x340) != 0)?((IKReal)1/(x340)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r00)*(x341)), ((_r02)*(x341)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x342=IKcos(j4);
                                            IKReal x343=(x342)*(x342);
                                            IKReal x344=IKcos(j5);
                                            IKReal x345=(x344)*(x344);
                                            IKReal x346=((x343)*(x345));
                                            IKReal x347=((1.00000000000000)+(((-1.00000000000000)*(x346))));
                                            IKReal x348=((IKabs(x347) != 0)?((IKReal)1/(x347)):(IKReal)1.0e30);
                                            IKReal x349=IKsin(j4);
                                            IKReal x350=IKsin(j5);
                                            j6array[0]=IKatan2(((((_r02)*(x342)*(x348)*(x350)))+(((_r00)*(x348)*(x349)))), ((((-1.00000000000000)*(_r00)*(x342)*(x348)*(x350)))+(((_r02)*(x348)*(x349)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            
                        } else
                        {
                            {
                            IKReal j0array[2], cj0array[2], sj0array[2];
                            bool j0valid[2]={false};
                            IKReal x351=x252;
                            IKReal x352=x253;
                            IKReal x353=((x351)+(x352));
                            IKReal x354=((IKabs(x353) != 0)?(pow(x353,-0.500000000000000)):(IKReal)1.0e30);
                            IKReal x355=((0.278529999999591)*(cj2)*(sj3));
                            IKReal x356=((0.00634999999999764)*(cj2));
                            IKReal x357=((x355)+(x356));
                            IKReal x358=((x354)*(x357));
                            if( (x358) < -1.0001 || (x358) > 1.0001 )
                                continue;
                            IKReal x359=IKasin(x358);
                            IKReal x360=((-1.00000000000000)*(px));
                            IKReal x361=((-1.00000000000000)*(pz));
                            IKReal x362=IKatan2(x360, x361);
                            j0array[0]=((((-1.00000000000000)*(x362)))+(((-1.00000000000000)*(x359))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x362)))+(x359));
                            sj0array[1]=IKsin(j0array[1]);
                            cj0array[1]=IKcos(j0array[1]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            if( j0array[1] > IKPI )
                                j0array[1]-=IK2PI;
                            else if( j0array[1] < -IKPI )
                                j0array[1]+=IK2PI;
                            j0valid[1] = true;
                            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                j0valid[1]=false;
                            for(int ij0 = 0; ij0 < 2; ++ij0) {
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                            
                            {
                            IKReal evalcond;
                                evalcond=j0;
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x363=x253;
                                IKReal x364=x254;
                                IKReal x365=((x363)+(x364));
                                IKReal x366=((IKabs(x365) != 0)?((IKReal)1/(x365)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((0.00634999999999764)*(pz)*(sj2)*(x366)))+(((-0.277949999999691)*(py)*(x366)))+(((0.0317500000001019)*(pz)*(x366)))+(((0.278529999999591)*(pz)*(sj2)*(sj3)*(x366)))+(((-0.278529999999591)*(cj3)*(py)*(x366)))), ((((-0.278529999999591)*(cj3)*(pz)*(x366)))+(((-0.00634999999999764)*(py)*(sj2)*(x366)))+(((-0.0317500000001019)*(py)*(x366)))+(((-0.277949999999691)*(pz)*(x366)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x366)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x367=IKsin(j4);
                                        IKReal x368=((IKabs(x367) != 0)?((IKReal)1/(x367)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r00)*(x368)), ((_r02)*(x368)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x369=IKcos(j4);
                                        IKReal x370=(x369)*(x369);
                                        IKReal x371=IKcos(j5);
                                        IKReal x372=(x371)*(x371);
                                        IKReal x373=((x370)*(x372));
                                        IKReal x374=((1.00000000000000)+(((-1.00000000000000)*(x373))));
                                        IKReal x375=((IKabs(x374) != 0)?((IKReal)1/(x374)):(IKReal)1.0e30);
                                        IKReal x376=IKsin(j4);
                                        IKReal x377=IKsin(j5);
                                        j6array[0]=IKatan2(((((_r02)*(x369)*(x375)*(x377)))+(((_r00)*(x375)*(x376)))), ((((-1.00000000000000)*(_r00)*(x369)*(x375)*(x377)))+(((_r02)*(x375)*(x376)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x378=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x379=x252;
                                IKReal x380=(cj0)*(cj0);
                                IKReal x381=x253;
                                IKReal x382=((x378)*(x380)*(x381));
                                IKReal x383=x254;
                                IKReal x384=((x378)*(x383));
                                IKReal x385=((x384)+(x382)+(x379));
                                IKReal x386=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                                IKReal x387=((2.00000000000000)*(cj0)*(px)*(pz)*(x386));
                                IKReal x388=((x385)+(((-1.00000000000000)*(x387))));
                                IKReal x389=((IKabs(x388) != 0)?((IKReal)1/(x388)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((0.00634999999999764)*(cj0)*(pz)*(sj2)*(x378)*(x389)))+(((-0.278529999999591)*(px)*(sj2)*(sj3)*(x386)*(x389)))+(((-0.00634999999999764)*(px)*(sj2)*(x386)*(x389)))+(((-0.0317500000001019)*(px)*(x386)*(x389)))+(((-0.278529999999591)*(cj3)*(py)*(x378)*(x389)))+(((0.278529999999591)*(cj0)*(pz)*(sj2)*(sj3)*(x378)*(x389)))+(((0.0317500000001019)*(cj0)*(pz)*(x378)*(x389)))+(((-0.277949999999691)*(py)*(x378)*(x389)))), ((((0.278529999999591)*(cj3)*(px)*(x386)*(x389)))+(((-0.278529999999591)*(cj0)*(cj3)*(pz)*(x378)*(x389)))+(((-0.277949999999691)*(cj0)*(pz)*(x378)*(x389)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x378)*(x389)))+(((0.277949999999691)*(px)*(x386)*(x389)))+(((-0.0317500000001019)*(py)*(x378)*(x389)))+(((-0.00634999999999764)*(py)*(sj2)*(x378)*(x389)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x390=IKsin(j4);
                                        IKReal x391=((IKabs(x390) != 0)?((IKReal)1/(x390)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r00)*(x391)), ((_r02)*(x391)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x392=IKcos(j4);
                                        IKReal x393=(x392)*(x392);
                                        IKReal x394=IKcos(j5);
                                        IKReal x395=(x394)*(x394);
                                        IKReal x396=((x393)*(x395));
                                        IKReal x397=((1.00000000000000)+(((-1.00000000000000)*(x396))));
                                        IKReal x398=((IKabs(x397) != 0)?((IKReal)1/(x397)):(IKReal)1.0e30);
                                        IKReal x399=IKsin(j4);
                                        IKReal x400=IKsin(j5);
                                        j6array[0]=IKatan2(((((_r00)*(x398)*(x399)))+(((_r02)*(x392)*(x398)*(x400)))), ((((-1.00000000000000)*(_r00)*(x392)*(x398)*(x400)))+(((_r02)*(x398)*(x399)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            
                        }
                        }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j3array[2], cj3array[2], sj3array[2];
                bool j3valid[2]={false};
                IKReal x401=((0.0176866550000341)*(sj2));
                IKReal x402=((0.00353733099998976)+(x401));
                IKReal x403=(x402)*(x402);
                IKReal x404=((0.0239738236518861)+(x403));
                IKReal x405=((IKabs(x404) != 0)?(pow(x404,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x406=((0.0227982623055141)*(x401));
                IKReal x407=((0.155883548399288)+(x406));
                IKReal x408=(px)*(px);
                IKReal x409=(pz)*(pz);
                IKReal x410=(py)*(py);
                IKReal x411=((x409)+(x408)+(x410));
                IKReal x412=((((-1.00000000000000)*(x411)))+(x407));
                IKReal x413=((x405)*(x412));
                if( (x413) < -1.0001 || (x413) > 1.0001 )
                    continue;
                IKReal x414=IKasin(x413);
                IKReal x415=IKatan2(0.154834826998922, x402);
                j3array[0]=((((-1.00000000000000)*(x414)))+(((-1.00000000000000)*(x415))));
                sj3array[0]=IKsin(j3array[0]);
                cj3array[0]=IKcos(j3array[0]);
                j3array[1]=((3.14159265358979)+(((-1.00000000000000)*(x415)))+(x414));
                sj3array[1]=IKsin(j3array[1]);
                cj3array[1]=IKcos(j3array[1]);
                if( j3array[0] > IKPI )
                    j3array[0]-=IK2PI;
                else if( j3array[0] < -IKPI )
                    j3array[0]+=IK2PI;
                j3valid[0] = true;
                if( j3array[1] > IKPI )
                    j3array[1]-=IK2PI;
                else if( j3array[1] < -IKPI )
                    j3array[1]+=IK2PI;
                j3valid[1] = true;
                if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                    j3valid[1]=false;
                for(int ij3 = 0; ij3 < 2; ++ij3) {
                if( !j3valid[ij3] )
                    continue;
                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                
                {
                    IKReal j0eval[1];
                    j0eval[0]=(((px)*(px))+((pz)*(pz)));
                    if( IKabs(j0eval[0]) < 0.000010  ) {
                        {
                        IKReal evalcond;
                            evalcond=(((px)*(px))+((pz)*(pz)));
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                                IKReal j0eval[5];
                                IKReal x416=((0.278529999999591)*(cj2)*(sj3));
                                IKReal x417=((0.00634999999999764)*(cj2));
                                IKReal x418=((x416)+(x417));
                                IKReal x419=((((-1.00000000000000)*(px)))+(x418));
                                j0eval[0]=x419;
                                j0eval[1]=x419;
                                j0eval[2]=x419;
                                j0eval[3]=x419;
                                j0eval[4]=((((-1.00000000000000)*(x418)))+(px));
                                if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  ) {
                                    {
                                    j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x420=x409;
                                    IKReal x421=x410;
                                    IKReal x422=((x421)+(x420));
                                    IKReal x423=((IKabs(x422) != 0)?((IKReal)1/(x422)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((((-0.278529999999591)*(cj3)*(py)*(x423)))+(((0.00634999999999764)*(pz)*(sj2)*(x423)))+(((0.278529999999591)*(pz)*(sj2)*(sj3)*(x423)))+(((-0.277949999999691)*(py)*(x423)))+(((0.0317500000001019)*(pz)*(x423)))), ((((-0.0317500000001019)*(py)*(x423)))+(((-0.277949999999691)*(pz)*(x423)))+(((-0.00634999999999764)*(py)*(sj2)*(x423)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x423)))+(((-0.278529999999591)*(cj3)*(pz)*(x423)))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    { int ij1 = 0;
                                    if( !j1valid[ij1] )
                                        continue;
                                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[2], cj4array[2], sj4array[2];
                                        bool j4valid[2]={false};
                                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                        sj4array[1] = -sj4array[0];
                                        cj4array[1] = -cj4array[0];
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        if( j4array[1] > IKPI )
                                            j4array[1]-=IK2PI;
                                        else if( j4array[1] < -IKPI )
                                            j4array[1]+=IK2PI;
                                        j4valid[1] = true;
                                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                            j4valid[1]=false;
                                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x424=IKsin(j4);
                                            IKReal x425=((IKabs(x424) != 0)?((IKReal)1/(x424)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r00)*(x425)), ((_r02)*(x425)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x426=IKcos(j4);
                                            IKReal x427=(x426)*(x426);
                                            IKReal x428=IKcos(j5);
                                            IKReal x429=(x428)*(x428);
                                            IKReal x430=((x427)*(x429));
                                            IKReal x431=((1.00000000000000)+(((-1.00000000000000)*(x430))));
                                            IKReal x432=((IKabs(x431) != 0)?((IKReal)1/(x431)):(IKReal)1.0e30);
                                            IKReal x433=IKsin(j4);
                                            IKReal x434=IKsin(j5);
                                            j6array[0]=IKatan2(((((_r02)*(x426)*(x432)*(x434)))+(((_r00)*(x432)*(x433)))), ((((_r02)*(x432)*(x433)))+(((-1.00000000000000)*(_r00)*(x426)*(x432)*(x434)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    }
                                    
                                } else
                                {
                                    continue;
                                    
                                }
                                }
                            {
                                IKReal j1eval[5];
                                IKReal x435=((0.00634999999999764)*(sj2));
                                IKReal x436=((43.8629921260290)*(sj3)*(x435));
                                IKReal x437=((x435)+(x436)+(py));
                                IKReal x438=((-0.0317500000001019)+(((-1.00000000000000)*(x437))));
                                IKReal x439=((0.0317500000001019)+(x437));
                                j1eval[0]=x438;
                                j1eval[1]=x438;
                                j1eval[2]=x439;
                                j1eval[3]=x439;
                                j1eval[4]=x439;
                                if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  ) {
                                    {
                                    j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                                    {
                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                    bool j0valid[1]={false};
                                    IKReal x440=x409;
                                    IKReal x441=((sj2)*(x440));
                                    IKReal x442=x408;
                                    IKReal x443=((sj2)*(x442));
                                    IKReal x444=((x441)+(x443));
                                    IKReal x445=((IKabs(x444) != 0)?((IKReal)1/(x444)):(IKReal)1.0e30);
                                    j0array[0]=IKatan2(((((-0.0317500000001019)*(cj2)*(pz)*(x445)))+(((-1.00000000000000)*(cj2)*(py)*(pz)*(x445)))+(((0.277949999999691)*(px)*(sj2)*(x445)))+(((0.278529999999591)*(cj3)*(px)*(sj2)*(x445)))), ((((-0.277949999999691)*(pz)*(sj2)*(x445)))+(((-0.278529999999591)*(cj3)*(pz)*(sj2)*(x445)))+(((-0.0317500000001019)*(cj2)*(px)*(x445)))+(((-1.00000000000000)*(cj2)*(px)*(py)*(x445)))));
                                    sj0array[0]=IKsin(j0array[0]);
                                    cj0array[0]=IKcos(j0array[0]);
                                    if( j0array[0] > IKPI )
                                        j0array[0]-=IK2PI;
                                    else if( j0array[0] < -IKPI )
                                        j0array[0]+=IK2PI;
                                    j0valid[0] = true;
                                    { int ij0 = 0;
                                    if( !j0valid[ij0] )
                                        continue;
                                    j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[2], cj4array[2], sj4array[2];
                                        bool j4valid[2]={false};
                                        j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                        sj4array[1] = -sj4array[0];
                                        cj4array[1] = -cj4array[0];
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        if( j4array[1] > IKPI )
                                            j4array[1]-=IK2PI;
                                        else if( j4array[1] < -IKPI )
                                            j4array[1]+=IK2PI;
                                        j4valid[1] = true;
                                        if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                            j4valid[1]=false;
                                        for(int ij4 = 0; ij4 < 2; ++ij4) {
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x446=IKsin(j4);
                                            IKReal x447=((IKabs(x446) != 0)?((IKReal)1/(x446)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r00)*(x447)), ((_r02)*(x447)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x448=IKcos(j4);
                                            IKReal x449=(x448)*(x448);
                                            IKReal x450=IKcos(j5);
                                            IKReal x451=(x450)*(x450);
                                            IKReal x452=((x449)*(x451));
                                            IKReal x453=((1.00000000000000)+(((-1.00000000000000)*(x452))));
                                            IKReal x454=((IKabs(x453) != 0)?((IKReal)1/(x453)):(IKReal)1.0e30);
                                            IKReal x455=IKsin(j4);
                                            IKReal x456=IKsin(j5);
                                            j6array[0]=IKatan2(((((_r02)*(x448)*(x454)*(x456)))+(((_r00)*(x454)*(x455)))), ((((_r02)*(x454)*(x455)))+(((-1.00000000000000)*(_r00)*(x448)*(x454)*(x456)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    }
                                    
                                } else
                                {
                                    continue;
                                    
                                }
                                }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j0array[2], cj0array[2], sj0array[2];
                            bool j0valid[2]={false};
                            IKReal x457=x408;
                            IKReal x458=x409;
                            IKReal x459=((x458)+(x457));
                            IKReal x460=((IKabs(x459) != 0)?(pow(x459,-0.500000000000000)):(IKReal)1.0e30);
                            IKReal x461=((0.278529999999591)*(cj2)*(sj3));
                            IKReal x462=((0.00634999999999764)*(cj2));
                            IKReal x463=((x462)+(x461));
                            IKReal x464=((x460)*(x463));
                            if( (x464) < -1.0001 || (x464) > 1.0001 )
                                continue;
                            IKReal x465=IKasin(x464);
                            IKReal x466=((-1.00000000000000)*(px));
                            IKReal x467=((-1.00000000000000)*(pz));
                            IKReal x468=IKatan2(x466, x467);
                            j0array[0]=((((-1.00000000000000)*(x465)))+(((-1.00000000000000)*(x468))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            j0array[1]=((3.14159265358979)+(x465)+(((-1.00000000000000)*(x468))));
                            sj0array[1]=IKsin(j0array[1]);
                            cj0array[1]=IKcos(j0array[1]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            if( j0array[1] > IKPI )
                                j0array[1]-=IK2PI;
                            else if( j0array[1] < -IKPI )
                                j0array[1]+=IK2PI;
                            j0valid[1] = true;
                            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                j0valid[1]=false;
                            for(int ij0 = 0; ij0 < 2; ++ij0) {
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                            
                            {
                            IKReal evalcond;
                                evalcond=j0;
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x469=x409;
                                IKReal x470=x410;
                                IKReal x471=((x470)+(x469));
                                IKReal x472=((IKabs(x471) != 0)?((IKReal)1/(x471)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((0.278529999999591)*(pz)*(sj2)*(sj3)*(x472)))+(((0.0317500000001019)*(pz)*(x472)))+(((0.00634999999999764)*(pz)*(sj2)*(x472)))+(((-0.277949999999691)*(py)*(x472)))+(((-0.278529999999591)*(cj3)*(py)*(x472)))), ((((-0.278529999999591)*(py)*(sj2)*(sj3)*(x472)))+(((-0.277949999999691)*(pz)*(x472)))+(((-0.00634999999999764)*(py)*(sj2)*(x472)))+(((-0.278529999999591)*(cj3)*(pz)*(x472)))+(((-0.0317500000001019)*(py)*(x472)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x473=IKsin(j4);
                                        IKReal x474=((IKabs(x473) != 0)?((IKReal)1/(x473)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r00)*(x474)), ((_r02)*(x474)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x475=IKcos(j4);
                                        IKReal x476=(x475)*(x475);
                                        IKReal x477=IKcos(j5);
                                        IKReal x478=(x477)*(x477);
                                        IKReal x479=((x476)*(x478));
                                        IKReal x480=((1.00000000000000)+(((-1.00000000000000)*(x479))));
                                        IKReal x481=((IKabs(x480) != 0)?((IKReal)1/(x480)):(IKReal)1.0e30);
                                        IKReal x482=IKsin(j4);
                                        IKReal x483=IKsin(j5);
                                        j6array[0]=IKatan2(((((_r02)*(x475)*(x481)*(x483)))+(((_r00)*(x481)*(x482)))), ((((-1.00000000000000)*(_r00)*(x475)*(x481)*(x483)))+(((_r02)*(x481)*(x482)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x484=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x485=x408;
                                IKReal x486=(cj0)*(cj0);
                                IKReal x487=x409;
                                IKReal x488=((x484)*(x486)*(x487));
                                IKReal x489=x410;
                                IKReal x490=((x484)*(x489));
                                IKReal x491=((x490)+(x488)+(x485));
                                IKReal x492=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                                IKReal x493=((2.00000000000000)*(cj0)*(px)*(pz)*(x492));
                                IKReal x494=((((-1.00000000000000)*(x493)))+(x491));
                                IKReal x495=((IKabs(x494) != 0)?((IKReal)1/(x494)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((-0.277949999999691)*(py)*(x484)*(x495)))+(((0.0317500000001019)*(cj0)*(pz)*(x484)*(x495)))+(((-0.278529999999591)*(cj3)*(py)*(x484)*(x495)))+(((0.00634999999999764)*(cj0)*(pz)*(sj2)*(x484)*(x495)))+(((0.278529999999591)*(cj0)*(pz)*(sj2)*(sj3)*(x484)*(x495)))+(((-0.00634999999999764)*(px)*(sj2)*(x492)*(x495)))+(((-0.278529999999591)*(px)*(sj2)*(sj3)*(x492)*(x495)))+(((-0.0317500000001019)*(px)*(x492)*(x495)))), ((((0.278529999999591)*(cj3)*(px)*(x492)*(x495)))+(((-0.00634999999999764)*(py)*(sj2)*(x484)*(x495)))+(((-0.0317500000001019)*(py)*(x484)*(x495)))+(((-0.277949999999691)*(cj0)*(pz)*(x484)*(x495)))+(((-0.278529999999591)*(cj0)*(cj3)*(pz)*(x484)*(x495)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x484)*(x495)))+(((0.277949999999691)*(px)*(x492)*(x495)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[2], cj4array[2], sj4array[2];
                                    bool j4valid[2]={false};
                                    j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                    sj4array[1] = -sj4array[0];
                                    cj4array[1] = -cj4array[0];
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    if( j4array[1] > IKPI )
                                        j4array[1]-=IK2PI;
                                    else if( j4array[1] < -IKPI )
                                        j4array[1]+=IK2PI;
                                    j4valid[1] = true;
                                    if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                        j4valid[1]=false;
                                    for(int ij4 = 0; ij4 < 2; ++ij4) {
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x496=IKsin(j4);
                                        IKReal x497=((IKabs(x496) != 0)?((IKReal)1/(x496)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r00)*(x497)), ((_r02)*(x497)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x498=IKcos(j4);
                                        IKReal x499=(x498)*(x498);
                                        IKReal x500=IKcos(j5);
                                        IKReal x501=(x500)*(x500);
                                        IKReal x502=((x499)*(x501));
                                        IKReal x503=((1.00000000000000)+(((-1.00000000000000)*(x502))));
                                        IKReal x504=((IKabs(x503) != 0)?((IKReal)1/(x503)):(IKReal)1.0e30);
                                        IKReal x505=IKsin(j4);
                                        IKReal x506=IKsin(j5);
                                        j6array[0]=IKatan2(((((_r02)*(x498)*(x504)*(x506)))+(((_r00)*(x504)*(x505)))), ((((_r02)*(x504)*(x505)))+(((-1.00000000000000)*(_r00)*(x498)*(x504)*(x506)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        
                    } else
                    {
                        {
                        IKReal j0array[2], cj0array[2], sj0array[2];
                        bool j0valid[2]={false};
                        IKReal x507=x408;
                        IKReal x508=x409;
                        IKReal x509=((x508)+(x507));
                        IKReal x510=((IKabs(x509) != 0)?(pow(x509,-0.500000000000000)):(IKReal)1.0e30);
                        IKReal x511=((0.278529999999591)*(cj2)*(sj3));
                        IKReal x512=((0.00634999999999764)*(cj2));
                        IKReal x513=((x512)+(x511));
                        IKReal x514=((x510)*(x513));
                        if( (x514) < -1.0001 || (x514) > 1.0001 )
                            continue;
                        IKReal x515=IKasin(x514);
                        IKReal x516=((-1.00000000000000)*(px));
                        IKReal x517=((-1.00000000000000)*(pz));
                        IKReal x518=IKatan2(x516, x517);
                        j0array[0]=((((-1.00000000000000)*(x518)))+(((-1.00000000000000)*(x515))));
                        sj0array[0]=IKsin(j0array[0]);
                        cj0array[0]=IKcos(j0array[0]);
                        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x518)))+(x515));
                        sj0array[1]=IKsin(j0array[1]);
                        cj0array[1]=IKcos(j0array[1]);
                        if( j0array[0] > IKPI )
                            j0array[0]-=IK2PI;
                        else if( j0array[0] < -IKPI )
                            j0array[0]+=IK2PI;
                        j0valid[0] = true;
                        if( j0array[1] > IKPI )
                            j0array[1]-=IK2PI;
                        else if( j0array[1] < -IKPI )
                            j0array[1]+=IK2PI;
                        j0valid[1] = true;
                        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                            j0valid[1]=false;
                        for(int ij0 = 0; ij0 < 2; ++ij0) {
                        if( !j0valid[ij0] )
                            continue;
                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                        
                        {
                        IKReal evalcond;
                            evalcond=j0;
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x519=x409;
                            IKReal x520=x410;
                            IKReal x521=((x519)+(x520));
                            IKReal x522=((IKabs(x521) != 0)?((IKReal)1/(x521)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((0.0317500000001019)*(pz)*(x522)))+(((0.00634999999999764)*(pz)*(sj2)*(x522)))+(((-0.277949999999691)*(py)*(x522)))+(((0.278529999999591)*(pz)*(sj2)*(sj3)*(x522)))+(((-0.278529999999591)*(cj3)*(py)*(x522)))), ((((-0.278529999999591)*(cj3)*(pz)*(x522)))+(((-0.00634999999999764)*(py)*(sj2)*(x522)))+(((-0.0317500000001019)*(py)*(x522)))+(((-0.278529999999591)*(py)*(sj2)*(sj3)*(x522)))+(((-0.277949999999691)*(pz)*(x522)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                            _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                            _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                            _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                            _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x523=IKsin(j4);
                                    IKReal x524=((IKabs(x523) != 0)?((IKReal)1/(x523)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r00)*(x524)), ((_r02)*(x524)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x525=IKcos(j4);
                                    IKReal x526=(x525)*(x525);
                                    IKReal x527=IKcos(j5);
                                    IKReal x528=(x527)*(x527);
                                    IKReal x529=((x526)*(x528));
                                    IKReal x530=((1.00000000000000)+(((-1.00000000000000)*(x529))));
                                    IKReal x531=((IKabs(x530) != 0)?((IKReal)1/(x530)):(IKReal)1.0e30);
                                    IKReal x532=IKsin(j4);
                                    IKReal x533=IKsin(j5);
                                    j6array[0]=IKatan2(((((_r00)*(x531)*(x532)))+(((_r02)*(x525)*(x531)*(x533)))), ((((_r02)*(x531)*(x532)))+(((-1.00000000000000)*(_r00)*(x525)*(x531)*(x533)))));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x534=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                            IKReal x535=x408;
                            IKReal x536=(cj0)*(cj0);
                            IKReal x537=x409;
                            IKReal x538=((x534)*(x536)*(x537));
                            IKReal x539=x410;
                            IKReal x540=((x534)*(x539));
                            IKReal x541=((x540)+(x535)+(x538));
                            IKReal x542=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                            IKReal x543=((2.00000000000000)*(cj0)*(px)*(pz)*(x542));
                            IKReal x544=((x541)+(((-1.00000000000000)*(x543))));
                            IKReal x545=((IKabs(x544) != 0)?((IKReal)1/(x544)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((-0.0317500000001019)*(px)*(x542)*(x545)))+(((0.00634999999999764)*(cj0)*(pz)*(sj2)*(x534)*(x545)))+(((0.0317500000001019)*(cj0)*(pz)*(x534)*(x545)))+(((-0.278529999999591)*(cj3)*(py)*(x534)*(x545)))+(((-0.00634999999999764)*(px)*(sj2)*(x542)*(x545)))+(((0.278529999999591)*(cj0)*(pz)*(sj2)*(sj3)*(x534)*(x545)))+(((-0.277949999999691)*(py)*(x534)*(x545)))+(((-0.278529999999591)*(px)*(sj2)*(sj3)*(x542)*(x545)))), ((((-0.278529999999591)*(py)*(sj2)*(sj3)*(x534)*(x545)))+(((-0.0317500000001019)*(py)*(x534)*(x545)))+(((-0.277949999999691)*(cj0)*(pz)*(x534)*(x545)))+(((0.277949999999691)*(px)*(x542)*(x545)))+(((0.278529999999591)*(cj3)*(px)*(x542)*(x545)))+(((-0.00634999999999764)*(py)*(sj2)*(x534)*(x545)))+(((-0.278529999999591)*(cj0)*(cj3)*(pz)*(x534)*(x545)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                            _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                            _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                            _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                            _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r00)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(IKatan2(_r02, _r00))))+(((-1.00000000000000)*(3.14159265358979))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[2], cj4array[2], sj4array[2];
                                bool j4valid[2]={false};
                                j4array[0]=IKatan2(((-1.00000000000000)*(_r21)), _r01);
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                j4array[1] = j4array[0] > 0 ? j4array[0]-IKPI : j4array[0]+IKPI;
                                sj4array[1] = -sj4array[0];
                                cj4array[1] = -cj4array[0];
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                if( j4array[1] > IKPI )
                                    j4array[1]-=IK2PI;
                                else if( j4array[1] < -IKPI )
                                    j4array[1]+=IK2PI;
                                j4valid[1] = true;
                                if( j4valid[0] && j4valid[1] && IKabs(cj4array[0]-cj4array[1]) < 0.0001 && IKabs(sj4array[0]-sj4array[1]) < 0.0001 )
                                    j4valid[1]=false;
                                for(int ij4 = 0; ij4 < 2; ++ij4) {
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKcos(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(IKsin(j4)) != 0)?((IKReal)1/(IKsin(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x546=IKsin(j4);
                                    IKReal x547=((IKabs(x546) != 0)?((IKReal)1/(x546)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r00)*(x547)), ((_r02)*(x547)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(cj4) != 0)?((IKReal)1/(cj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x548=IKcos(j4);
                                    IKReal x549=(x548)*(x548);
                                    IKReal x550=IKcos(j5);
                                    IKReal x551=(x550)*(x550);
                                    IKReal x552=((x549)*(x551));
                                    IKReal x553=((1.00000000000000)+(((-1.00000000000000)*(x552))));
                                    IKReal x554=((IKabs(x553) != 0)?((IKReal)1/(x553)):(IKReal)1.0e30);
                                    IKReal x555=IKsin(j4);
                                    IKReal x556=IKsin(j5);
                                    j6array[0]=IKatan2(((((_r00)*(x554)*(x555)))+(((_r02)*(x548)*(x554)*(x556)))), ((((_r02)*(x554)*(x555)))+(((-1.00000000000000)*(_r00)*(x548)*(x554)*(x556)))));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        
                    }
                    }
                }
                }
                
            }
            }
        } else {
    }
    }
    }
    }
    }
    }
    }
return vsolutions.size()>0;
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
