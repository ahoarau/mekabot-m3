/// autogenerated analytical inverse kinematics code from ikfast program
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// To compile with gcc use: gcc -lstdc++ 
/// To compile without any main function use: gcc -lstdc++ -DIKFAST_NO_MAIN
#include <math.h>
#include <assert.h>
#include <vector>
#include <float.h>

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

typedef double IKReal;
class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                assert(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI )
                    psolution[i] -= IK2PI;
                else if( psolution[i] < -IKPI )
                    psolution[i] += IK2PI;
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKasin(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

inline float IKacos(float f)
{
assert( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0f;
return acosf(f);
}
inline double IKacos(double f)
{
assert( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0.0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        assert(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 1; }

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
    IKReal j0, cj0, sj0,
    j1, cj1, sj1,
    j3, cj3, sj3,
    j4, cj4, sj4,
    j5, cj5, sj5,
    j6, cj6, sj6,
    j2=pfree[0], cj2=cos(pfree[0]), sj2=sin(pfree[0]),
    _r00, r00 = eerot[0*3+0],
    _r01, r01 = eerot[0*3+1],
    _r02, r02 = eerot[0*3+2],
    _r10, r10 = eerot[1*3+0],
    _r11, r11 = eerot[1*3+1],
    _r12, r12 = eerot[1*3+2],
    _r20, r20 = eerot[2*3+0],
    _r21, r21 = eerot[2*3+1],
    _r22, r22 = eerot[2*3+2],
    _px, _py, _pz, px = eetrans[0], py = eetrans[1], pz = eetrans[2];
    
    _r00=((-1.00000000000000)*(r01));
    _r01=((-1.00000000000000)*(r02));
    _r02=r00;
    _px=px;
    _r10=((-1.00000000000000)*(r11));
    _r11=((-1.00000000000000)*(r12));
    _r12=r10;
    _py=((0.184650000000000)+(py));
    _r20=((-1.00000000000000)*(r21));
    _r21=((-1.00000000000000)*(r22));
    _r22=r20;
    _pz=pz;
    r00 = _r00; r01 = _r01; r02 = _r02; r10 = _r10; r11 = _r11; r12 = _r12; r20 = _r20; r21 = _r21; r22 = _r22; px = _px; py = _py; pz = _pz;
    {
    IKReal evalcond;
        evalcond=j2;
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x0=(py)*(py);
        IKReal x1=((6.46768888004590)*(x0));
        IKReal x2=(pz)*(pz);
        IKReal x3=((6.46768888004590)*(x2));
        IKReal x4=(px)*(px);
        IKReal x5=((6.46768888004590)*(x4));
        IKReal x6=((x3)+(x1)+(x5));
        IKReal x7=((1.00652831730258)+(((-1.00000000000000)*(x6))));
        if( (x7) < -1.0001 || (x7) > 1.0001 )
            continue;
        IKReal x8=IKasin(x7);
        j3array[0]=((-1.55277767186469)+(((-1.00000000000000)*(x8))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.58881498172510)+(x8));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j0eval[1];
            j0eval[0]=(((px)*(px))+((pz)*(pz)));
            if( IKabs(j0eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=(((px)*(px))+((pz)*(pz)));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[7];
                        IKReal x9=((0.277470000000903)*(sj3));
                        IKReal x10=((0.00502000000000180)+(x9));
                        IKReal x11=((((-1.00000000000000)*(px)))+(x10));
                        IKReal x12=((-0.00502000000000180)+(px));
                        IKReal x13=((x12)+(((-1.00000000000000)*(x9))));
                        j0eval[0]=x11;
                        j0eval[1]=x11;
                        j0eval[2]=x11;
                        j0eval[3]=x11;
                        j0eval[4]=x13;
                        j0eval[5]=x13;
                        j0eval[6]=x13;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  && IKabs(j0eval[5]) < 0.000100  && IKabs(j0eval[6]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x14=x2;
                            IKReal x15=x0;
                            IKReal x16=((x15)+(x14));
                            IKReal x17=((IKabs(x16) != 0)?((IKReal)1/(x16)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((-0.278569999998581)*(py)*(x17)))+(((-0.277470000000903)*(cj3)*(py)*(x17)))+(((0.0317500000001019)*(pz)*(x17)))), ((((-0.277470000000903)*(cj3)*(pz)*(x17)))+(((-0.0317500000001019)*(py)*(x17)))+(((-0.278569999998581)*(pz)*(x17)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                            _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                            _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                            _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                            _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKsin(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x18=IKcos(j4);
                                    IKReal x19=((IKabs(x18) != 0)?((IKReal)1/(x18)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r20)*(x19)), ((_r22)*(x19)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x20=IKsin(j5);
                                        IKReal x21=((IKabs(x20) != 0)?((IKReal)1/(x20)):(IKReal)1.0e30);
                                        IKReal x22=IKcos(j4);
                                        IKReal x23=IKsin(j4);
                                        j6array[0]=IKatan2(((((_r02)*(x21)*(x22)))+(((-1.00000000000000)*(_r22)*(x21)*(x23)))), ((((_r22)*(x22)))+(((_r02)*(x23)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x24=IKcos(j5);
                                        IKReal x25=((IKabs(x24) != 0)?((IKReal)1/(x24)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x25)), ((_r10)*(x25)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[3];
                        IKReal x26=((-0.0317500000001019)+(((-1.00000000000000)*(py))));
                        j1eval[0]=x26;
                        j1eval[1]=x26;
                        j1eval[2]=((0.0317500000001019)+(py));
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1]={false};
                            IKReal x27=x4;
                            IKReal x28=x2;
                            IKReal x29=((x27)+(x28));
                            IKReal x30=((IKabs(x29) != 0)?((IKReal)1/(x29)):(IKReal)1.0e30);
                            j0array[0]=IKatan2(((((0.277470000000903)*(pz)*(sj3)*(x30)))+(((0.278569999998581)*(px)*(x30)))+(((0.277470000000903)*(cj3)*(px)*(x30)))+(((0.00502000000000180)*(pz)*(x30)))), ((((0.277470000000903)*(px)*(sj3)*(x30)))+(((0.00502000000000180)*(px)*(x30)))+(((-0.277470000000903)*(cj3)*(pz)*(x30)))+(((-0.278569999998581)*(pz)*(x30)))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            { int ij0 = 0;
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                            
                            _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                            _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                            _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                            _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                            _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKsin(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x31=IKcos(j4);
                                    IKReal x32=((IKabs(x31) != 0)?((IKReal)1/(x31)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r20)*(x32)), ((_r22)*(x32)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x33=IKsin(j5);
                                        IKReal x34=((IKabs(x33) != 0)?((IKReal)1/(x33)):(IKReal)1.0e30);
                                        IKReal x35=IKcos(j4);
                                        IKReal x36=IKsin(j4);
                                        j6array[0]=IKatan2(((((-1.00000000000000)*(_r22)*(x34)*(x36)))+(((_r02)*(x34)*(x35)))), ((((_r22)*(x35)))+(((_r02)*(x36)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x37=IKcos(j5);
                                        IKReal x38=((IKabs(x37) != 0)?((IKReal)1/(x37)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x38)), ((_r10)*(x38)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j0array[2], cj0array[2], sj0array[2];
                    bool j0valid[2]={false};
                    IKReal x39=x4;
                    IKReal x40=x2;
                    IKReal x41=((x40)+(x39));
                    IKReal x42=((IKabs(x41) != 0)?(pow(x41,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x43=((0.277470000000903)*(sj3));
                    IKReal x44=((0.00502000000000180)+(x43));
                    IKReal x45=((x42)*(x44));
                    if( (x45) < -1.0001 || (x45) > 1.0001 )
                        continue;
                    IKReal x46=IKasin(x45);
                    IKReal x47=((-1.00000000000000)*(px));
                    IKReal x48=((-1.00000000000000)*(pz));
                    IKReal x49=IKatan2(x47, x48);
                    j0array[0]=((((-1.00000000000000)*(x46)))+(((-1.00000000000000)*(x49))));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    j0array[1]=((3.14159265358979)+(x46)+(((-1.00000000000000)*(x49))));
                    sj0array[1]=IKsin(j0array[1]);
                    cj0array[1]=IKcos(j0array[1]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    if( j0array[1] > IKPI )
                        j0array[1]-=IK2PI;
                    else if( j0array[1] < -IKPI )
                        j0array[1]+=IK2PI;
                    j0valid[1] = true;
                    if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                        j0valid[1]=false;
                    for(int ij0 = 0; ij0 < 2; ++ij0) {
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x50=((0.0317500000001019)*(px)*(sj0));
                    IKReal x51=((0.278569999998581)*(py));
                    IKReal x52=((0.0317500000001019)*(cj0)*(pz));
                    IKReal x53=((0.996051261805405)*(cj3)*(x51));
                    IKReal x54=((x51)+(x53)+(x52));
                    IKReal x55=((x50)+(((-1.00000000000000)*(x54))));
                    IKReal x56=((IKabs(x55) != 0)?((IKReal)1/(x55)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((-0.00100806250000574)*(x56)))+(((x56)*((py)*(py))))), ((((-113.063370040618)*(x50)*(x51)*(x56)))+(((113.063370040618)*(x51)*(x52)*(x56)))+(((0.00880967250009235)*(cj3)*(x56)))+(((0.00884459750000133)*(x56)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                    _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                    _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                    _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                    _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                    _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                    _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                    _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                    _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                    {
                    IKReal j5eval;
                    j5eval=_r11;
                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[1], cj4array[1], sj4array[1];
                        bool j4valid[1]={false};
                        j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        { int ij4 = 0;
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKsin(j4);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x57=IKcos(j4);
                            IKReal x58=((IKabs(x57) != 0)?((IKReal)1/(x57)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((_r20)*(x58)), ((_r22)*(x58)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j5array[1], cj5array[1], sj5array[1];
                            bool j5valid[1]={false};
                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                            sj5array[0]=IKsin(j5array[0]);
                            cj5array[0]=IKcos(j5array[0]);
                            if( j5array[0] > IKPI )
                                j5array[0]-=IK2PI;
                            else if( j5array[0] < -IKPI )
                                j5array[0]+=IK2PI;
                            j5valid[0] = true;
                            { int ij5 = 0;
                            if( !j5valid[ij5] )
                                continue;
                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                            
                            {
                            IKReal evalcond;
                                evalcond=IKcos(j5);
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x59=IKsin(j5);
                                IKReal x60=((IKabs(x59) != 0)?((IKReal)1/(x59)):(IKReal)1.0e30);
                                IKReal x61=IKcos(j4);
                                IKReal x62=IKsin(j4);
                                j6array[0]=IKatan2(((((_r02)*(x60)*(x61)))+(((-1.00000000000000)*(_r22)*(x60)*(x62)))), ((((_r02)*(x62)))+(((_r22)*(x61)))));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x63=IKcos(j5);
                                IKReal x64=((IKabs(x63) != 0)?((IKReal)1/(x63)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x64)), ((_r10)*(x64)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x65=x4;
                IKReal x66=x2;
                IKReal x67=((x65)+(x66));
                IKReal x68=((IKabs(x67) != 0)?(pow(x67,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x69=((0.277470000000903)*(sj3));
                IKReal x70=((0.00502000000000180)+(x69));
                IKReal x71=((x68)*(x70));
                if( (x71) < -1.0001 || (x71) > 1.0001 )
                    continue;
                IKReal x72=IKasin(x71);
                IKReal x73=((-1.00000000000000)*(px));
                IKReal x74=((-1.00000000000000)*(pz));
                IKReal x75=IKatan2(x73, x74);
                j0array[0]=((((-1.00000000000000)*(x75)))+(((-1.00000000000000)*(x72))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x75)))+(x72));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0) {
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x76=((0.0317500000001019)*(px)*(sj0));
                IKReal x77=((0.278569999998581)*(py));
                IKReal x78=((0.0317500000001019)*(cj0)*(pz));
                IKReal x79=((0.996051261805405)*(cj3)*(x77));
                IKReal x80=((x77)+(x79)+(x78));
                IKReal x81=((x76)+(((-1.00000000000000)*(x80))));
                IKReal x82=((IKabs(x81) != 0)?((IKReal)1/(x81)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((-0.00100806250000574)*(x82)))+(((x82)*((py)*(py))))), ((((0.00884459750000133)*(x82)))+(((-113.063370040618)*(x76)*(x77)*(x82)))+(((113.063370040618)*(x77)*(x78)*(x82)))+(((0.00880967250009235)*(cj3)*(x82)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(cj3)*(r20)*(sj0)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                _r01=((((-1.00000000000000)*(cj0)*(cj3)*(r01)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r21)*(sj0))));
                _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r02)))+(((-1.00000000000000)*(cj3)*(r22)*(sj0)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
                _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((cj0)*(r00)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                _r11=((((cj0)*(r01)*(sj3)))+(((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((r21)*(sj0)*(sj3))));
                _r12=((((r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r02)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                _r20=((((-1.00000000000000)*(cj1)*(r10)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)))+(((cj0)*(r20)*(sj1))));
                _r21=((((cj0)*(r21)*(sj1)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r11))));
                _r22=((((-1.00000000000000)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(r12)))+(((cj0)*(r22)*(sj1))));
                {
                IKReal j5eval;
                j5eval=_r11;
                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[1], cj4array[1], sj4array[1];
                    bool j4valid[1]={false};
                    j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    { int ij4 = 0;
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                    
                    {
                    IKReal evalcond;
                        evalcond=IKsin(j4);
                        if( IKabs(evalcond) < 0.00001 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x83=IKcos(j4);
                        IKReal x84=((IKabs(x83) != 0)?((IKReal)1/(x83)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((_r20)*(x84)), ((_r22)*(x84)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        } else {
                        if( 1 ) {
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal evalcond;
                            evalcond=IKcos(j5);
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x85=IKsin(j5);
                            IKReal x86=((IKabs(x85) != 0)?((IKReal)1/(x85)):(IKReal)1.0e30);
                            IKReal x87=IKcos(j4);
                            IKReal x88=IKsin(j4);
                            j6array[0]=IKatan2(((((_r02)*(x86)*(x87)))+(((-1.00000000000000)*(_r22)*(x86)*(x88)))), ((((_r02)*(x88)))+(((_r22)*(x87)))));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1]={false};
                            IKReal x89=IKcos(j5);
                            IKReal x90=((IKabs(x89) != 0)?((IKReal)1/(x89)):(IKReal)1.0e30);
                            j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x90)), ((_r10)*(x90)));
                            sj6array[0]=IKsin(j6array[0]);
                            cj6array[0]=IKcos(j6array[0]);
                            if( j6array[0] > IKPI )
                                j6array[0]-=IK2PI;
                            else if( j6array[0] < -IKPI )
                                j6array[0]+=IK2PI;
                            j6valid[0] = true;
                            { int ij6 = 0;
                            if( !j6valid[ij6] )
                                continue;
                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                            
                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                            solution.basesol.resize(7);
                            solution.basesol[0].foffset = j0;
                            solution.basesol[1].foffset = j1;
                            solution.basesol[2].foffset = j2;
                            solution.basesol[3].foffset = j3;
                            solution.basesol[4].foffset = j4;
                            solution.basesol[5].foffset = j5;
                            solution.basesol[6].foffset = j6;
                            solution.vfree.resize(0);
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        } else {
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((((-0.500000000000000)*(3.14159265358979)))+(j2));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x91=((-1.00000000000000)*(px));
        IKReal x92=((-1.00000000000000)*(pz));
        IKReal x93=IKatan2(x91, x92);
        j0array[0]=((-1.00000000000000)*(x93));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x93))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0) {
        if( !j0valid[ij0] )
            continue;
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x94=(pz)*(pz);
        IKReal x95=((6.41311293322360)*(x94));
        IKReal x96=(px)*(px);
        IKReal x97=((6.41311293322360)*(x96));
        IKReal x98=(py)*(py);
        IKReal x99=((6.41311293322360)*(x98));
        IKReal x100=((x99)+(x95)+(x97));
        IKReal x101=((1.00007929223648)+(((-1.00000000000000)*(x100))));
        if( (x101) < -1.0001 || (x101) > 1.0001 )
            continue;
        IKReal x102=IKasin(x101);
        j3array[0]=((-1.43955944136014)+(((-1.00000000000000)*(x102))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.70203321222965)+(x102));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
        IKReal x103=((0.277470000000903)*(cj3)*(px)*(sj0));
        IKReal x104=((0.278569999998581)*(px)*(sj0));
        IKReal x105=((0.0367700000001605)*(py));
        IKReal x106=((7.54609736200655)*(sj3)*(x105));
        IKReal x107=((x104)+(x105)+(x106)+(x103));
        IKReal x108=((0.277470000000903)*(cj0)*(cj3)*(pz));
        IKReal x109=((0.278569999998581)*(cj0)*(pz));
        IKReal x110=((x108)+(x109));
        IKReal x111=((x107)+(((-1.00000000000000)*(x110))));
        IKReal x112=((IKabs(x111) != 0)?((IKReal)1/(x111)):(IKReal)1.0e30);
        j1array[0]=IKatan2(((((-0.0102025719000949)*(cj3)*(x112)))+(((-0.0772948179001105)*(sj3)*(x112)))+(((97.6274680113420)*(x105)*(x109)*(x112)))+(((-0.0769896009005606)*(cj3)*(sj3)*(x112)))+(((-97.6274680113420)*(x104)*(x105)*(x112)))+(((-0.0102430189000415)*(x112)))), ((((0.154589635800221)*(cj3)*(x112)))+(((-1.00000000000000)*(x112)*((py)*(py))))+(((0.0776012448995971)*(x112)))+(((0.0769896009005606)*(x112)*((cj3)*(cj3))))));
        sj1array[0]=IKsin(j1array[0]);
        cj1array[0]=IKcos(j1array[0]);
        if( j1array[0] > IKPI )
            j1array[0]-=IK2PI;
        else if( j1array[0] < -IKPI )
            j1array[0]+=IK2PI;
        j1valid[0] = true;
        { int ij1 = 0;
        if( !j1valid[ij1] )
            continue;
        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
        
        _r00=((((cj1)*(cj3)*(r10)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)))+(((cj3)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
        _r01=((((cj3)*(r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1))));
        _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12))));
        _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj3))));
        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(cj1)*(r11)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj3)))+(((cj0)*(r21)*(sj1)*(sj3))));
        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj3)))+(((cj0)*(r22)*(sj1)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
        _r20=((((-1.00000000000000)*(cj0)*(r00)))+(((-1.00000000000000)*(r20)*(sj0))));
        _r21=((((-1.00000000000000)*(cj0)*(r01)))+(((-1.00000000000000)*(r21)*(sj0))));
        _r22=((((-1.00000000000000)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(r02))));
        {
        IKReal j5eval;
        j5eval=_r11;
        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
            {
            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
            {
            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else {
            {
            IKReal j4array[1], cj4array[1], sj4array[1];
            bool j4valid[1]={false};
            j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            { int ij4 = 0;
            if( !j4valid[ij4] )
                continue;
            j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
            
            {
            IKReal evalcond;
                evalcond=IKsin(j4);
                if( IKabs(evalcond) < 0.00001 ) {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                { int ij5 = 0;
                if( !j5valid[ij5] )
                    continue;
                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                
                {
                IKReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1]={false};
                IKReal x113=IKcos(j4);
                IKReal x114=((IKabs(x113) != 0)?((IKReal)1/(x113)):(IKReal)1.0e30);
                j6array[0]=IKatan2(((_r20)*(x114)), ((_r22)*(x114)));
                sj6array[0]=IKsin(j6array[0]);
                cj6array[0]=IKcos(j6array[0]);
                if( j6array[0] > IKPI )
                    j6array[0]-=IK2PI;
                else if( j6array[0] < -IKPI )
                    j6array[0]+=IK2PI;
                j6valid[0] = true;
                { int ij6 = 0;
                if( !j6valid[ij6] )
                    continue;
                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                
                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                solution.basesol.resize(7);
                solution.basesol[0].foffset = j0;
                solution.basesol[1].foffset = j1;
                solution.basesol[2].foffset = j2;
                solution.basesol[3].foffset = j3;
                solution.basesol[4].foffset = j4;
                solution.basesol[5].foffset = j5;
                solution.basesol[6].foffset = j6;
                solution.vfree.resize(0);
                }
                }
                }
                }
                } else {
                if( 1 ) {
                {
                IKReal j5array[1], cj5array[1], sj5array[1];
                bool j5valid[1]={false};
                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                sj5array[0]=IKsin(j5array[0]);
                cj5array[0]=IKcos(j5array[0]);
                if( j5array[0] > IKPI )
                    j5array[0]-=IK2PI;
                else if( j5array[0] < -IKPI )
                    j5array[0]+=IK2PI;
                j5valid[0] = true;
                { int ij5 = 0;
                if( !j5valid[ij5] )
                    continue;
                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                
                {
                IKReal evalcond;
                    evalcond=IKcos(j5);
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x115=IKsin(j5);
                    IKReal x116=((IKabs(x115) != 0)?((IKReal)1/(x115)):(IKReal)1.0e30);
                    IKReal x117=IKcos(j4);
                    IKReal x118=IKsin(j4);
                    j6array[0]=IKatan2(((((-1.00000000000000)*(_r22)*(x116)*(x118)))+(((_r02)*(x116)*(x117)))), ((((_r02)*(x118)))+(((_r22)*(x117)))));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x119=IKcos(j5);
                    IKReal x120=((IKabs(x119) != 0)?((IKReal)1/(x119)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x120)), ((_r10)*(x120)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    } else {
                }
                }
                }
                }
                }
                } else {
            }
            }
            }
            }
            }
            }
        }
        }
        }
        }
        }
        }
        }
        } else {
        evalcond=((j2)+(((-1.00000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x121=(py)*(py);
        IKReal x122=((6.46768888004590)*(x121));
        IKReal x123=(pz)*(pz);
        IKReal x124=((6.46768888004590)*(x123));
        IKReal x125=(px)*(px);
        IKReal x126=((6.46768888004590)*(x125));
        IKReal x127=((x126)+(x124)+(x122));
        IKReal x128=((1.00652831730258)+(((-1.00000000000000)*(x127))));
        if( (x128) < -1.0001 || (x128) > 1.0001 )
            continue;
        IKReal x129=IKasin(x128);
        j3array[0]=((-1.55277767186469)+(((-1.00000000000000)*(x129))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.58881498172510)+(x129));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
            IKReal j0eval[1];
            j0eval[0]=(((px)*(px))+((pz)*(pz)));
            if( IKabs(j0eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=(((px)*(px))+((pz)*(pz)));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[7];
                        IKReal x130=((0.277470000000903)*(sj3));
                        IKReal x131=((px)+(x130));
                        IKReal x132=((-0.00502000000000180)+(((-1.00000000000000)*(x131))));
                        j0eval[0]=x132;
                        j0eval[1]=x132;
                        j0eval[2]=x132;
                        j0eval[3]=x132;
                        j0eval[4]=((0.00502000000000180)+(x131));
                        j0eval[5]=x132;
                        j0eval[6]=x132;
                        if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  && IKabs(j0eval[5]) < 0.000100  && IKabs(j0eval[6]) < 0.000100  ) {
                            {
                            j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x133=x123;
                            IKReal x134=x121;
                            IKReal x135=((x134)+(x133));
                            IKReal x136=((IKabs(x135) != 0)?((IKReal)1/(x135)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((-0.277470000000903)*(cj3)*(py)*(x136)))+(((-0.278569999998581)*(py)*(x136)))+(((0.0317500000001019)*(pz)*(x136)))), ((((-0.277470000000903)*(cj3)*(pz)*(x136)))+(((-0.278569999998581)*(pz)*(x136)))+(((-0.0317500000001019)*(py)*(x136)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                            _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                            _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                            _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                            _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x137=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x137)), ((_r10)*(x137)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[3];
                        IKReal x138=((-0.0317500000001019)+(((-1.00000000000000)*(py))));
                        j1eval[0]=x138;
                        j1eval[1]=x138;
                        j1eval[2]=((0.0317500000001019)+(py));
                        if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  ) {
                            {
                            j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                            {
                            IKReal j0array[1], cj0array[1], sj0array[1];
                            bool j0valid[1]={false};
                            IKReal x139=x125;
                            IKReal x140=x123;
                            IKReal x141=((x139)+(x140));
                            IKReal x142=((IKabs(x141) != 0)?((IKReal)1/(x141)):(IKReal)1.0e30);
                            j0array[0]=IKatan2(((((-0.00502000000000180)*(pz)*(x142)))+(((-0.277470000000903)*(pz)*(sj3)*(x142)))+(((0.277470000000903)*(cj3)*(px)*(x142)))+(((0.278569999998581)*(px)*(x142)))), ((((-0.278569999998581)*(pz)*(x142)))+(((-0.00502000000000180)*(px)*(x142)))+(((-0.277470000000903)*(cj3)*(pz)*(x142)))+(((-0.277470000000903)*(px)*(sj3)*(x142)))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            { int ij0 = 0;
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                            
                            _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                            _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                            _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                            _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                            _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                            _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal j5array[1], cj5array[1], sj5array[1];
                                bool j5valid[1]={false};
                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                sj5array[0]=IKsin(j5array[0]);
                                cj5array[0]=IKcos(j5array[0]);
                                if( j5array[0] > IKPI )
                                    j5array[0]-=IK2PI;
                                else if( j5array[0] < -IKPI )
                                    j5array[0]+=IK2PI;
                                j5valid[0] = true;
                                { int ij5 = 0;
                                if( !j5valid[ij5] )
                                    continue;
                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                
                                {
                                IKReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1]={false};
                                IKReal x143=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
                                j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x143)), ((_r10)*(x143)));
                                sj6array[0]=IKsin(j6array[0]);
                                cj6array[0]=IKcos(j6array[0]);
                                if( j6array[0] > IKPI )
                                    j6array[0]-=IK2PI;
                                else if( j6array[0] < -IKPI )
                                    j6array[0]+=IK2PI;
                                j6valid[0] = true;
                                { int ij6 = 0;
                                if( !j6valid[ij6] )
                                    continue;
                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.vfree.resize(0);
                                }
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            }
                            
                        } else
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j0array[2], cj0array[2], sj0array[2];
                    bool j0valid[2]={false};
                    IKReal x144=x125;
                    IKReal x145=x123;
                    IKReal x146=((x144)+(x145));
                    IKReal x147=((IKabs(x146) != 0)?(pow(x146,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x148=((0.277470000000903)*(sj3));
                    IKReal x149=((0.00502000000000180)+(x148));
                    IKReal x150=((x147)*(x149));
                    if( (x150) < -1.0001 || (x150) > 1.0001 )
                        continue;
                    IKReal x151=IKasin(x150);
                    IKReal x152=((-1.00000000000000)*(px));
                    IKReal x153=((-1.00000000000000)*(pz));
                    IKReal x154=IKatan2(x152, x153);
                    j0array[0]=((((-1.00000000000000)*(x154)))+(x151));
                    sj0array[0]=IKsin(j0array[0]);
                    cj0array[0]=IKcos(j0array[0]);
                    j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x154)))+(((-1.00000000000000)*(x151))));
                    sj0array[1]=IKsin(j0array[1]);
                    cj0array[1]=IKcos(j0array[1]);
                    if( j0array[0] > IKPI )
                        j0array[0]-=IK2PI;
                    else if( j0array[0] < -IKPI )
                        j0array[0]+=IK2PI;
                    j0valid[0] = true;
                    if( j0array[1] > IKPI )
                        j0array[1]-=IK2PI;
                    else if( j0array[1] < -IKPI )
                        j0array[1]+=IK2PI;
                    j0valid[1] = true;
                    if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                        j0valid[1]=false;
                    for(int ij0 = 0; ij0 < 2; ++ij0) {
                    if( !j0valid[ij0] )
                        continue;
                    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                    
                    {
                    IKReal j1array[1], cj1array[1], sj1array[1];
                    bool j1valid[1]={false};
                    IKReal x155=((0.0317500000001019)*(px)*(sj0));
                    IKReal x156=((0.278569999998581)*(py));
                    IKReal x157=((0.0317500000001019)*(cj0)*(pz));
                    IKReal x158=((0.996051261805405)*(cj3)*(x156));
                    IKReal x159=((x157)+(x156)+(x158));
                    IKReal x160=((x155)+(((-1.00000000000000)*(x159))));
                    IKReal x161=((IKabs(x160) != 0)?((IKReal)1/(x160)):(IKReal)1.0e30);
                    j1array[0]=IKatan2(((((x161)*((py)*(py))))+(((-0.00100806250000574)*(x161)))), ((((0.00884459750000133)*(x161)))+(((113.063370040618)*(x156)*(x157)*(x161)))+(((-113.063370040618)*(x155)*(x156)*(x161)))+(((0.00880967250009235)*(cj3)*(x161)))));
                    sj1array[0]=IKsin(j1array[0]);
                    cj1array[0]=IKcos(j1array[0]);
                    if( j1array[0] > IKPI )
                        j1array[0]-=IK2PI;
                    else if( j1array[0] < -IKPI )
                        j1array[0]+=IK2PI;
                    j1valid[0] = true;
                    { int ij1 = 0;
                    if( !j1valid[ij1] )
                        continue;
                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                    
                    _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                    _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                    _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                    _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                    _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                    _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                    {
                    IKReal j5eval;
                    j5eval=_r11;
                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                        {
                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=1.00000000000000;
                        j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                        {
                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                        IKReal j4mul = 1;
                        j4=0;
                        IKReal j6mul=-1.00000000000000;
                        j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[4].fmul = j4mul;
                        solution.basesol[4].freeind = 0;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.basesol[6].fmul = j6mul;
                        solution.basesol[6].freeind = 0;
                        solution.vfree.resize(1);
                        solution.vfree[0] = 4;
                        }
                        }
                    else {
                        {
                        IKReal j4array[1], cj4array[1], sj4array[1];
                        bool j4valid[1]={false};
                        j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                        sj4array[0]=IKsin(j4array[0]);
                        cj4array[0]=IKcos(j4array[0]);
                        if( j4array[0] > IKPI )
                            j4array[0]-=IK2PI;
                        else if( j4array[0] < -IKPI )
                            j4array[0]+=IK2PI;
                        j4valid[0] = true;
                        { int ij4 = 0;
                        if( !j4valid[ij4] )
                            continue;
                        j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                        
                        {
                        IKReal j5array[1], cj5array[1], sj5array[1];
                        bool j5valid[1]={false};
                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        if( j5array[0] > IKPI )
                            j5array[0]-=IK2PI;
                        else if( j5array[0] < -IKPI )
                            j5array[0]+=IK2PI;
                        j5valid[0] = true;
                        { int ij5 = 0;
                        if( !j5valid[ij5] )
                            continue;
                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                        
                        {
                        IKReal j6array[1], cj6array[1], sj6array[1];
                        bool j6valid[1]={false};
                        IKReal x162=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
                        j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x162)), ((_r10)*(x162)));
                        sj6array[0]=IKsin(j6array[0]);
                        cj6array[0]=IKcos(j6array[0]);
                        if( j6array[0] > IKPI )
                            j6array[0]-=IK2PI;
                        else if( j6array[0] < -IKPI )
                            j6array[0]+=IK2PI;
                        j6valid[0] = true;
                        { int ij6 = 0;
                        if( !j6valid[ij6] )
                            continue;
                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                        
                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                        solution.basesol.resize(7);
                        solution.basesol[0].foffset = j0;
                        solution.basesol[1].foffset = j1;
                        solution.basesol[2].foffset = j2;
                        solution.basesol[3].foffset = j3;
                        solution.basesol[4].foffset = j4;
                        solution.basesol[5].foffset = j5;
                        solution.basesol[6].foffset = j6;
                        solution.vfree.resize(0);
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                    }
                    }
                    }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j0array[2], cj0array[2], sj0array[2];
                bool j0valid[2]={false};
                IKReal x163=x125;
                IKReal x164=x123;
                IKReal x165=((x163)+(x164));
                IKReal x166=((IKabs(x165) != 0)?(pow(x165,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x167=((0.277470000000903)*(sj3));
                IKReal x168=((0.00502000000000180)+(x167));
                IKReal x169=((x166)*(x168));
                if( (x169) < -1.0001 || (x169) > 1.0001 )
                    continue;
                IKReal x170=IKasin(x169);
                IKReal x171=((-1.00000000000000)*(px));
                IKReal x172=((-1.00000000000000)*(pz));
                IKReal x173=IKatan2(x171, x172);
                j0array[0]=((x170)+(((-1.00000000000000)*(x173))));
                sj0array[0]=IKsin(j0array[0]);
                cj0array[0]=IKcos(j0array[0]);
                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x173)))+(((-1.00000000000000)*(x170))));
                sj0array[1]=IKsin(j0array[1]);
                cj0array[1]=IKcos(j0array[1]);
                if( j0array[0] > IKPI )
                    j0array[0]-=IK2PI;
                else if( j0array[0] < -IKPI )
                    j0array[0]+=IK2PI;
                j0valid[0] = true;
                if( j0array[1] > IKPI )
                    j0array[1]-=IK2PI;
                else if( j0array[1] < -IKPI )
                    j0array[1]+=IK2PI;
                j0valid[1] = true;
                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                    j0valid[1]=false;
                for(int ij0 = 0; ij0 < 2; ++ij0) {
                if( !j0valid[ij0] )
                    continue;
                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                
                {
                IKReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1]={false};
                IKReal x174=((0.0317500000001019)*(px)*(sj0));
                IKReal x175=((0.278569999998581)*(py));
                IKReal x176=((0.0317500000001019)*(cj0)*(pz));
                IKReal x177=((0.996051261805405)*(cj3)*(x175));
                IKReal x178=((x175)+(x177)+(x176));
                IKReal x179=((x174)+(((-1.00000000000000)*(x178))));
                IKReal x180=((IKabs(x179) != 0)?((IKReal)1/(x179)):(IKReal)1.0e30);
                j1array[0]=IKatan2(((((x180)*((py)*(py))))+(((-0.00100806250000574)*(x180)))), ((((0.00880967250009235)*(cj3)*(x180)))+(((113.063370040618)*(x175)*(x176)*(x180)))+(((0.00884459750000133)*(x180)))+(((-113.063370040618)*(x174)*(x175)*(x180)))));
                sj1array[0]=IKsin(j1array[0]);
                cj1array[0]=IKcos(j1array[0]);
                if( j1array[0] > IKPI )
                    j1array[0]-=IK2PI;
                else if( j1array[0] < -IKPI )
                    j1array[0]+=IK2PI;
                j1valid[0] = true;
                { int ij1 = 0;
                if( !j1valid[ij1] )
                    continue;
                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                
                _r00=((((cj3)*(r20)*(sj0)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj0)*(cj3)*(r01)))+(((cj3)*(r21)*(sj0))));
                _r02=((((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj0)*(cj3)*(r02)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj3)*(r22)*(sj0))));
                _r10=((((-1.00000000000000)*(cj0)*(r00)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(r20)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r01)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((-1.00000000000000)*(r21)*(sj0)*(sj3))));
                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((-1.00000000000000)*(cj0)*(r02)*(sj3))));
                _r20=((((cj1)*(r10)))+(((r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1))));
                _r21=((((r01)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)))+(((cj1)*(r11))));
                _r22=((((r02)*(sj0)*(sj1)))+(((cj1)*(r12)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1))));
                {
                IKReal j5eval;
                j5eval=_r11;
                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                    {
                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=1.00000000000000;
                    j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                    {
                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                    IKReal j4mul = 1;
                    j4=0;
                    IKReal j6mul=-1.00000000000000;
                    j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[4].fmul = j4mul;
                    solution.basesol[4].freeind = 0;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.basesol[6].fmul = j6mul;
                    solution.basesol[6].freeind = 0;
                    solution.vfree.resize(1);
                    solution.vfree[0] = 4;
                    }
                    }
                else {
                    {
                    IKReal j4array[1], cj4array[1], sj4array[1];
                    bool j4valid[1]={false};
                    j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                    sj4array[0]=IKsin(j4array[0]);
                    cj4array[0]=IKcos(j4array[0]);
                    if( j4array[0] > IKPI )
                        j4array[0]-=IK2PI;
                    else if( j4array[0] < -IKPI )
                        j4array[0]+=IK2PI;
                    j4valid[0] = true;
                    { int ij4 = 0;
                    if( !j4valid[ij4] )
                        continue;
                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                    
                    {
                    IKReal j5array[1], cj5array[1], sj5array[1];
                    bool j5valid[1]={false};
                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                    sj5array[0]=IKsin(j5array[0]);
                    cj5array[0]=IKcos(j5array[0]);
                    if( j5array[0] > IKPI )
                        j5array[0]-=IK2PI;
                    else if( j5array[0] < -IKPI )
                        j5array[0]+=IK2PI;
                    j5valid[0] = true;
                    { int ij5 = 0;
                    if( !j5valid[ij5] )
                        continue;
                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                    
                    {
                    IKReal j6array[1], cj6array[1], sj6array[1];
                    bool j6valid[1]={false};
                    IKReal x181=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
                    j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x181)), ((_r10)*(x181)));
                    sj6array[0]=IKsin(j6array[0]);
                    cj6array[0]=IKcos(j6array[0]);
                    if( j6array[0] > IKPI )
                        j6array[0]-=IK2PI;
                    else if( j6array[0] < -IKPI )
                        j6array[0]+=IK2PI;
                    j6valid[0] = true;
                    { int ij6 = 0;
                    if( !j6valid[ij6] )
                        continue;
                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                    
                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                    solution.basesol.resize(7);
                    solution.basesol[0].foffset = j0;
                    solution.basesol[1].foffset = j1;
                    solution.basesol[2].foffset = j2;
                    solution.basesol[3].foffset = j3;
                    solution.basesol[4].foffset = j4;
                    solution.basesol[5].foffset = j5;
                    solution.basesol[6].foffset = j6;
                    solution.vfree.resize(0);
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                }
                }
                }
                }
                }
                
            }
            }
        }
        }
        } else {
        evalcond=((j2)+(((0.500000000000000)*(3.14159265358979))));
        if( IKabs(evalcond) < 0.00001 ) {
        {
        IKReal j0array[2], cj0array[2], sj0array[2];
        bool j0valid[2]={false};
        IKReal x182=((-1.00000000000000)*(px));
        IKReal x183=((-1.00000000000000)*(pz));
        IKReal x184=IKatan2(x182, x183);
        j0array[0]=((-1.00000000000000)*(x184));
        sj0array[0]=IKsin(j0array[0]);
        cj0array[0]=IKcos(j0array[0]);
        j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x184))));
        sj0array[1]=IKsin(j0array[1]);
        cj0array[1]=IKcos(j0array[1]);
        if( j0array[0] > IKPI )
            j0array[0]-=IK2PI;
        else if( j0array[0] < -IKPI )
            j0array[0]+=IK2PI;
        j0valid[0] = true;
        if( j0array[1] > IKPI )
            j0array[1]-=IK2PI;
        else if( j0array[1] < -IKPI )
            j0array[1]+=IK2PI;
        j0valid[1] = true;
        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
            j0valid[1]=false;
        for(int ij0 = 0; ij0 < 2; ++ij0) {
        if( !j0valid[ij0] )
            continue;
        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
        
        {
        IKReal j3array[2], cj3array[2], sj3array[2];
        bool j3valid[2]={false};
        IKReal x185=(pz)*(pz);
        IKReal x186=((6.43916343624005)*(x185));
        IKReal x187=(px)*(px);
        IKReal x188=((6.43916343624005)*(x187));
        IKReal x189=(py)*(py);
        IKReal x190=((6.43916343624005)*(x189));
        IKReal x191=((x190)+(x186)+(x188));
        IKReal x192=((1.00003645841207)+(((-1.00000000000000)*(x191))));
        if( (x192) < -1.0001 || (x192) > 1.0001 )
            continue;
        IKReal x193=IKasin(x192);
        j3array[0]=((-1.66645778988871)+(((-1.00000000000000)*(x193))));
        sj3array[0]=IKsin(j3array[0]);
        cj3array[0]=IKcos(j3array[0]);
        j3array[1]=((1.47513486370108)+(x193));
        sj3array[1]=IKsin(j3array[1]);
        cj3array[1]=IKcos(j3array[1]);
        if( j3array[0] > IKPI )
            j3array[0]-=IK2PI;
        else if( j3array[0] < -IKPI )
            j3array[0]+=IK2PI;
        j3valid[0] = true;
        if( j3array[1] > IKPI )
            j3array[1]-=IK2PI;
        else if( j3array[1] < -IKPI )
            j3array[1]+=IK2PI;
        j3valid[1] = true;
        if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
            j3valid[1]=false;
        for(int ij3 = 0; ij3 < 2; ++ij3) {
        if( !j3valid[ij3] )
            continue;
        j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
        
        {
        IKReal j1array[1], cj1array[1], sj1array[1];
        bool j1valid[1]={false};
        IKReal x194=((0.277470000000903)*(cj3)*(px)*(sj0));
        IKReal x195=((0.0267300000000432)*(py));
        IKReal x196=((0.278569999998581)*(px)*(sj0));
        IKReal x197=((x196)+(x195)+(x194));
        IKReal x198=((0.277470000000903)*(cj0)*(cj3)*(pz));
        IKReal x199=((0.278569999998581)*(cj0)*(pz));
        IKReal x200=((10.3804713804275)*(sj3)*(x195));
        IKReal x201=((x199)+(x198)+(x200));
        IKReal x202=((x197)+(((-1.00000000000000)*(x201))));
        IKReal x203=((IKabs(x202) != 0)?((IKReal)1/(x202)):(IKReal)1.0e30);
        j1array[0]=IKatan2(((((0.0772948179001105)*(sj3)*(x203)))+(((-0.00744617609996112)*(x203)))+(((-134.297119295225)*(x195)*(x196)*(x203)))+(((-0.00741677310003297)*(cj3)*(x203)))+(((0.0769896009005606)*(cj3)*(sj3)*(x203)))+(((134.297119295225)*(x195)*(x199)*(x203)))), ((((0.0769896009005606)*(x203)*((cj3)*(cj3))))+(((0.154589635800221)*(cj3)*(x203)))+(((0.0776012448995971)*(x203)))+(((-1.00000000000000)*(x203)*((py)*(py))))));
        sj1array[0]=IKsin(j1array[0]);
        cj1array[0]=IKcos(j1array[0]);
        if( j1array[0] > IKPI )
            j1array[0]-=IK2PI;
        else if( j1array[0] < -IKPI )
            j1array[0]+=IK2PI;
        j1valid[0] = true;
        { int ij1 = 0;
        if( !j1valid[ij1] )
            continue;
        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
        
        _r00=((((cj1)*(r00)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj3)*(r10)))+(((cj0)*(cj3)*(r20)*(sj1)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
        _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj0)*(cj3)*(r21)*(sj1)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r11)))+(((-1.00000000000000)*(cj3)*(r01)*(sj0)*(sj1))));
        _r02=((((cj0)*(cj3)*(r22)*(sj1)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((-1.00000000000000)*(cj1)*(cj3)*(r12)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj3)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3))));
        _r10=((((cj1)*(cj3)*(r00)*(sj0)))+(((-1.00000000000000)*(cj0)*(r20)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((r00)*(sj0)*(sj1)*(sj3)))+(((cj1)*(r10)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((-1.00000000000000)*(cj0)*(r21)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((r01)*(sj0)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj1)*(r11)*(sj3))));
        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj0)*(r22)*(sj1)*(sj3)))+(((cj1)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1)))+(((r02)*(sj0)*(sj1)*(sj3))));
        _r20=((((r20)*(sj0)))+(((cj0)*(r00))));
        _r21=((((r21)*(sj0)))+(((cj0)*(r01))));
        _r22=((((cj0)*(r02)))+(((r22)*(sj0))));
        {
        IKReal j5eval;
        j5eval=_r11;
        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
            {
            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=1.00000000000000;
            j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
            {
            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
            IKReal j4mul = 1;
            j4=0;
            IKReal j6mul=-1.00000000000000;
            j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[4].fmul = j4mul;
            solution.basesol[4].freeind = 0;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.basesol[6].fmul = j6mul;
            solution.basesol[6].freeind = 0;
            solution.vfree.resize(1);
            solution.vfree[0] = 4;
            }
            }
        else {
            {
            IKReal j4array[1], cj4array[1], sj4array[1];
            bool j4valid[1]={false};
            j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
            sj4array[0]=IKsin(j4array[0]);
            cj4array[0]=IKcos(j4array[0]);
            if( j4array[0] > IKPI )
                j4array[0]-=IK2PI;
            else if( j4array[0] < -IKPI )
                j4array[0]+=IK2PI;
            j4valid[0] = true;
            { int ij4 = 0;
            if( !j4valid[ij4] )
                continue;
            j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
            
            {
            IKReal j5array[1], cj5array[1], sj5array[1];
            bool j5valid[1]={false};
            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
            sj5array[0]=IKsin(j5array[0]);
            cj5array[0]=IKcos(j5array[0]);
            if( j5array[0] > IKPI )
                j5array[0]-=IK2PI;
            else if( j5array[0] < -IKPI )
                j5array[0]+=IK2PI;
            j5valid[0] = true;
            { int ij5 = 0;
            if( !j5valid[ij5] )
                continue;
            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
            
            {
            IKReal j6array[1], cj6array[1], sj6array[1];
            bool j6valid[1]={false};
            IKReal x204=((IKabs(cj5) != 0)?((IKReal)1/(cj5)):(IKReal)1.0e30);
            j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x204)), ((_r10)*(x204)));
            sj6array[0]=IKsin(j6array[0]);
            cj6array[0]=IKcos(j6array[0]);
            if( j6array[0] > IKPI )
                j6array[0]-=IK2PI;
            else if( j6array[0] < -IKPI )
                j6array[0]+=IK2PI;
            j6valid[0] = true;
            { int ij6 = 0;
            if( !j6valid[ij6] )
                continue;
            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
            
            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
            solution.basesol.resize(7);
            solution.basesol[0].foffset = j0;
            solution.basesol[1].foffset = j1;
            solution.basesol[2].foffset = j2;
            solution.basesol[3].foffset = j3;
            solution.basesol[4].foffset = j4;
            solution.basesol[5].foffset = j5;
            solution.basesol[6].foffset = j6;
            solution.vfree.resize(0);
            }
            }
            }
            }
            }
            }
            }
        }
        }
        }
        }
        }
        }
        }
        } else {
        if( 1 ) {
        {
            IKReal j3eval[1];
            j3eval[0]=((0.0238979554967500)+((((0.00278579880000507)+(((0.0176193450001847)*(sj2)))))*(((0.00278579880000507)+(((0.0176193450001847)*(sj2)))))));
            if( IKabs(j3eval[0]) < 0.000010  ) {
                {
                IKReal evalcond;
                    evalcond=((0.0238979554967500)+((((0.00278579880000507)+(((0.0176193450001847)*(sj2)))))*(((0.00278579880000507)+(((0.0176193450001847)*(sj2)))))));
                    if( IKabs(evalcond) < 0.00001 ) {
                    {
                        IKReal j0eval[0];
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j1eval[0];
                        {
                            continue;
                            
                        }
                        }
                    {
                        IKReal j3eval[0];
                        {
                            continue;
                            
                        }
                        }
                    } else {
                    if( 1 ) {
                    {
                    IKReal j3array[2], cj3array[2], sj3array[2];
                    bool j3valid[2]={false};
                    IKReal x205=((0.0176193450001847)*(sj2));
                    IKReal x206=((0.00278579880000507)+(x205));
                    IKReal x207=(x206)*(x206);
                    IKReal x208=((0.0238979554967500)+(x207));
                    IKReal x209=((IKabs(x208) != 0)?(pow(x208,-0.500000000000000)):(IKReal)1.0e30);
                    IKReal x210=((0.0180920459868048)*(x205));
                    IKReal x211=((0.155624108700067)+(x210));
                    IKReal x212=(px)*(px);
                    IKReal x213=(pz)*(pz);
                    IKReal x214=(py)*(py);
                    IKReal x215=((x212)+(x213)+(x214));
                    IKReal x216=((x211)+(((-1.00000000000000)*(x215))));
                    IKReal x217=((x209)*(x216));
                    if( (x217) < -1.0001 || (x217) > 1.0001 )
                        continue;
                    IKReal x218=IKasin(x217);
                    IKReal x219=IKatan2(0.154589635800221, x206);
                    j3array[0]=((((-1.00000000000000)*(x218)))+(((-1.00000000000000)*(x219))));
                    sj3array[0]=IKsin(j3array[0]);
                    cj3array[0]=IKcos(j3array[0]);
                    j3array[1]=((3.14159265358979)+(x218)+(((-1.00000000000000)*(x219))));
                    sj3array[1]=IKsin(j3array[1]);
                    cj3array[1]=IKcos(j3array[1]);
                    if( j3array[0] > IKPI )
                        j3array[0]-=IK2PI;
                    else if( j3array[0] < -IKPI )
                        j3array[0]+=IK2PI;
                    j3valid[0] = true;
                    if( j3array[1] > IKPI )
                        j3array[1]-=IK2PI;
                    else if( j3array[1] < -IKPI )
                        j3array[1]+=IK2PI;
                    j3valid[1] = true;
                    if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                        j3valid[1]=false;
                    for(int ij3 = 0; ij3 < 2; ++ij3) {
                    if( !j3valid[ij3] )
                        continue;
                    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                    
                    {
                        IKReal j0eval[1];
                        j0eval[0]=(((px)*(px))+((pz)*(pz)));
                        if( IKabs(j0eval[0]) < 0.000010  ) {
                            {
                            IKReal evalcond;
                                evalcond=(((px)*(px))+((pz)*(pz)));
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                    IKReal j0eval[5];
                                    IKReal x220=((0.277470000000903)*(cj2)*(sj3));
                                    IKReal x221=((0.00502000000000180)*(cj2));
                                    IKReal x222=((x221)+(x220));
                                    IKReal x223=((((-1.00000000000000)*(px)))+(x222));
                                    j0eval[0]=x223;
                                    j0eval[1]=x223;
                                    j0eval[2]=x223;
                                    j0eval[3]=x223;
                                    j0eval[4]=((((-1.00000000000000)*(x222)))+(px));
                                    if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  ) {
                                        {
                                        j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                                        {
                                        IKReal j1array[1], cj1array[1], sj1array[1];
                                        bool j1valid[1]={false};
                                        IKReal x224=x213;
                                        IKReal x225=x214;
                                        IKReal x226=((x225)+(x224));
                                        IKReal x227=((IKabs(x226) != 0)?((IKReal)1/(x226)):(IKReal)1.0e30);
                                        j1array[0]=IKatan2(((((-0.278569999998581)*(py)*(x227)))+(((0.0317500000001019)*(pz)*(x227)))+(((0.00502000000000180)*(pz)*(sj2)*(x227)))+(((0.277470000000903)*(pz)*(sj2)*(sj3)*(x227)))+(((-0.277470000000903)*(cj3)*(py)*(x227)))), ((((-0.00502000000000180)*(py)*(sj2)*(x227)))+(((-0.0317500000001019)*(py)*(x227)))+(((-0.278569999998581)*(pz)*(x227)))+(((-0.277470000000903)*(py)*(sj2)*(sj3)*(x227)))+(((-0.277470000000903)*(cj3)*(pz)*(x227)))));
                                        sj1array[0]=IKsin(j1array[0]);
                                        cj1array[0]=IKcos(j1array[0]);
                                        if( j1array[0] > IKPI )
                                            j1array[0]-=IK2PI;
                                        else if( j1array[0] < -IKPI )
                                            j1array[0]+=IK2PI;
                                        j1valid[0] = true;
                                        { int ij1 = 0;
                                        if( !j1valid[ij1] )
                                            continue;
                                        j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                        
                                        _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                        _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                        _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                        _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                        _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                        _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                        _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                        {
                                        IKReal j5eval;
                                        j5eval=_r11;
                                        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                            {
                                            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=1.00000000000000;
                                            j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                            {
                                            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=-1.00000000000000;
                                            j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else {
                                            {
                                            IKReal j4array[1], cj4array[1], sj4array[1];
                                            bool j4valid[1]={false};
                                            j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                            sj4array[0]=IKsin(j4array[0]);
                                            cj4array[0]=IKcos(j4array[0]);
                                            if( j4array[0] > IKPI )
                                                j4array[0]-=IK2PI;
                                            else if( j4array[0] < -IKPI )
                                                j4array[0]+=IK2PI;
                                            j4valid[0] = true;
                                            { int ij4 = 0;
                                            if( !j4valid[ij4] )
                                                continue;
                                            j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                            
                                            {
                                            IKReal evalcond;
                                                evalcond=IKsin(j4);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x228=IKcos(j4);
                                                IKReal x229=((IKabs(x228) != 0)?((IKReal)1/(x228)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((_r20)*(x229)), ((_r22)*(x229)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal evalcond;
                                                    evalcond=IKcos(j5);
                                                    if( IKabs(evalcond) < 0.00001 ) {
                                                    {
                                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                                    bool j6valid[1]={false};
                                                    IKReal x230=IKsin(j5);
                                                    IKReal x231=((IKabs(x230) != 0)?((IKReal)1/(x230)):(IKReal)1.0e30);
                                                    IKReal x232=IKcos(j4);
                                                    IKReal x233=IKsin(j4);
                                                    j6array[0]=IKatan2(((((-1.00000000000000)*(_r22)*(x231)*(x233)))+(((_r02)*(x231)*(x232)))), ((((_r22)*(x232)))+(((_r02)*(x233)))));
                                                    sj6array[0]=IKsin(j6array[0]);
                                                    cj6array[0]=IKcos(j6array[0]);
                                                    if( j6array[0] > IKPI )
                                                        j6array[0]-=IK2PI;
                                                    else if( j6array[0] < -IKPI )
                                                        j6array[0]+=IK2PI;
                                                    j6valid[0] = true;
                                                    { int ij6 = 0;
                                                    if( !j6valid[ij6] )
                                                        continue;
                                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                    
                                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                    solution.basesol.resize(7);
                                                    solution.basesol[0].foffset = j0;
                                                    solution.basesol[1].foffset = j1;
                                                    solution.basesol[2].foffset = j2;
                                                    solution.basesol[3].foffset = j3;
                                                    solution.basesol[4].foffset = j4;
                                                    solution.basesol[5].foffset = j5;
                                                    solution.basesol[6].foffset = j6;
                                                    solution.vfree.resize(0);
                                                    }
                                                    }
                                                    } else {
                                                    if( 1 ) {
                                                    {
                                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                                    bool j6valid[1]={false};
                                                    IKReal x234=IKcos(j5);
                                                    IKReal x235=((IKabs(x234) != 0)?((IKReal)1/(x234)):(IKReal)1.0e30);
                                                    j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x235)), ((_r10)*(x235)));
                                                    sj6array[0]=IKsin(j6array[0]);
                                                    cj6array[0]=IKcos(j6array[0]);
                                                    if( j6array[0] > IKPI )
                                                        j6array[0]-=IK2PI;
                                                    else if( j6array[0] < -IKPI )
                                                        j6array[0]+=IK2PI;
                                                    j6valid[0] = true;
                                                    { int ij6 = 0;
                                                    if( !j6valid[ij6] )
                                                        continue;
                                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                    
                                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                    solution.basesol.resize(7);
                                                    solution.basesol[0].foffset = j0;
                                                    solution.basesol[1].foffset = j1;
                                                    solution.basesol[2].foffset = j2;
                                                    solution.basesol[3].foffset = j3;
                                                    solution.basesol[4].foffset = j4;
                                                    solution.basesol[5].foffset = j5;
                                                    solution.basesol[6].foffset = j6;
                                                    solution.vfree.resize(0);
                                                    }
                                                    }
                                                    } else {
                                                }
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            }
                                            }
                                            }
                                        }
                                        }
                                        }
                                        }
                                        
                                    } else
                                    {
                                        continue;
                                        
                                    }
                                    }
                                {
                                    IKReal j1eval[5];
                                    IKReal x236=((0.00502000000000180)*(sj2));
                                    IKReal x237=((55.2729083667509)*(sj3)*(x236));
                                    IKReal x238=((x236)+(x237)+(py));
                                    IKReal x239=((-0.0317500000001019)+(((-1.00000000000000)*(x238))));
                                    IKReal x240=((0.0317500000001019)+(x238));
                                    j1eval[0]=x239;
                                    j1eval[1]=x239;
                                    j1eval[2]=x240;
                                    j1eval[3]=x240;
                                    j1eval[4]=x240;
                                    if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  ) {
                                        {
                                        j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                                        {
                                        IKReal j0array[1], cj0array[1], sj0array[1];
                                        bool j0valid[1]={false};
                                        IKReal x241=x213;
                                        IKReal x242=((sj2)*(x241));
                                        IKReal x243=x212;
                                        IKReal x244=((sj2)*(x243));
                                        IKReal x245=((x242)+(x244));
                                        IKReal x246=((IKabs(x245) != 0)?((IKReal)1/(x245)):(IKReal)1.0e30);
                                        j0array[0]=IKatan2(((((0.277470000000903)*(cj3)*(px)*(sj2)*(x246)))+(((0.278569999998581)*(px)*(sj2)*(x246)))+(((-0.0317500000001019)*(cj2)*(pz)*(x246)))+(((-1.00000000000000)*(cj2)*(py)*(pz)*(x246)))), ((((-0.278569999998581)*(pz)*(sj2)*(x246)))+(((-1.00000000000000)*(cj2)*(px)*(py)*(x246)))+(((-0.0317500000001019)*(cj2)*(px)*(x246)))+(((-0.277470000000903)*(cj3)*(pz)*(sj2)*(x246)))));
                                        sj0array[0]=IKsin(j0array[0]);
                                        cj0array[0]=IKcos(j0array[0]);
                                        if( j0array[0] > IKPI )
                                            j0array[0]-=IK2PI;
                                        else if( j0array[0] < -IKPI )
                                            j0array[0]+=IK2PI;
                                        j0valid[0] = true;
                                        { int ij0 = 0;
                                        if( !j0valid[ij0] )
                                            continue;
                                        j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                                        
                                        _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                        _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                        _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                        _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                        _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                        _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                        _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                        _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                        _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                        {
                                        IKReal j5eval;
                                        j5eval=_r11;
                                        if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                            {
                                            j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=1.00000000000000;
                                            j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                            {
                                            j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                            IKReal j4mul = 1;
                                            j4=0;
                                            IKReal j6mul=-1.00000000000000;
                                            j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[4].fmul = j4mul;
                                            solution.basesol[4].freeind = 0;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.basesol[6].fmul = j6mul;
                                            solution.basesol[6].freeind = 0;
                                            solution.vfree.resize(1);
                                            solution.vfree[0] = 4;
                                            }
                                            }
                                        else {
                                            {
                                            IKReal j4array[1], cj4array[1], sj4array[1];
                                            bool j4valid[1]={false};
                                            j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                            sj4array[0]=IKsin(j4array[0]);
                                            cj4array[0]=IKcos(j4array[0]);
                                            if( j4array[0] > IKPI )
                                                j4array[0]-=IK2PI;
                                            else if( j4array[0] < -IKPI )
                                                j4array[0]+=IK2PI;
                                            j4valid[0] = true;
                                            { int ij4 = 0;
                                            if( !j4valid[ij4] )
                                                continue;
                                            j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                            
                                            {
                                            IKReal evalcond;
                                                evalcond=IKsin(j4);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x247=IKcos(j4);
                                                IKReal x248=((IKabs(x247) != 0)?((IKReal)1/(x247)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((_r20)*(x248)), ((_r22)*(x248)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j5array[1], cj5array[1], sj5array[1];
                                                bool j5valid[1]={false};
                                                j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                                sj5array[0]=IKsin(j5array[0]);
                                                cj5array[0]=IKcos(j5array[0]);
                                                if( j5array[0] > IKPI )
                                                    j5array[0]-=IK2PI;
                                                else if( j5array[0] < -IKPI )
                                                    j5array[0]+=IK2PI;
                                                j5valid[0] = true;
                                                { int ij5 = 0;
                                                if( !j5valid[ij5] )
                                                    continue;
                                                j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                                
                                                {
                                                IKReal evalcond;
                                                    evalcond=IKcos(j5);
                                                    if( IKabs(evalcond) < 0.00001 ) {
                                                    {
                                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                                    bool j6valid[1]={false};
                                                    IKReal x249=IKsin(j5);
                                                    IKReal x250=((IKabs(x249) != 0)?((IKReal)1/(x249)):(IKReal)1.0e30);
                                                    IKReal x251=IKcos(j4);
                                                    IKReal x252=IKsin(j4);
                                                    j6array[0]=IKatan2(((((_r02)*(x250)*(x251)))+(((-1.00000000000000)*(_r22)*(x250)*(x252)))), ((((_r22)*(x251)))+(((_r02)*(x252)))));
                                                    sj6array[0]=IKsin(j6array[0]);
                                                    cj6array[0]=IKcos(j6array[0]);
                                                    if( j6array[0] > IKPI )
                                                        j6array[0]-=IK2PI;
                                                    else if( j6array[0] < -IKPI )
                                                        j6array[0]+=IK2PI;
                                                    j6valid[0] = true;
                                                    { int ij6 = 0;
                                                    if( !j6valid[ij6] )
                                                        continue;
                                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                    
                                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                    solution.basesol.resize(7);
                                                    solution.basesol[0].foffset = j0;
                                                    solution.basesol[1].foffset = j1;
                                                    solution.basesol[2].foffset = j2;
                                                    solution.basesol[3].foffset = j3;
                                                    solution.basesol[4].foffset = j4;
                                                    solution.basesol[5].foffset = j5;
                                                    solution.basesol[6].foffset = j6;
                                                    solution.vfree.resize(0);
                                                    }
                                                    }
                                                    } else {
                                                    if( 1 ) {
                                                    {
                                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                                    bool j6valid[1]={false};
                                                    IKReal x253=IKcos(j5);
                                                    IKReal x254=((IKabs(x253) != 0)?((IKReal)1/(x253)):(IKReal)1.0e30);
                                                    j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x254)), ((_r10)*(x254)));
                                                    sj6array[0]=IKsin(j6array[0]);
                                                    cj6array[0]=IKcos(j6array[0]);
                                                    if( j6array[0] > IKPI )
                                                        j6array[0]-=IK2PI;
                                                    else if( j6array[0] < -IKPI )
                                                        j6array[0]+=IK2PI;
                                                    j6valid[0] = true;
                                                    { int ij6 = 0;
                                                    if( !j6valid[ij6] )
                                                        continue;
                                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                    
                                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                    solution.basesol.resize(7);
                                                    solution.basesol[0].foffset = j0;
                                                    solution.basesol[1].foffset = j1;
                                                    solution.basesol[2].foffset = j2;
                                                    solution.basesol[3].foffset = j3;
                                                    solution.basesol[4].foffset = j4;
                                                    solution.basesol[5].foffset = j5;
                                                    solution.basesol[6].foffset = j6;
                                                    solution.vfree.resize(0);
                                                    }
                                                    }
                                                    } else {
                                                }
                                                }
                                                }
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            }
                                            }
                                            }
                                        }
                                        }
                                        }
                                        }
                                        
                                    } else
                                    {
                                        continue;
                                        
                                    }
                                    }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j0array[2], cj0array[2], sj0array[2];
                                bool j0valid[2]={false};
                                IKReal x255=x212;
                                IKReal x256=x213;
                                IKReal x257=((x255)+(x256));
                                IKReal x258=((IKabs(x257) != 0)?(pow(x257,-0.500000000000000)):(IKReal)1.0e30);
                                IKReal x259=((0.277470000000903)*(cj2)*(sj3));
                                IKReal x260=((0.00502000000000180)*(cj2));
                                IKReal x261=((x259)+(x260));
                                IKReal x262=((x258)*(x261));
                                if( (x262) < -1.0001 || (x262) > 1.0001 )
                                    continue;
                                IKReal x263=IKasin(x262);
                                IKReal x264=((-1.00000000000000)*(px));
                                IKReal x265=((-1.00000000000000)*(pz));
                                IKReal x266=IKatan2(x264, x265);
                                j0array[0]=((((-1.00000000000000)*(x266)))+(((-1.00000000000000)*(x263))));
                                sj0array[0]=IKsin(j0array[0]);
                                cj0array[0]=IKcos(j0array[0]);
                                j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x266)))+(x263));
                                sj0array[1]=IKsin(j0array[1]);
                                cj0array[1]=IKcos(j0array[1]);
                                if( j0array[0] > IKPI )
                                    j0array[0]-=IK2PI;
                                else if( j0array[0] < -IKPI )
                                    j0array[0]+=IK2PI;
                                j0valid[0] = true;
                                if( j0array[1] > IKPI )
                                    j0array[1]-=IK2PI;
                                else if( j0array[1] < -IKPI )
                                    j0array[1]+=IK2PI;
                                j0valid[1] = true;
                                if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                    j0valid[1]=false;
                                for(int ij0 = 0; ij0 < 2; ++ij0) {
                                if( !j0valid[ij0] )
                                    continue;
                                j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                                
                                {
                                IKReal evalcond;
                                    evalcond=j0;
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x267=x213;
                                    IKReal x268=x214;
                                    IKReal x269=((x267)+(x268));
                                    IKReal x270=((IKabs(x269) != 0)?((IKReal)1/(x269)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((((0.0317500000001019)*(pz)*(x270)))+(((-0.277470000000903)*(cj3)*(py)*(x270)))+(((0.277470000000903)*(pz)*(sj2)*(sj3)*(x270)))+(((-0.278569999998581)*(py)*(x270)))+(((0.00502000000000180)*(pz)*(sj2)*(x270)))), ((((-0.278569999998581)*(pz)*(x270)))+(((-0.0317500000001019)*(py)*(x270)))+(((-0.00502000000000180)*(py)*(sj2)*(x270)))+(((-0.277470000000903)*(cj3)*(pz)*(x270)))+(((-0.277470000000903)*(py)*(sj2)*(sj3)*(x270)))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    { int ij1 = 0;
                                    if( !j1valid[ij1] )
                                        continue;
                                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[1], cj4array[1], sj4array[1];
                                        bool j4valid[1]={false};
                                        j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        { int ij4 = 0;
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x271=IKcos(j4);
                                            IKReal x272=((IKabs(x271) != 0)?((IKReal)1/(x271)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r20)*(x272)), ((_r22)*(x272)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j5);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x273=IKsin(j5);
                                                IKReal x274=((IKabs(x273) != 0)?((IKReal)1/(x273)):(IKReal)1.0e30);
                                                IKReal x275=IKcos(j4);
                                                IKReal x276=IKsin(j4);
                                                j6array[0]=IKatan2(((((-1.00000000000000)*(_r22)*(x274)*(x276)))+(((_r02)*(x274)*(x275)))), ((((_r22)*(x275)))+(((_r02)*(x276)))));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x277=IKcos(j5);
                                                IKReal x278=((IKabs(x277) != 0)?((IKReal)1/(x277)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x278)), ((_r10)*(x278)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x279=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                                    IKReal x280=x212;
                                    IKReal x281=(cj0)*(cj0);
                                    IKReal x282=x213;
                                    IKReal x283=((x279)*(x281)*(x282));
                                    IKReal x284=x214;
                                    IKReal x285=((x279)*(x284));
                                    IKReal x286=((x285)+(x283)+(x280));
                                    IKReal x287=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                                    IKReal x288=((2.00000000000000)*(cj0)*(px)*(pz)*(x287));
                                    IKReal x289=((((-1.00000000000000)*(x288)))+(x286));
                                    IKReal x290=((IKabs(x289) != 0)?((IKReal)1/(x289)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((((-0.277470000000903)*(px)*(sj2)*(sj3)*(x287)*(x290)))+(((0.00502000000000180)*(cj0)*(pz)*(sj2)*(x279)*(x290)))+(((-0.00502000000000180)*(px)*(sj2)*(x287)*(x290)))+(((0.277470000000903)*(cj0)*(pz)*(sj2)*(sj3)*(x279)*(x290)))+(((0.0317500000001019)*(cj0)*(pz)*(x279)*(x290)))+(((-0.278569999998581)*(py)*(x279)*(x290)))+(((-0.277470000000903)*(cj3)*(py)*(x279)*(x290)))+(((-0.0317500000001019)*(px)*(x287)*(x290)))), ((((-0.277470000000903)*(py)*(sj2)*(sj3)*(x279)*(x290)))+(((0.278569999998581)*(px)*(x287)*(x290)))+(((-0.278569999998581)*(cj0)*(pz)*(x279)*(x290)))+(((-0.0317500000001019)*(py)*(x279)*(x290)))+(((-0.277470000000903)*(cj0)*(cj3)*(pz)*(x279)*(x290)))+(((0.277470000000903)*(cj3)*(px)*(x287)*(x290)))+(((-0.00502000000000180)*(py)*(sj2)*(x279)*(x290)))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    { int ij1 = 0;
                                    if( !j1valid[ij1] )
                                        continue;
                                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[1], cj4array[1], sj4array[1];
                                        bool j4valid[1]={false};
                                        j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        { int ij4 = 0;
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x291=IKcos(j4);
                                            IKReal x292=((IKabs(x291) != 0)?((IKReal)1/(x291)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r20)*(x292)), ((_r22)*(x292)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j5);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x293=IKsin(j5);
                                                IKReal x294=((IKabs(x293) != 0)?((IKReal)1/(x293)):(IKReal)1.0e30);
                                                IKReal x295=IKcos(j4);
                                                IKReal x296=IKsin(j4);
                                                j6array[0]=IKatan2(((((-1.00000000000000)*(_r22)*(x294)*(x296)))+(((_r02)*(x294)*(x295)))), ((((_r02)*(x296)))+(((_r22)*(x295)))));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x297=IKcos(j5);
                                                IKReal x298=((IKabs(x297) != 0)?((IKReal)1/(x297)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x298)), ((_r10)*(x298)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            
                        } else
                        {
                            {
                            IKReal j0array[2], cj0array[2], sj0array[2];
                            bool j0valid[2]={false};
                            IKReal x299=x212;
                            IKReal x300=x213;
                            IKReal x301=((x300)+(x299));
                            IKReal x302=((IKabs(x301) != 0)?(pow(x301,-0.500000000000000)):(IKReal)1.0e30);
                            IKReal x303=((0.277470000000903)*(cj2)*(sj3));
                            IKReal x304=((0.00502000000000180)*(cj2));
                            IKReal x305=((x304)+(x303));
                            IKReal x306=((x302)*(x305));
                            if( (x306) < -1.0001 || (x306) > 1.0001 )
                                continue;
                            IKReal x307=IKasin(x306);
                            IKReal x308=((-1.00000000000000)*(px));
                            IKReal x309=((-1.00000000000000)*(pz));
                            IKReal x310=IKatan2(x308, x309);
                            j0array[0]=((((-1.00000000000000)*(x307)))+(((-1.00000000000000)*(x310))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            j0array[1]=((3.14159265358979)+(x307)+(((-1.00000000000000)*(x310))));
                            sj0array[1]=IKsin(j0array[1]);
                            cj0array[1]=IKcos(j0array[1]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            if( j0array[1] > IKPI )
                                j0array[1]-=IK2PI;
                            else if( j0array[1] < -IKPI )
                                j0array[1]+=IK2PI;
                            j0valid[1] = true;
                            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                j0valid[1]=false;
                            for(int ij0 = 0; ij0 < 2; ++ij0) {
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                            
                            {
                            IKReal evalcond;
                                evalcond=j0;
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x311=x213;
                                IKReal x312=x214;
                                IKReal x313=((x311)+(x312));
                                IKReal x314=((IKabs(x313) != 0)?((IKReal)1/(x313)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((0.277470000000903)*(pz)*(sj2)*(sj3)*(x314)))+(((0.00502000000000180)*(pz)*(sj2)*(x314)))+(((-0.277470000000903)*(cj3)*(py)*(x314)))+(((0.0317500000001019)*(pz)*(x314)))+(((-0.278569999998581)*(py)*(x314)))), ((((-0.00502000000000180)*(py)*(sj2)*(x314)))+(((-0.277470000000903)*(py)*(sj2)*(sj3)*(x314)))+(((-0.278569999998581)*(pz)*(x314)))+(((-0.0317500000001019)*(py)*(x314)))+(((-0.277470000000903)*(cj3)*(pz)*(x314)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                    bool j4valid[1]={false};
                                    j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    { int ij4 = 0;
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x315=IKcos(j4);
                                        IKReal x316=((IKabs(x315) != 0)?((IKReal)1/(x315)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r20)*(x316)), ((_r22)*(x316)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x317=IKsin(j5);
                                            IKReal x318=((IKabs(x317) != 0)?((IKReal)1/(x317)):(IKReal)1.0e30);
                                            IKReal x319=IKcos(j4);
                                            IKReal x320=IKsin(j4);
                                            j6array[0]=IKatan2(((((_r02)*(x318)*(x319)))+(((-1.00000000000000)*(_r22)*(x318)*(x320)))), ((((_r22)*(x319)))+(((_r02)*(x320)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x321=IKcos(j5);
                                            IKReal x322=((IKabs(x321) != 0)?((IKReal)1/(x321)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x322)), ((_r10)*(x322)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x323=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x324=x212;
                                IKReal x325=(cj0)*(cj0);
                                IKReal x326=x213;
                                IKReal x327=((x323)*(x325)*(x326));
                                IKReal x328=x214;
                                IKReal x329=((x323)*(x328));
                                IKReal x330=((x324)+(x327)+(x329));
                                IKReal x331=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                                IKReal x332=((2.00000000000000)*(cj0)*(px)*(pz)*(x331));
                                IKReal x333=((x330)+(((-1.00000000000000)*(x332))));
                                IKReal x334=((IKabs(x333) != 0)?((IKReal)1/(x333)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((0.277470000000903)*(cj0)*(pz)*(sj2)*(sj3)*(x323)*(x334)))+(((-0.0317500000001019)*(px)*(x331)*(x334)))+(((-0.278569999998581)*(py)*(x323)*(x334)))+(((-0.00502000000000180)*(px)*(sj2)*(x331)*(x334)))+(((0.00502000000000180)*(cj0)*(pz)*(sj2)*(x323)*(x334)))+(((-0.277470000000903)*(cj3)*(py)*(x323)*(x334)))+(((-0.277470000000903)*(px)*(sj2)*(sj3)*(x331)*(x334)))+(((0.0317500000001019)*(cj0)*(pz)*(x323)*(x334)))), ((((-0.278569999998581)*(cj0)*(pz)*(x323)*(x334)))+(((-0.0317500000001019)*(py)*(x323)*(x334)))+(((-0.00502000000000180)*(py)*(sj2)*(x323)*(x334)))+(((0.278569999998581)*(px)*(x331)*(x334)))+(((-0.277470000000903)*(py)*(sj2)*(sj3)*(x323)*(x334)))+(((0.277470000000903)*(cj3)*(px)*(x331)*(x334)))+(((-0.277470000000903)*(cj0)*(cj3)*(pz)*(x323)*(x334)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                    bool j4valid[1]={false};
                                    j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    { int ij4 = 0;
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x335=IKcos(j4);
                                        IKReal x336=((IKabs(x335) != 0)?((IKReal)1/(x335)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r20)*(x336)), ((_r22)*(x336)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x337=IKsin(j5);
                                            IKReal x338=((IKabs(x337) != 0)?((IKReal)1/(x337)):(IKReal)1.0e30);
                                            IKReal x339=IKcos(j4);
                                            IKReal x340=IKsin(j4);
                                            j6array[0]=IKatan2(((((_r02)*(x338)*(x339)))+(((-1.00000000000000)*(_r22)*(x338)*(x340)))), ((((_r22)*(x339)))+(((_r02)*(x340)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x341=IKcos(j5);
                                            IKReal x342=((IKabs(x341) != 0)?((IKReal)1/(x341)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x342)), ((_r10)*(x342)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            
                        }
                        }
                    }
                    }
                    } else {
                }
                }
                }
                
            } else
            {
                {
                IKReal j3array[2], cj3array[2], sj3array[2];
                bool j3valid[2]={false};
                IKReal x343=((0.0176193450001847)*(sj2));
                IKReal x344=((0.00278579880000507)+(x343));
                IKReal x345=(x344)*(x344);
                IKReal x346=((0.0238979554967500)+(x345));
                IKReal x347=((IKabs(x346) != 0)?(pow(x346,-0.500000000000000)):(IKReal)1.0e30);
                IKReal x348=((0.0180920459868048)*(x343));
                IKReal x349=((0.155624108700067)+(x348));
                IKReal x350=(px)*(px);
                IKReal x351=(pz)*(pz);
                IKReal x352=(py)*(py);
                IKReal x353=((x351)+(x350)+(x352));
                IKReal x354=((((-1.00000000000000)*(x353)))+(x349));
                IKReal x355=((x347)*(x354));
                if( (x355) < -1.0001 || (x355) > 1.0001 )
                    continue;
                IKReal x356=IKasin(x355);
                IKReal x357=IKatan2(0.154589635800221, x344);
                j3array[0]=((((-1.00000000000000)*(x357)))+(((-1.00000000000000)*(x356))));
                sj3array[0]=IKsin(j3array[0]);
                cj3array[0]=IKcos(j3array[0]);
                j3array[1]=((3.14159265358979)+(((-1.00000000000000)*(x357)))+(x356));
                sj3array[1]=IKsin(j3array[1]);
                cj3array[1]=IKcos(j3array[1]);
                if( j3array[0] > IKPI )
                    j3array[0]-=IK2PI;
                else if( j3array[0] < -IKPI )
                    j3array[0]+=IK2PI;
                j3valid[0] = true;
                if( j3array[1] > IKPI )
                    j3array[1]-=IK2PI;
                else if( j3array[1] < -IKPI )
                    j3array[1]+=IK2PI;
                j3valid[1] = true;
                if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                    j3valid[1]=false;
                for(int ij3 = 0; ij3 < 2; ++ij3) {
                if( !j3valid[ij3] )
                    continue;
                j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
                
                {
                    IKReal j0eval[1];
                    j0eval[0]=(((px)*(px))+((pz)*(pz)));
                    if( IKabs(j0eval[0]) < 0.000010  ) {
                        {
                        IKReal evalcond;
                            evalcond=(((px)*(px))+((pz)*(pz)));
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                                IKReal j0eval[5];
                                IKReal x358=((0.277470000000903)*(cj2)*(sj3));
                                IKReal x359=((0.00502000000000180)*(cj2));
                                IKReal x360=((x359)+(x358));
                                IKReal x361=((((-1.00000000000000)*(px)))+(x360));
                                j0eval[0]=x361;
                                j0eval[1]=x361;
                                j0eval[2]=x361;
                                j0eval[3]=x361;
                                j0eval[4]=((px)+(((-1.00000000000000)*(x360))));
                                if( IKabs(j0eval[0]) < 0.000100  && IKabs(j0eval[1]) < 0.000100  && IKabs(j0eval[2]) < 0.000100  && IKabs(j0eval[3]) < 0.000100  && IKabs(j0eval[4]) < 0.000100  ) {
                                    {
                                    j0 = 0.000000; sj0 = 0.000000; cj0 = 1.000000;
                                    {
                                    IKReal j1array[1], cj1array[1], sj1array[1];
                                    bool j1valid[1]={false};
                                    IKReal x362=x351;
                                    IKReal x363=x352;
                                    IKReal x364=((x362)+(x363));
                                    IKReal x365=((IKabs(x364) != 0)?((IKReal)1/(x364)):(IKReal)1.0e30);
                                    j1array[0]=IKatan2(((((0.0317500000001019)*(pz)*(x365)))+(((0.00502000000000180)*(pz)*(sj2)*(x365)))+(((-0.277470000000903)*(cj3)*(py)*(x365)))+(((0.277470000000903)*(pz)*(sj2)*(sj3)*(x365)))+(((-0.278569999998581)*(py)*(x365)))), ((((-0.277470000000903)*(cj3)*(pz)*(x365)))+(((-0.278569999998581)*(pz)*(x365)))+(((-0.00502000000000180)*(py)*(sj2)*(x365)))+(((-0.0317500000001019)*(py)*(x365)))+(((-0.277470000000903)*(py)*(sj2)*(sj3)*(x365)))));
                                    sj1array[0]=IKsin(j1array[0]);
                                    cj1array[0]=IKcos(j1array[0]);
                                    if( j1array[0] > IKPI )
                                        j1array[0]-=IK2PI;
                                    else if( j1array[0] < -IKPI )
                                        j1array[0]+=IK2PI;
                                    j1valid[0] = true;
                                    { int ij1 = 0;
                                    if( !j1valid[ij1] )
                                        continue;
                                    j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[1], cj4array[1], sj4array[1];
                                        bool j4valid[1]={false};
                                        j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        { int ij4 = 0;
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x366=IKcos(j4);
                                            IKReal x367=((IKabs(x366) != 0)?((IKReal)1/(x366)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r20)*(x367)), ((_r22)*(x367)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j5);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x368=IKsin(j5);
                                                IKReal x369=((IKabs(x368) != 0)?((IKReal)1/(x368)):(IKReal)1.0e30);
                                                IKReal x370=IKcos(j4);
                                                IKReal x371=IKsin(j4);
                                                j6array[0]=IKatan2(((((_r02)*(x369)*(x370)))+(((-1.00000000000000)*(_r22)*(x369)*(x371)))), ((((_r22)*(x370)))+(((_r02)*(x371)))));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x372=IKcos(j5);
                                                IKReal x373=((IKabs(x372) != 0)?((IKReal)1/(x372)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x373)), ((_r10)*(x373)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    }
                                    
                                } else
                                {
                                    continue;
                                    
                                }
                                }
                            {
                                IKReal j1eval[5];
                                IKReal x374=((0.00502000000000180)*(sj2));
                                IKReal x375=((55.2729083667509)*(sj3)*(x374));
                                IKReal x376=((x375)+(x374)+(py));
                                IKReal x377=((-0.0317500000001019)+(((-1.00000000000000)*(x376))));
                                IKReal x378=((0.0317500000001019)+(x376));
                                j1eval[0]=x377;
                                j1eval[1]=x377;
                                j1eval[2]=x378;
                                j1eval[3]=x378;
                                j1eval[4]=x378;
                                if( IKabs(j1eval[0]) < 0.000100  && IKabs(j1eval[1]) < 0.000100  && IKabs(j1eval[2]) < 0.000100  && IKabs(j1eval[3]) < 0.000100  && IKabs(j1eval[4]) < 0.000100  ) {
                                    {
                                    j1 = 0.000000; sj1 = 0.000000; cj1 = 1.000000;
                                    {
                                    IKReal j0array[1], cj0array[1], sj0array[1];
                                    bool j0valid[1]={false};
                                    IKReal x379=x351;
                                    IKReal x380=((sj2)*(x379));
                                    IKReal x381=x350;
                                    IKReal x382=((sj2)*(x381));
                                    IKReal x383=((x382)+(x380));
                                    IKReal x384=((IKabs(x383) != 0)?((IKReal)1/(x383)):(IKReal)1.0e30);
                                    j0array[0]=IKatan2(((((0.278569999998581)*(px)*(sj2)*(x384)))+(((-0.0317500000001019)*(cj2)*(pz)*(x384)))+(((0.277470000000903)*(cj3)*(px)*(sj2)*(x384)))+(((-1.00000000000000)*(cj2)*(py)*(pz)*(x384)))), ((((-0.278569999998581)*(pz)*(sj2)*(x384)))+(((-0.0317500000001019)*(cj2)*(px)*(x384)))+(((-0.277470000000903)*(cj3)*(pz)*(sj2)*(x384)))+(((-1.00000000000000)*(cj2)*(px)*(py)*(x384)))));
                                    sj0array[0]=IKsin(j0array[0]);
                                    cj0array[0]=IKcos(j0array[0]);
                                    if( j0array[0] > IKPI )
                                        j0array[0]-=IK2PI;
                                    else if( j0array[0] < -IKPI )
                                        j0array[0]+=IK2PI;
                                    j0valid[0] = true;
                                    { int ij0 = 0;
                                    if( !j0valid[ij0] )
                                        continue;
                                    j0 = j0array[0]; cj0 = cj0array[0]; sj0 = sj0array[0];
                                    
                                    _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                    _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                    _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                    _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                    _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                    _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                    _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                    _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                    _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                    {
                                    IKReal j5eval;
                                    j5eval=_r11;
                                    if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                        {
                                        j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=1.00000000000000;
                                        j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                        {
                                        j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                        IKReal j4mul = 1;
                                        j4=0;
                                        IKReal j6mul=-1.00000000000000;
                                        j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[4].fmul = j4mul;
                                        solution.basesol[4].freeind = 0;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.basesol[6].fmul = j6mul;
                                        solution.basesol[6].freeind = 0;
                                        solution.vfree.resize(1);
                                        solution.vfree[0] = 4;
                                        }
                                        }
                                    else {
                                        {
                                        IKReal j4array[1], cj4array[1], sj4array[1];
                                        bool j4valid[1]={false};
                                        j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                        sj4array[0]=IKsin(j4array[0]);
                                        cj4array[0]=IKcos(j4array[0]);
                                        if( j4array[0] > IKPI )
                                            j4array[0]-=IK2PI;
                                        else if( j4array[0] < -IKPI )
                                            j4array[0]+=IK2PI;
                                        j4valid[0] = true;
                                        { int ij4 = 0;
                                        if( !j4valid[ij4] )
                                            continue;
                                        j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKsin(j4);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x385=IKcos(j4);
                                            IKReal x386=((IKabs(x385) != 0)?((IKReal)1/(x385)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((_r20)*(x386)), ((_r22)*(x386)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j5array[1], cj5array[1], sj5array[1];
                                            bool j5valid[1]={false};
                                            j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                            sj5array[0]=IKsin(j5array[0]);
                                            cj5array[0]=IKcos(j5array[0]);
                                            if( j5array[0] > IKPI )
                                                j5array[0]-=IK2PI;
                                            else if( j5array[0] < -IKPI )
                                                j5array[0]+=IK2PI;
                                            j5valid[0] = true;
                                            { int ij5 = 0;
                                            if( !j5valid[ij5] )
                                                continue;
                                            j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                            
                                            {
                                            IKReal evalcond;
                                                evalcond=IKcos(j5);
                                                if( IKabs(evalcond) < 0.00001 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x387=IKsin(j5);
                                                IKReal x388=((IKabs(x387) != 0)?((IKReal)1/(x387)):(IKReal)1.0e30);
                                                IKReal x389=IKcos(j4);
                                                IKReal x390=IKsin(j4);
                                                j6array[0]=IKatan2(((((-1.00000000000000)*(_r22)*(x388)*(x390)))+(((_r02)*(x388)*(x389)))), ((((_r02)*(x390)))+(((_r22)*(x389)))));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                                if( 1 ) {
                                                {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]={false};
                                                IKReal x391=IKcos(j5);
                                                IKReal x392=((IKabs(x391) != 0)?((IKReal)1/(x391)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x392)), ((_r10)*(x392)));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                    j6array[0]-=IK2PI;
                                                else if( j6array[0] < -IKPI )
                                                    j6array[0]+=IK2PI;
                                                j6valid[0] = true;
                                                { int ij6 = 0;
                                                if( !j6valid[ij6] )
                                                    continue;
                                                j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                                
                                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                                solution.basesol.resize(7);
                                                solution.basesol[0].foffset = j0;
                                                solution.basesol[1].foffset = j1;
                                                solution.basesol[2].foffset = j2;
                                                solution.basesol[3].foffset = j3;
                                                solution.basesol[4].foffset = j4;
                                                solution.basesol[5].foffset = j5;
                                                solution.basesol[6].foffset = j6;
                                                solution.vfree.resize(0);
                                                }
                                                }
                                                } else {
                                            }
                                            }
                                            }
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        }
                                    }
                                    }
                                    }
                                    }
                                    
                                } else
                                {
                                    continue;
                                    
                                }
                                }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j0array[2], cj0array[2], sj0array[2];
                            bool j0valid[2]={false};
                            IKReal x393=x350;
                            IKReal x394=x351;
                            IKReal x395=((x394)+(x393));
                            IKReal x396=((IKabs(x395) != 0)?(pow(x395,-0.500000000000000)):(IKReal)1.0e30);
                            IKReal x397=((0.277470000000903)*(cj2)*(sj3));
                            IKReal x398=((0.00502000000000180)*(cj2));
                            IKReal x399=((x397)+(x398));
                            IKReal x400=((x396)*(x399));
                            if( (x400) < -1.0001 || (x400) > 1.0001 )
                                continue;
                            IKReal x401=IKasin(x400);
                            IKReal x402=((-1.00000000000000)*(px));
                            IKReal x403=((-1.00000000000000)*(pz));
                            IKReal x404=IKatan2(x402, x403);
                            j0array[0]=((((-1.00000000000000)*(x404)))+(((-1.00000000000000)*(x401))));
                            sj0array[0]=IKsin(j0array[0]);
                            cj0array[0]=IKcos(j0array[0]);
                            j0array[1]=((3.14159265358979)+(((-1.00000000000000)*(x404)))+(x401));
                            sj0array[1]=IKsin(j0array[1]);
                            cj0array[1]=IKcos(j0array[1]);
                            if( j0array[0] > IKPI )
                                j0array[0]-=IK2PI;
                            else if( j0array[0] < -IKPI )
                                j0array[0]+=IK2PI;
                            j0valid[0] = true;
                            if( j0array[1] > IKPI )
                                j0array[1]-=IK2PI;
                            else if( j0array[1] < -IKPI )
                                j0array[1]+=IK2PI;
                            j0valid[1] = true;
                            if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                                j0valid[1]=false;
                            for(int ij0 = 0; ij0 < 2; ++ij0) {
                            if( !j0valid[ij0] )
                                continue;
                            j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                            
                            {
                            IKReal evalcond;
                                evalcond=j0;
                                if( IKabs(evalcond) < 0.00001 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x405=x351;
                                IKReal x406=x352;
                                IKReal x407=((x405)+(x406));
                                IKReal x408=((IKabs(x407) != 0)?((IKReal)1/(x407)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((0.0317500000001019)*(pz)*(x408)))+(((-0.278569999998581)*(py)*(x408)))+(((0.00502000000000180)*(pz)*(sj2)*(x408)))+(((-0.277470000000903)*(cj3)*(py)*(x408)))+(((0.277470000000903)*(pz)*(sj2)*(sj3)*(x408)))), ((((-0.277470000000903)*(cj3)*(pz)*(x408)))+(((-0.278569999998581)*(pz)*(x408)))+(((-0.277470000000903)*(py)*(sj2)*(sj3)*(x408)))+(((-0.0317500000001019)*(py)*(x408)))+(((-0.00502000000000180)*(py)*(sj2)*(x408)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                    bool j4valid[1]={false};
                                    j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    { int ij4 = 0;
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x409=IKcos(j4);
                                        IKReal x410=((IKabs(x409) != 0)?((IKReal)1/(x409)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r20)*(x410)), ((_r22)*(x410)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x411=IKsin(j5);
                                            IKReal x412=((IKabs(x411) != 0)?((IKReal)1/(x411)):(IKReal)1.0e30);
                                            IKReal x413=IKcos(j4);
                                            IKReal x414=IKsin(j4);
                                            j6array[0]=IKatan2(((((-1.00000000000000)*(_r22)*(x412)*(x414)))+(((_r02)*(x412)*(x413)))), ((((_r02)*(x414)))+(((_r22)*(x413)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x415=IKcos(j5);
                                            IKReal x416=((IKabs(x415) != 0)?((IKReal)1/(x415)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x416)), ((_r10)*(x416)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                                if( 1 ) {
                                {
                                IKReal j1array[1], cj1array[1], sj1array[1];
                                bool j1valid[1]={false};
                                IKReal x417=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                                IKReal x418=x350;
                                IKReal x419=(cj0)*(cj0);
                                IKReal x420=x351;
                                IKReal x421=((x417)*(x419)*(x420));
                                IKReal x422=x352;
                                IKReal x423=((x417)*(x422));
                                IKReal x424=((x423)+(x421)+(x418));
                                IKReal x425=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                                IKReal x426=((2.00000000000000)*(cj0)*(px)*(pz)*(x425));
                                IKReal x427=((((-1.00000000000000)*(x426)))+(x424));
                                IKReal x428=((IKabs(x427) != 0)?((IKReal)1/(x427)):(IKReal)1.0e30);
                                j1array[0]=IKatan2(((((-0.277470000000903)*(cj3)*(py)*(x417)*(x428)))+(((-0.0317500000001019)*(px)*(x425)*(x428)))+(((-0.278569999998581)*(py)*(x417)*(x428)))+(((0.00502000000000180)*(cj0)*(pz)*(sj2)*(x417)*(x428)))+(((-0.277470000000903)*(px)*(sj2)*(sj3)*(x425)*(x428)))+(((-0.00502000000000180)*(px)*(sj2)*(x425)*(x428)))+(((0.0317500000001019)*(cj0)*(pz)*(x417)*(x428)))+(((0.277470000000903)*(cj0)*(pz)*(sj2)*(sj3)*(x417)*(x428)))), ((((-0.278569999998581)*(cj0)*(pz)*(x417)*(x428)))+(((-0.277470000000903)*(cj0)*(cj3)*(pz)*(x417)*(x428)))+(((-0.0317500000001019)*(py)*(x417)*(x428)))+(((-0.00502000000000180)*(py)*(sj2)*(x417)*(x428)))+(((-0.277470000000903)*(py)*(sj2)*(sj3)*(x417)*(x428)))+(((0.278569999998581)*(px)*(x425)*(x428)))+(((0.277470000000903)*(cj3)*(px)*(x425)*(x428)))));
                                sj1array[0]=IKsin(j1array[0]);
                                cj1array[0]=IKcos(j1array[0]);
                                if( j1array[0] > IKPI )
                                    j1array[0]-=IK2PI;
                                else if( j1array[0] < -IKPI )
                                    j1array[0]+=IK2PI;
                                j1valid[0] = true;
                                { int ij1 = 0;
                                if( !j1valid[ij1] )
                                    continue;
                                j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                                
                                _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                                _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                                _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                                _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                                _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                                _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                                _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                                _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                                _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                                {
                                IKReal j5eval;
                                j5eval=_r11;
                                if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                    {
                                    j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=1.00000000000000;
                                    j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                    {
                                    j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                    IKReal j4mul = 1;
                                    j4=0;
                                    IKReal j6mul=-1.00000000000000;
                                    j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[4].fmul = j4mul;
                                    solution.basesol[4].freeind = 0;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.basesol[6].fmul = j6mul;
                                    solution.basesol[6].freeind = 0;
                                    solution.vfree.resize(1);
                                    solution.vfree[0] = 4;
                                    }
                                    }
                                else {
                                    {
                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                    bool j4valid[1]={false};
                                    j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                    sj4array[0]=IKsin(j4array[0]);
                                    cj4array[0]=IKcos(j4array[0]);
                                    if( j4array[0] > IKPI )
                                        j4array[0]-=IK2PI;
                                    else if( j4array[0] < -IKPI )
                                        j4array[0]+=IK2PI;
                                    j4valid[0] = true;
                                    { int ij4 = 0;
                                    if( !j4valid[ij4] )
                                        continue;
                                    j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKsin(j4);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x429=IKcos(j4);
                                        IKReal x430=((IKabs(x429) != 0)?((IKReal)1/(x429)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((_r20)*(x430)), ((_r22)*(x430)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j5array[1], cj5array[1], sj5array[1];
                                        bool j5valid[1]={false};
                                        j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                        sj5array[0]=IKsin(j5array[0]);
                                        cj5array[0]=IKcos(j5array[0]);
                                        if( j5array[0] > IKPI )
                                            j5array[0]-=IK2PI;
                                        else if( j5array[0] < -IKPI )
                                            j5array[0]+=IK2PI;
                                        j5valid[0] = true;
                                        { int ij5 = 0;
                                        if( !j5valid[ij5] )
                                            continue;
                                        j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                        
                                        {
                                        IKReal evalcond;
                                            evalcond=IKcos(j5);
                                            if( IKabs(evalcond) < 0.00001 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x431=IKsin(j5);
                                            IKReal x432=((IKabs(x431) != 0)?((IKReal)1/(x431)):(IKReal)1.0e30);
                                            IKReal x433=IKcos(j4);
                                            IKReal x434=IKsin(j4);
                                            j6array[0]=IKatan2(((((_r02)*(x432)*(x433)))+(((-1.00000000000000)*(_r22)*(x432)*(x434)))), ((((_r22)*(x433)))+(((_r02)*(x434)))));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                            if( 1 ) {
                                            {
                                            IKReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1]={false};
                                            IKReal x435=IKcos(j5);
                                            IKReal x436=((IKabs(x435) != 0)?((IKReal)1/(x435)):(IKReal)1.0e30);
                                            j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x436)), ((_r10)*(x436)));
                                            sj6array[0]=IKsin(j6array[0]);
                                            cj6array[0]=IKcos(j6array[0]);
                                            if( j6array[0] > IKPI )
                                                j6array[0]-=IK2PI;
                                            else if( j6array[0] < -IKPI )
                                                j6array[0]+=IK2PI;
                                            j6valid[0] = true;
                                            { int ij6 = 0;
                                            if( !j6valid[ij6] )
                                                continue;
                                            j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                            
                                            vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                            solution.basesol.resize(7);
                                            solution.basesol[0].foffset = j0;
                                            solution.basesol[1].foffset = j1;
                                            solution.basesol[2].foffset = j2;
                                            solution.basesol[3].foffset = j3;
                                            solution.basesol[4].foffset = j4;
                                            solution.basesol[5].foffset = j5;
                                            solution.basesol[6].foffset = j6;
                                            solution.vfree.resize(0);
                                            }
                                            }
                                            } else {
                                        }
                                        }
                                        }
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    }
                                }
                                }
                                }
                                } else {
                            }
                            }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        
                    } else
                    {
                        {
                        IKReal j0array[2], cj0array[2], sj0array[2];
                        bool j0valid[2]={false};
                        IKReal x437=x350;
                        IKReal x438=x351;
                        IKReal x439=((x438)+(x437));
                        IKReal x440=((IKabs(x439) != 0)?(pow(x439,-0.500000000000000)):(IKReal)1.0e30);
                        IKReal x441=((0.277470000000903)*(cj2)*(sj3));
                        IKReal x442=((0.00502000000000180)*(cj2));
                        IKReal x443=((x441)+(x442));
                        IKReal x444=((x440)*(x443));
                        if( (x444) < -1.0001 || (x444) > 1.0001 )
                            continue;
                        IKReal x445=IKasin(x444);
                        IKReal x446=((-1.00000000000000)*(px));
                        IKReal x447=((-1.00000000000000)*(pz));
                        IKReal x448=IKatan2(x446, x447);
                        j0array[0]=((((-1.00000000000000)*(x445)))+(((-1.00000000000000)*(x448))));
                        sj0array[0]=IKsin(j0array[0]);
                        cj0array[0]=IKcos(j0array[0]);
                        j0array[1]=((3.14159265358979)+(x445)+(((-1.00000000000000)*(x448))));
                        sj0array[1]=IKsin(j0array[1]);
                        cj0array[1]=IKcos(j0array[1]);
                        if( j0array[0] > IKPI )
                            j0array[0]-=IK2PI;
                        else if( j0array[0] < -IKPI )
                            j0array[0]+=IK2PI;
                        j0valid[0] = true;
                        if( j0array[1] > IKPI )
                            j0array[1]-=IK2PI;
                        else if( j0array[1] < -IKPI )
                            j0array[1]+=IK2PI;
                        j0valid[1] = true;
                        if( j0valid[0] && j0valid[1] && IKabs(cj0array[0]-cj0array[1]) < 0.0001 && IKabs(sj0array[0]-sj0array[1]) < 0.0001 )
                            j0valid[1]=false;
                        for(int ij0 = 0; ij0 < 2; ++ij0) {
                        if( !j0valid[ij0] )
                            continue;
                        j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
                        
                        {
                        IKReal evalcond;
                            evalcond=j0;
                            if( IKabs(evalcond) < 0.00001 ) {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x449=x351;
                            IKReal x450=x352;
                            IKReal x451=((x450)+(x449));
                            IKReal x452=((IKabs(x451) != 0)?((IKReal)1/(x451)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((0.0317500000001019)*(pz)*(x452)))+(((-0.278569999998581)*(py)*(x452)))+(((0.277470000000903)*(pz)*(sj2)*(sj3)*(x452)))+(((0.00502000000000180)*(pz)*(sj2)*(x452)))+(((-0.277470000000903)*(cj3)*(py)*(x452)))), ((((-0.00502000000000180)*(py)*(sj2)*(x452)))+(((-0.277470000000903)*(cj3)*(pz)*(x452)))+(((-0.278569999998581)*(pz)*(x452)))+(((-0.0317500000001019)*(py)*(x452)))+(((-0.277470000000903)*(py)*(sj2)*(sj3)*(x452)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                            _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                            _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                            _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                            _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKsin(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x453=IKcos(j4);
                                    IKReal x454=((IKabs(x453) != 0)?((IKReal)1/(x453)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r20)*(x454)), ((_r22)*(x454)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x455=IKsin(j5);
                                        IKReal x456=((IKabs(x455) != 0)?((IKReal)1/(x455)):(IKReal)1.0e30);
                                        IKReal x457=IKcos(j4);
                                        IKReal x458=IKsin(j4);
                                        j6array[0]=IKatan2(((((_r02)*(x456)*(x457)))+(((-1.00000000000000)*(_r22)*(x456)*(x458)))), ((((_r22)*(x457)))+(((_r02)*(x458)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x459=IKcos(j5);
                                        IKReal x460=((IKabs(x459) != 0)?((IKReal)1/(x459)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x460)), ((_r10)*(x460)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            } else {
                            if( 1 ) {
                            {
                            IKReal j1array[1], cj1array[1], sj1array[1];
                            bool j1valid[1]={false};
                            IKReal x461=((IKabs(sj0) != 0)?(pow(sj0,-2.00000000000000)):(IKReal)1.0e30);
                            IKReal x462=x350;
                            IKReal x463=(cj0)*(cj0);
                            IKReal x464=x351;
                            IKReal x465=((x461)*(x463)*(x464));
                            IKReal x466=x352;
                            IKReal x467=((x461)*(x466));
                            IKReal x468=((x462)+(x467)+(x465));
                            IKReal x469=((IKabs(sj0) != 0)?((IKReal)1/(sj0)):(IKReal)1.0e30);
                            IKReal x470=((2.00000000000000)*(cj0)*(px)*(pz)*(x469));
                            IKReal x471=((x468)+(((-1.00000000000000)*(x470))));
                            IKReal x472=((IKabs(x471) != 0)?((IKReal)1/(x471)):(IKReal)1.0e30);
                            j1array[0]=IKatan2(((((0.00502000000000180)*(cj0)*(pz)*(sj2)*(x461)*(x472)))+(((0.0317500000001019)*(cj0)*(pz)*(x461)*(x472)))+(((-0.277470000000903)*(px)*(sj2)*(sj3)*(x469)*(x472)))+(((-0.278569999998581)*(py)*(x461)*(x472)))+(((-0.0317500000001019)*(px)*(x469)*(x472)))+(((0.277470000000903)*(cj0)*(pz)*(sj2)*(sj3)*(x461)*(x472)))+(((-0.00502000000000180)*(px)*(sj2)*(x469)*(x472)))+(((-0.277470000000903)*(cj3)*(py)*(x461)*(x472)))), ((((-0.0317500000001019)*(py)*(x461)*(x472)))+(((-0.278569999998581)*(cj0)*(pz)*(x461)*(x472)))+(((0.277470000000903)*(cj3)*(px)*(x469)*(x472)))+(((-0.277470000000903)*(py)*(sj2)*(sj3)*(x461)*(x472)))+(((-0.277470000000903)*(cj0)*(cj3)*(pz)*(x461)*(x472)))+(((0.278569999998581)*(px)*(x469)*(x472)))+(((-0.00502000000000180)*(py)*(sj2)*(x461)*(x472)))));
                            sj1array[0]=IKsin(j1array[0]);
                            cj1array[0]=IKcos(j1array[0]);
                            if( j1array[0] > IKPI )
                                j1array[0]-=IK2PI;
                            else if( j1array[0] < -IKPI )
                                j1array[0]+=IK2PI;
                            j1valid[0] = true;
                            { int ij1 = 0;
                            if( !j1valid[ij1] )
                                continue;
                            j1 = j1array[0]; cj1 = cj1array[0]; sj1 = sj1array[0];
                            
                            _r00=((((-1.00000000000000)*(cj0)*(cj3)*(r20)*(sj1)*(sj2)))+(((cj1)*(r00)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r10)*(sj2)))+(((-1.00000000000000)*(cj2)*(cj3)*(r20)*(sj0)))+(((cj3)*(r00)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r00)))+(((-1.00000000000000)*(r10)*(sj1)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(r20)*(sj3))));
                            _r01=((((-1.00000000000000)*(cj0)*(cj1)*(r21)*(sj3)))+(((-1.00000000000000)*(r11)*(sj1)*(sj3)))+(((cj1)*(r01)*(sj0)*(sj3)))+(((cj3)*(r01)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r01)))+(((-1.00000000000000)*(cj2)*(cj3)*(r21)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj3)*(r21)*(sj1)*(sj2)))+(((cj1)*(cj3)*(r11)*(sj2))));
                            _r02=((((-1.00000000000000)*(cj2)*(cj3)*(r22)*(sj0)))+(((-1.00000000000000)*(cj0)*(cj1)*(r22)*(sj3)))+(((cj3)*(r02)*(sj0)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj0)*(cj2)*(cj3)*(r02)))+(((-1.00000000000000)*(cj0)*(cj3)*(r22)*(sj1)*(sj2)))+(((cj1)*(r02)*(sj0)*(sj3)))+(((-1.00000000000000)*(r12)*(sj1)*(sj3)))+(((cj1)*(cj3)*(r12)*(sj2))));
                            _r10=((((cj2)*(r20)*(sj0)*(sj3)))+(((cj1)*(cj3)*(r00)*(sj0)))+(((cj0)*(cj2)*(r00)*(sj3)))+(((cj0)*(r20)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r20)))+(((-1.00000000000000)*(cj1)*(r10)*(sj2)*(sj3)))+(((-1.00000000000000)*(r00)*(sj0)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj3)*(r10)*(sj1))));
                            _r11=((((-1.00000000000000)*(cj3)*(r11)*(sj1)))+(((cj0)*(cj2)*(r01)*(sj3)))+(((-1.00000000000000)*(r01)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r01)*(sj0)))+(((cj2)*(r21)*(sj0)*(sj3)))+(((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r21)))+(((cj0)*(r21)*(sj1)*(sj2)*(sj3)))+(((-1.00000000000000)*(cj1)*(r11)*(sj2)*(sj3))));
                            _r12=((((-1.00000000000000)*(cj0)*(cj1)*(cj3)*(r22)))+(((cj0)*(r22)*(sj1)*(sj2)*(sj3)))+(((cj1)*(cj3)*(r02)*(sj0)))+(((-1.00000000000000)*(cj1)*(r12)*(sj2)*(sj3)))+(((cj2)*(r22)*(sj0)*(sj3)))+(((-1.00000000000000)*(r02)*(sj0)*(sj1)*(sj2)*(sj3)))+(((cj0)*(cj2)*(r02)*(sj3)))+(((-1.00000000000000)*(cj3)*(r12)*(sj1))));
                            _r20=((((-1.00000000000000)*(cj0)*(r00)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r10)))+(((cj0)*(cj2)*(r20)*(sj1)))+(((-1.00000000000000)*(cj2)*(r00)*(sj0)*(sj1)))+(((-1.00000000000000)*(r20)*(sj0)*(sj2))));
                            _r21=((((-1.00000000000000)*(cj0)*(r01)*(sj2)))+(((-1.00000000000000)*(cj2)*(r01)*(sj0)*(sj1)))+(((cj0)*(cj2)*(r21)*(sj1)))+(((-1.00000000000000)*(r21)*(sj0)*(sj2)))+(((-1.00000000000000)*(cj1)*(cj2)*(r11))));
                            _r22=((((-1.00000000000000)*(cj0)*(r02)*(sj2)))+(((cj0)*(cj2)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r02)*(sj0)*(sj1)))+(((-1.00000000000000)*(cj1)*(cj2)*(r12)))+(((-1.00000000000000)*(r22)*(sj0)*(sj2))));
                            {
                            IKReal j5eval;
                            j5eval=_r11;
                            if( j5eval >= 0.999990 && j5eval <= 1.000010 ) {
                                {
                                j5 = -1.570796; sj5 = -1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=1.00000000000000;
                                j6=((-1.00000000000000)*(IKatan2(_r02, _r22)));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else if( j5eval >= -1.000010 && j5eval <= -0.999990 ) {
                                {
                                j5 = 1.570796; sj5 = 1.000000; cj5 = 0.000000;
                                IKReal j4mul = 1;
                                j4=0;
                                IKReal j6mul=-1.00000000000000;
                                j6=((((-1.00000000000000)*(3.14159265358979)))+(((-1.00000000000000)*(IKatan2(_r20, _r00)))));
                                vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                solution.basesol.resize(7);
                                solution.basesol[0].foffset = j0;
                                solution.basesol[1].foffset = j1;
                                solution.basesol[2].foffset = j2;
                                solution.basesol[3].foffset = j3;
                                solution.basesol[4].foffset = j4;
                                solution.basesol[4].fmul = j4mul;
                                solution.basesol[4].freeind = 0;
                                solution.basesol[5].foffset = j5;
                                solution.basesol[6].foffset = j6;
                                solution.basesol[6].fmul = j6mul;
                                solution.basesol[6].freeind = 0;
                                solution.vfree.resize(1);
                                solution.vfree[0] = 4;
                                }
                                }
                            else {
                                {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]={false};
                                j4array[0]=IKatan2(_r21, ((-1.00000000000000)*(_r01)));
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                    j4array[0]-=IK2PI;
                                else if( j4array[0] < -IKPI )
                                    j4array[0]+=IK2PI;
                                j4valid[0] = true;
                                { int ij4 = 0;
                                if( !j4valid[ij4] )
                                    continue;
                                j4 = j4array[0]; cj4 = cj4array[0]; sj4 = sj4array[0];
                                
                                {
                                IKReal evalcond;
                                    evalcond=IKsin(j4);
                                    if( IKabs(evalcond) < 0.00001 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((-1.00000000000000)*(_r01)*(((IKabs(IKcos(j4)) != 0)?((IKReal)1/(IKcos(j4))):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1]={false};
                                    IKReal x473=IKcos(j4);
                                    IKReal x474=((IKabs(x473) != 0)?((IKReal)1/(x473)):(IKReal)1.0e30);
                                    j6array[0]=IKatan2(((_r20)*(x474)), ((_r22)*(x474)));
                                    sj6array[0]=IKsin(j6array[0]);
                                    cj6array[0]=IKcos(j6array[0]);
                                    if( j6array[0] > IKPI )
                                        j6array[0]-=IK2PI;
                                    else if( j6array[0] < -IKPI )
                                        j6array[0]+=IK2PI;
                                    j6valid[0] = true;
                                    { int ij6 = 0;
                                    if( !j6valid[ij6] )
                                        continue;
                                    j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                    
                                    vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                    solution.basesol.resize(7);
                                    solution.basesol[0].foffset = j0;
                                    solution.basesol[1].foffset = j1;
                                    solution.basesol[2].foffset = j2;
                                    solution.basesol[3].foffset = j3;
                                    solution.basesol[4].foffset = j4;
                                    solution.basesol[5].foffset = j5;
                                    solution.basesol[6].foffset = j6;
                                    solution.vfree.resize(0);
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                    if( 1 ) {
                                    {
                                    IKReal j5array[1], cj5array[1], sj5array[1];
                                    bool j5valid[1]={false};
                                    j5array[0]=IKatan2(((-1.00000000000000)*(_r11)), ((_r21)*(((IKabs(sj4) != 0)?((IKReal)1/(sj4)):(IKReal)1.0e30))));
                                    sj5array[0]=IKsin(j5array[0]);
                                    cj5array[0]=IKcos(j5array[0]);
                                    if( j5array[0] > IKPI )
                                        j5array[0]-=IK2PI;
                                    else if( j5array[0] < -IKPI )
                                        j5array[0]+=IK2PI;
                                    j5valid[0] = true;
                                    { int ij5 = 0;
                                    if( !j5valid[ij5] )
                                        continue;
                                    j5 = j5array[0]; cj5 = cj5array[0]; sj5 = sj5array[0];
                                    
                                    {
                                    IKReal evalcond;
                                        evalcond=IKcos(j5);
                                        if( IKabs(evalcond) < 0.00001 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x475=IKsin(j5);
                                        IKReal x476=((IKabs(x475) != 0)?((IKReal)1/(x475)):(IKReal)1.0e30);
                                        IKReal x477=IKcos(j4);
                                        IKReal x478=IKsin(j4);
                                        j6array[0]=IKatan2(((((_r02)*(x476)*(x477)))+(((-1.00000000000000)*(_r22)*(x476)*(x478)))), ((((_r22)*(x477)))+(((_r02)*(x478)))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                        if( 1 ) {
                                        {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]={false};
                                        IKReal x479=IKcos(j5);
                                        IKReal x480=((IKabs(x479) != 0)?((IKReal)1/(x479)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((-1.00000000000000)*(_r12)*(x480)), ((_r10)*(x480)));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                            j6array[0]-=IK2PI;
                                        else if( j6array[0] < -IKPI )
                                            j6array[0]+=IK2PI;
                                        j6valid[0] = true;
                                        { int ij6 = 0;
                                        if( !j6valid[ij6] )
                                            continue;
                                        j6 = j6array[0]; cj6 = cj6array[0]; sj6 = sj6array[0];
                                        
                                        vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
                                        solution.basesol.resize(7);
                                        solution.basesol[0].foffset = j0;
                                        solution.basesol[1].foffset = j1;
                                        solution.basesol[2].foffset = j2;
                                        solution.basesol[3].foffset = j3;
                                        solution.basesol[4].foffset = j4;
                                        solution.basesol[5].foffset = j5;
                                        solution.basesol[6].foffset = j6;
                                        solution.vfree.resize(0);
                                        }
                                        }
                                        } else {
                                    }
                                    }
                                    }
                                    }
                                    }
                                    } else {
                                }
                                }
                                }
                                }
                                }
                                }
                            }
                            }
                            }
                            } else {
                        }
                        }
                        }
                        }
                        }
                        
                    }
                    }
                }
                }
                
            }
            }
        } else {
    }
    }
    }
    }
    }
    }
    }
return vsolutions.size()>0;
}

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%f, ", (float)sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
