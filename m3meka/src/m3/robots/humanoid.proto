// M3 -- Meka Robotics Robot Components
// Copyright (c) 2010 Meka Robotics
// Author: edsinger@mekabot.com (Aaron Edsinger)
// 
// M3 is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// M3 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with M3.  If not, see <http://www.gnu.org/licenses/>.


option optimize_for = SPEED;

import "component_base.proto";
import "joint_array_mode.proto";
import "trajectory.proto";
import "smoothing_mode.proto";

message M3HumanoidStatus
{
	optional M3BaseStatus	base=1;			//Reserved	
	optional M3BaseHumanoidStatus	right_arm=2;				//
	optional M3BaseHumanoidStatus	left_arm=3;				//	
	optional M3BaseHumanoidStatus	torso=4;				//
	optional M3BaseHumanoidStatus	head=5;				//
	optional M3BaseHumanoidStatus	right_hand=6;
	optional M3BaseHumanoidStatus	left_hand=7;	
	repeated double			right_eye_rot=8;//3x1 position of End frame in Base coords (x,y,z)
	repeated double			left_eye_rot=9;// 3x3 Rotation Mtx
	repeated double			right_eye_pos=10;//3x1 position of End frame in Base coords (x,y,z)
	repeated double			left_eye_pos=11;// 3x3 Rotation Mtx
	optional bool			motor_enabled=12;			//On-Off	
}


message M3HumanoidCommand{
	optional M3BaseHumanoidCommand	right_arm=1;
	optional M3BaseHumanoidCommand	left_arm=2;
	optional M3BaseHumanoidCommand	torso=3;
	optional M3BaseHumanoidCommand	head=4;	
	optional M3BaseHumanoidCommand	right_hand=5;
	optional M3BaseHumanoidCommand	left_hand=6;
	optional bool			enable_motor=7;				//Turn motor power on/off
}

message M3HumanoidParam{	
	optional M3BaseHumanoidParam	right_arm=1;
	optional M3BaseHumanoidParam	left_arm=2;
	optional M3BaseHumanoidParam	torso=3;	
	optional M3BaseHumanoidParam	head=4;	
	optional M3BaseHumanoidParam	right_hand=5;	
	optional M3BaseHumanoidParam	left_hand=6;	
}

message M3BaseHumanoidStatus
{	
    repeated double		    torque=1;					//(mNm)
    repeated double		    torquedot=2;				//(mNm)    
    repeated double			theta=4;					//(Rad)
    repeated double			thetadot=5;				//(Rad/s)
    repeated double			thetadotdot=6;				//(Rad/s^2)
    optional int32			completed_spline_idx=7;	//Last spline command completed	
	repeated double			end_pos=8;	//3x1 position of End frame in Base coords (x,y,z)
	repeated double			end_rot=9;	// 3x3 Rotation Mtx
	repeated double			J=10;			//6xndof Jacobian Frame ndof+1 to Frame 0
	repeated double			G=11;			//ndofx1 joint torque gravity vector mN*m
	repeated double			end_twist=12;	//6x1 twist at Frame ndof+1
	repeated int32			pwm_cmd=13;				//Current PWM command to motor
}



message M3BaseHumanoidCommand{
	repeated bool 				cmd_enabled= 10;			// A.H: To support multi clients (on different chains) for humanoid
	repeated double				tq_desired = 1;				//Desired torque (mNm)
	repeated double				q_stiffness = 2;			//Desired joint stifness (0.0-1.0, scalar)
	repeated JOINT_ARRAY_MODE		ctrl_mode = 3;				//Desired arm control mode 
	repeated double				q_desired = 4;				//Desired joint angle (Deg)
	repeated M3JointVia			vias=5;	 				//Joint trajectory vias
	repeated double				qdot_desired = 6;				//Desired joint velocity (Deg)
	repeated double				q_slew_rate = 7;			//Slew Rates (max ang velocity) for joints (Deg/sec)
	repeated double				pwm_desired = 8;			
	repeated SMOOTHING_MODE			smoothing_mode = 9;				//Desired arm control mode 
}

message M3BaseHumanoidParam
{	
	optional double			payload_mass=1;				//Kg
	repeated double 			payload_com=2;				//Meters, End link coordinate system
	repeated double 			payload_inertia=3;
	optional bool			use_velocities=4;
	optional bool			use_accelerations=5;
}