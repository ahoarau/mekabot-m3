/* Auto-generated by genmsg_cpp for file /home/meka/mekabot/meka-ros-pkg/m3_client/msg/M3BaseStatus.msg */
#ifndef M3_CLIENT_MESSAGE_M3BASESTATUS_H
#define M3_CLIENT_MESSAGE_M3BASESTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace m3_client
{
template <class ContainerAllocator>
struct M3BaseStatus_ {
  typedef M3BaseStatus_<ContainerAllocator> Type;

  M3BaseStatus_()
  : name()
  , state(0)
  , timestamp(0)
  , rate()
  , version()
  {
  }

  M3BaseStatus_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , state(0)
  , timestamp(0)
  , rate(_alloc)
  , version(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef uint8_t _state_type;
  uint8_t state;

  typedef int64_t _timestamp_type;
  int64_t timestamp;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rate_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  rate;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _version_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  version;


  typedef boost::shared_ptr< ::m3_client::M3BaseStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::m3_client::M3BaseStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct M3BaseStatus
typedef  ::m3_client::M3BaseStatus_<std::allocator<void> > M3BaseStatus;

typedef boost::shared_ptr< ::m3_client::M3BaseStatus> M3BaseStatusPtr;
typedef boost::shared_ptr< ::m3_client::M3BaseStatus const> M3BaseStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::m3_client::M3BaseStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::m3_client::M3BaseStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace m3_client

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::m3_client::M3BaseStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::m3_client::M3BaseStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::m3_client::M3BaseStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7d453ab91423b010362aa62a9d8b20ce";
  }

  static const char* value(const  ::m3_client::M3BaseStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7d453ab91423b010ULL;
  static const uint64_t static_value2 = 0x362aa62a9d8b20ceULL;
};

template<class ContainerAllocator>
struct DataType< ::m3_client::M3BaseStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3_client/M3BaseStatus";
  }

  static const char* value(const  ::m3_client::M3BaseStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::m3_client::M3BaseStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
uint8 state\n\
int64 timestamp\n\
string rate\n\
string version\n\
\n\
\n\
";
  }

  static const char* value(const  ::m3_client::M3BaseStatus_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::m3_client::M3BaseStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.state);
    stream.next(m.timestamp);
    stream.next(m.rate);
    stream.next(m.version);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct M3BaseStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::m3_client::M3BaseStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::m3_client::M3BaseStatus_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "timestamp: ";
    Printer<int64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "rate: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rate);
    s << indent << "version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.version);
  }
};


} // namespace message_operations
} // namespace ros

#endif // M3_CLIENT_MESSAGE_M3BASESTATUS_H

