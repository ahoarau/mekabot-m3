"""autogenerated by genpy from m3_client/M3HumanoidCmdRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class M3HumanoidCmdRequest(genpy.Message):
  _md5sum = "b43a3aea53346c3fbcd4954afa276df8"
  _type = "m3_client/M3HumanoidCmdRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 chain
float32[] tq_desired
uint8[] ctrl_mode
float32[] q_stiffness
float32[] q_desired
float32[] qdot_desired
float32[] q_slew_rate
float32[] pwm_desired
bool enable_motor

"""
  __slots__ = ['chain','tq_desired','ctrl_mode','q_stiffness','q_desired','qdot_desired','q_slew_rate','pwm_desired','enable_motor']
  _slot_types = ['uint8','float32[]','uint8[]','float32[]','float32[]','float32[]','float32[]','float32[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       chain,tq_desired,ctrl_mode,q_stiffness,q_desired,qdot_desired,q_slew_rate,pwm_desired,enable_motor

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(M3HumanoidCmdRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.chain is None:
        self.chain = 0
      if self.tq_desired is None:
        self.tq_desired = []
      if self.ctrl_mode is None:
        self.ctrl_mode = ''
      if self.q_stiffness is None:
        self.q_stiffness = []
      if self.q_desired is None:
        self.q_desired = []
      if self.qdot_desired is None:
        self.qdot_desired = []
      if self.q_slew_rate is None:
        self.q_slew_rate = []
      if self.pwm_desired is None:
        self.pwm_desired = []
      if self.enable_motor is None:
        self.enable_motor = False
    else:
      self.chain = 0
      self.tq_desired = []
      self.ctrl_mode = ''
      self.q_stiffness = []
      self.q_desired = []
      self.qdot_desired = []
      self.q_slew_rate = []
      self.pwm_desired = []
      self.enable_motor = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.chain))
      length = len(self.tq_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.tq_desired))
      _x = self.ctrl_mode
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.q_stiffness)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.q_stiffness))
      length = len(self.q_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.q_desired))
      length = len(self.qdot_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.qdot_desired))
      length = len(self.q_slew_rate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.q_slew_rate))
      length = len(self.pwm_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.pwm_desired))
      buff.write(_struct_B.pack(self.enable_motor))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.chain,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.tq_desired = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ctrl_mode = str[start:end].decode('utf-8')
      else:
        self.ctrl_mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_stiffness = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_desired = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.qdot_desired = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_slew_rate = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pwm_desired = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.enable_motor,) = _struct_B.unpack(str[start:end])
      self.enable_motor = bool(self.enable_motor)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.chain))
      length = len(self.tq_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.tq_desired.tostring())
      _x = self.ctrl_mode
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.q_stiffness)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.q_stiffness.tostring())
      length = len(self.q_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.q_desired.tostring())
      length = len(self.qdot_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.qdot_desired.tostring())
      length = len(self.q_slew_rate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.q_slew_rate.tostring())
      length = len(self.pwm_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pwm_desired.tostring())
      buff.write(_struct_B.pack(self.enable_motor))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.chain,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.tq_desired = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ctrl_mode = str[start:end].decode('utf-8')
      else:
        self.ctrl_mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_stiffness = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_desired = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.qdot_desired = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_slew_rate = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pwm_desired = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.enable_motor,) = _struct_B.unpack(str[start:end])
      self.enable_motor = bool(self.enable_motor)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
"""autogenerated by genpy from m3_client/M3HumanoidCmdResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class M3HumanoidCmdResponse(genpy.Message):
  _md5sum = "f45f68e2feefb1307598e828e260b7d7"
  _type = "m3_client/M3HumanoidCmdResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 response

"""
  __slots__ = ['response']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       response

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(M3HumanoidCmdResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.response is None:
        self.response = 0
    else:
      self.response = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.response))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.response,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.response))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.response,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class M3HumanoidCmd(object):
  _type          = 'm3_client/M3HumanoidCmd'
  _md5sum = '36825d9d1e10e133bf2112ce1e5afc9c'
  _request_class  = M3HumanoidCmdRequest
  _response_class = M3HumanoidCmdResponse
