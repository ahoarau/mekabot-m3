"""autogenerated by genpy from m3_client/M3JointArrayCmdRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class M3JointArrayCmdRequest(genpy.Message):
  _md5sum = "5772a6ced2d04d1b8557faf86efbafdb"
  _type = "m3_client/M3JointArrayCmdRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[] tq_desired
int32[] pwm_desired
float32[] q_stiffness
int32[] ctrl_mode
float32[] q_desired
float32[] pos_desired
float32[] qdot_desired
float32[] q_slew_rate

"""
  __slots__ = ['tq_desired','pwm_desired','q_stiffness','ctrl_mode','q_desired','pos_desired','qdot_desired','q_slew_rate']
  _slot_types = ['float32[]','int32[]','float32[]','int32[]','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tq_desired,pwm_desired,q_stiffness,ctrl_mode,q_desired,pos_desired,qdot_desired,q_slew_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(M3JointArrayCmdRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tq_desired is None:
        self.tq_desired = []
      if self.pwm_desired is None:
        self.pwm_desired = []
      if self.q_stiffness is None:
        self.q_stiffness = []
      if self.ctrl_mode is None:
        self.ctrl_mode = []
      if self.q_desired is None:
        self.q_desired = []
      if self.pos_desired is None:
        self.pos_desired = []
      if self.qdot_desired is None:
        self.qdot_desired = []
      if self.q_slew_rate is None:
        self.q_slew_rate = []
    else:
      self.tq_desired = []
      self.pwm_desired = []
      self.q_stiffness = []
      self.ctrl_mode = []
      self.q_desired = []
      self.pos_desired = []
      self.qdot_desired = []
      self.q_slew_rate = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.tq_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.tq_desired))
      length = len(self.pwm_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.pwm_desired))
      length = len(self.q_stiffness)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.q_stiffness))
      length = len(self.ctrl_mode)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.ctrl_mode))
      length = len(self.q_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.q_desired))
      length = len(self.pos_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.pos_desired))
      length = len(self.qdot_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.qdot_desired))
      length = len(self.q_slew_rate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.q_slew_rate))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.tq_desired = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pwm_desired = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_stiffness = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.ctrl_mode = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_desired = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos_desired = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.qdot_desired = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_slew_rate = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.tq_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.tq_desired.tostring())
      length = len(self.pwm_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.pwm_desired.tostring())
      length = len(self.q_stiffness)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.q_stiffness.tostring())
      length = len(self.ctrl_mode)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.ctrl_mode.tostring())
      length = len(self.q_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.q_desired.tostring())
      length = len(self.pos_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pos_desired.tostring())
      length = len(self.qdot_desired)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.qdot_desired.tostring())
      length = len(self.q_slew_rate)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.q_slew_rate.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.tq_desired = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.pwm_desired = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_stiffness = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.ctrl_mode = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_desired = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pos_desired = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.qdot_desired = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.q_slew_rate = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from m3_client/M3JointArrayCmdResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class M3JointArrayCmdResponse(genpy.Message):
  _md5sum = "f45f68e2feefb1307598e828e260b7d7"
  _type = "m3_client/M3JointArrayCmdResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 response



"""
  __slots__ = ['response']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       response

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(M3JointArrayCmdResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.response is None:
        self.response = 0
    else:
      self.response = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.response))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.response,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.response))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.response,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class M3JointArrayCmd(object):
  _type          = 'm3_client/M3JointArrayCmd'
  _md5sum = '4432a41b7a22c858d4c20d1bddbf0718'
  _request_class  = M3JointArrayCmdRequest
  _response_class = M3JointArrayCmdResponse
