"""autogenerated by genpy from m3_client/M3HumanoidStatusRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class M3HumanoidStatusRequest(genpy.Message):
  _md5sum = "0ffb919411971afc3767d003eaba94ea"
  _type = "m3_client/M3HumanoidStatusRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 chain

"""
  __slots__ = ['chain']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       chain

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(M3HumanoidStatusRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.chain is None:
        self.chain = 0
    else:
      self.chain = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.chain))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.chain,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.chain))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.chain,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
"""autogenerated by genpy from m3_client/M3HumanoidStatusResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import m3_client.msg

class M3HumanoidStatusResponse(genpy.Message):
  _md5sum = "a6a6f9dfa781956d0e52a3c86bfd52a5"
  _type = "m3_client/M3HumanoidStatusResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """M3BaseStatus base
string[] joint_names
float32[] torque
float32[] torquedot
float32[] theta
float32[] thetadot
float32[] thetadotdot
int32 completed_spline_idx
float32[3] end_pos
float32[9] end_rot
float32[] J
float32[] G
float32[6] end_twist
float32[] pwm_cmd
bool motor_enabled

================================================================================
MSG: m3_client/M3BaseStatus
string name
uint8 state
int64 timestamp
string rate
string version


"""
  __slots__ = ['base','joint_names','torque','torquedot','theta','thetadot','thetadotdot','completed_spline_idx','end_pos','end_rot','J','G','end_twist','pwm_cmd','motor_enabled']
  _slot_types = ['m3_client/M3BaseStatus','string[]','float32[]','float32[]','float32[]','float32[]','float32[]','int32','float32[3]','float32[9]','float32[]','float32[]','float32[6]','float32[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       base,joint_names,torque,torquedot,theta,thetadot,thetadotdot,completed_spline_idx,end_pos,end_rot,J,G,end_twist,pwm_cmd,motor_enabled

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(M3HumanoidStatusResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.base is None:
        self.base = m3_client.msg.M3BaseStatus()
      if self.joint_names is None:
        self.joint_names = []
      if self.torque is None:
        self.torque = []
      if self.torquedot is None:
        self.torquedot = []
      if self.theta is None:
        self.theta = []
      if self.thetadot is None:
        self.thetadot = []
      if self.thetadotdot is None:
        self.thetadotdot = []
      if self.completed_spline_idx is None:
        self.completed_spline_idx = 0
      if self.end_pos is None:
        self.end_pos = [0.,0.,0.]
      if self.end_rot is None:
        self.end_rot = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.J is None:
        self.J = []
      if self.G is None:
        self.G = []
      if self.end_twist is None:
        self.end_twist = [0.,0.,0.,0.,0.,0.]
      if self.pwm_cmd is None:
        self.pwm_cmd = []
      if self.motor_enabled is None:
        self.motor_enabled = False
    else:
      self.base = m3_client.msg.M3BaseStatus()
      self.joint_names = []
      self.torque = []
      self.torquedot = []
      self.theta = []
      self.thetadot = []
      self.thetadotdot = []
      self.completed_spline_idx = 0
      self.end_pos = [0.,0.,0.]
      self.end_rot = [0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.J = []
      self.G = []
      self.end_twist = [0.,0.,0.,0.,0.,0.]
      self.pwm_cmd = []
      self.motor_enabled = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.base.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Bq.pack(_x.base.state, _x.base.timestamp))
      _x = self.base.rate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.torque))
      length = len(self.torquedot)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.torquedot))
      length = len(self.theta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.theta))
      length = len(self.thetadot)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.thetadot))
      length = len(self.thetadotdot)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.thetadotdot))
      buff.write(_struct_i.pack(self.completed_spline_idx))
      buff.write(_struct_3f.pack(*self.end_pos))
      buff.write(_struct_9f.pack(*self.end_rot))
      length = len(self.J)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.J))
      length = len(self.G)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.G))
      buff.write(_struct_6f.pack(*self.end_twist))
      length = len(self.pwm_cmd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.pwm_cmd))
      buff.write(_struct_B.pack(self.motor_enabled))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.base is None:
        self.base = m3_client.msg.M3BaseStatus()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.name = str[start:end].decode('utf-8')
      else:
        self.base.name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.base.state, _x.base.timestamp,) = _struct_Bq.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.rate = str[start:end].decode('utf-8')
      else:
        self.base.rate = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.version = str[start:end].decode('utf-8')
      else:
        self.base.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.torque = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.torquedot = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.theta = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.thetadot = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.thetadotdot = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.completed_spline_idx,) = _struct_i.unpack(str[start:end])
      start = end
      end += 12
      self.end_pos = _struct_3f.unpack(str[start:end])
      start = end
      end += 36
      self.end_rot = _struct_9f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.J = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.G = struct.unpack(pattern, str[start:end])
      start = end
      end += 24
      self.end_twist = _struct_6f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pwm_cmd = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.motor_enabled,) = _struct_B.unpack(str[start:end])
      self.motor_enabled = bool(self.motor_enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.base.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Bq.pack(_x.base.state, _x.base.timestamp))
      _x = self.base.rate
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.base.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.torque)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.torque.tostring())
      length = len(self.torquedot)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.torquedot.tostring())
      length = len(self.theta)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.theta.tostring())
      length = len(self.thetadot)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.thetadot.tostring())
      length = len(self.thetadotdot)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.thetadotdot.tostring())
      buff.write(_struct_i.pack(self.completed_spline_idx))
      buff.write(self.end_pos.tostring())
      buff.write(self.end_rot.tostring())
      length = len(self.J)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.J.tostring())
      length = len(self.G)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.G.tostring())
      buff.write(self.end_twist.tostring())
      length = len(self.pwm_cmd)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.pwm_cmd.tostring())
      buff.write(_struct_B.pack(self.motor_enabled))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.base is None:
        self.base = m3_client.msg.M3BaseStatus()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.name = str[start:end].decode('utf-8')
      else:
        self.base.name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.base.state, _x.base.timestamp,) = _struct_Bq.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.rate = str[start:end].decode('utf-8')
      else:
        self.base.rate = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base.version = str[start:end].decode('utf-8')
      else:
        self.base.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.torque = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.torquedot = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.theta = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.thetadot = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.thetadotdot = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.completed_spline_idx,) = _struct_i.unpack(str[start:end])
      start = end
      end += 12
      self.end_pos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 36
      self.end_rot = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.J = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.G = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 24
      self.end_twist = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.pwm_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.motor_enabled,) = _struct_B.unpack(str[start:end])
      self.motor_enabled = bool(self.motor_enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_6f = struct.Struct("<6f")
_struct_i = struct.Struct("<i")
_struct_9f = struct.Struct("<9f")
_struct_Bq = struct.Struct("<Bq")
_struct_3f = struct.Struct("<3f")
class M3HumanoidStatus(object):
  _type          = 'm3_client/M3HumanoidStatus'
  _md5sum = '7ccd98e6ad058fad2be7361cfc7d0728'
  _request_class  = M3HumanoidStatusRequest
  _response_class = M3HumanoidStatusResponse
