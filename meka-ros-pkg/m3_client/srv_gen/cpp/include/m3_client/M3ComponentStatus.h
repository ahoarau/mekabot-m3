/* Auto-generated by genmsg_cpp for file /home/meka/mekabot/meka-ros-pkg/m3_client/srv/M3ComponentStatus.srv */
#ifndef M3_CLIENT_SERVICE_M3COMPONENTSTATUS_H
#define M3_CLIENT_SERVICE_M3COMPONENTSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "m3_client/M3BaseStatus.h"

namespace m3_client
{
template <class ContainerAllocator>
struct M3ComponentStatusRequest_ {
  typedef M3ComponentStatusRequest_<ContainerAllocator> Type;

  M3ComponentStatusRequest_()
  : a(0)
  {
  }

  M3ComponentStatusRequest_(const ContainerAllocator& _alloc)
  : a(0)
  {
  }

  typedef int32_t _a_type;
  int32_t a;


  typedef boost::shared_ptr< ::m3_client::M3ComponentStatusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::m3_client::M3ComponentStatusRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct M3ComponentStatusRequest
typedef  ::m3_client::M3ComponentStatusRequest_<std::allocator<void> > M3ComponentStatusRequest;

typedef boost::shared_ptr< ::m3_client::M3ComponentStatusRequest> M3ComponentStatusRequestPtr;
typedef boost::shared_ptr< ::m3_client::M3ComponentStatusRequest const> M3ComponentStatusRequestConstPtr;


template <class ContainerAllocator>
struct M3ComponentStatusResponse_ {
  typedef M3ComponentStatusResponse_<ContainerAllocator> Type;

  M3ComponentStatusResponse_()
  : base()
  {
  }

  M3ComponentStatusResponse_(const ContainerAllocator& _alloc)
  : base(_alloc)
  {
  }

  typedef  ::m3_client::M3BaseStatus_<ContainerAllocator>  _base_type;
   ::m3_client::M3BaseStatus_<ContainerAllocator>  base;


  typedef boost::shared_ptr< ::m3_client::M3ComponentStatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::m3_client::M3ComponentStatusResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct M3ComponentStatusResponse
typedef  ::m3_client::M3ComponentStatusResponse_<std::allocator<void> > M3ComponentStatusResponse;

typedef boost::shared_ptr< ::m3_client::M3ComponentStatusResponse> M3ComponentStatusResponsePtr;
typedef boost::shared_ptr< ::m3_client::M3ComponentStatusResponse const> M3ComponentStatusResponseConstPtr;

struct M3ComponentStatus
{

typedef M3ComponentStatusRequest Request;
typedef M3ComponentStatusResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct M3ComponentStatus
} // namespace m3_client

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::m3_client::M3ComponentStatusRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::m3_client::M3ComponentStatusRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::m3_client::M3ComponentStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5c9fb1a886e81e3162a5c87bf55c072b";
  }

  static const char* value(const  ::m3_client::M3ComponentStatusRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5c9fb1a886e81e31ULL;
  static const uint64_t static_value2 = 0x62a5c87bf55c072bULL;
};

template<class ContainerAllocator>
struct DataType< ::m3_client::M3ComponentStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3_client/M3ComponentStatusRequest";
  }

  static const char* value(const  ::m3_client::M3ComponentStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::m3_client::M3ComponentStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 a\n\
\n\
";
  }

  static const char* value(const  ::m3_client::M3ComponentStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::m3_client::M3ComponentStatusRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::m3_client::M3ComponentStatusResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::m3_client::M3ComponentStatusResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::m3_client::M3ComponentStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac75cf21a132e6eb6963b9a15f47d754";
  }

  static const char* value(const  ::m3_client::M3ComponentStatusResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xac75cf21a132e6ebULL;
  static const uint64_t static_value2 = 0x6963b9a15f47d754ULL;
};

template<class ContainerAllocator>
struct DataType< ::m3_client::M3ComponentStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3_client/M3ComponentStatusResponse";
  }

  static const char* value(const  ::m3_client::M3ComponentStatusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::m3_client::M3ComponentStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "M3BaseStatus base\n\
\n\
================================================================================\n\
MSG: m3_client/M3BaseStatus\n\
string name\n\
uint8 state\n\
int64 timestamp\n\
string rate\n\
string version\n\
\n\
\n\
";
  }

  static const char* value(const  ::m3_client::M3ComponentStatusResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::m3_client::M3ComponentStatusRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.a);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct M3ComponentStatusRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::m3_client::M3ComponentStatusResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.base);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct M3ComponentStatusResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<m3_client::M3ComponentStatus> {
  static const char* value() 
  {
    return "241529ee0864eca3736d6be302d71b44";
  }

  static const char* value(const m3_client::M3ComponentStatus&) { return value(); } 
};

template<>
struct DataType<m3_client::M3ComponentStatus> {
  static const char* value() 
  {
    return "m3_client/M3ComponentStatus";
  }

  static const char* value(const m3_client::M3ComponentStatus&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<m3_client::M3ComponentStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "241529ee0864eca3736d6be302d71b44";
  }

  static const char* value(const m3_client::M3ComponentStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<m3_client::M3ComponentStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3_client/M3ComponentStatus";
  }

  static const char* value(const m3_client::M3ComponentStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<m3_client::M3ComponentStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "241529ee0864eca3736d6be302d71b44";
  }

  static const char* value(const m3_client::M3ComponentStatusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<m3_client::M3ComponentStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "m3_client/M3ComponentStatus";
  }

  static const char* value(const m3_client::M3ComponentStatusResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // M3_CLIENT_SERVICE_M3COMPONENTSTATUS_H

